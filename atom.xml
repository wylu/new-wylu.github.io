<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wylu</title>
  
  <subtitle>Keep It Simple, Stupid</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wylu.me/"/>
  <updated>2020-04-13T14:23:49.147Z</updated>
  <id>https://wylu.me/</id>
  
  <author>
    <name>lu wenye</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>博客迁移通知</title>
    <link href="https://wylu.me/posts/1cf8eb09/"/>
    <id>https://wylu.me/posts/1cf8eb09/</id>
    <published>2020-04-11T15:03:12.000Z</published>
    <updated>2020-04-13T14:23:49.147Z</updated>
    
    <content type="html"><![CDATA[<div class="note warning">            <h3 id="温馨提示">温馨提示</h3><p><strong>现在博客已经迁移到 <a href="https://wylu.me">https://wylu.me</a>，欢迎各位继续关注我的博客。</strong></p>          </div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;note warning&quot;&gt;
            &lt;h3 id=&quot;温馨提示&quot;&gt;温馨提示&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;现在博客已经迁移到 &lt;a href=&quot;https://wylu.me&quot;&gt;https://wylu.me&lt;/a&gt;，欢迎各位继续关注我的博
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Nginx configuration for CodeIgniter</title>
    <link href="https://wylu.me/posts/ec244fdf/"/>
    <id>https://wylu.me/posts/ec244fdf/</id>
    <published>2020-04-04T08:58:27.000Z</published>
    <updated>2020-04-04T09:12:01.819Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx server configuration for CodeIgniter</p><a id="more"></a><h1 id="my-environment">My Environment</h1><ul><li><strong>System:</strong> CentOS 7</li><li><strong>Web Server:</strong> Nginx v1.17.2</li><li><strong>Application Server:</strong> php-fpm (based on PHP 7.2)</li><li><strong>Web Framework:</strong> CodeIgniter v3.1.10</li></ul><h1 id="deploy-codeigniter-project">Deploy CodeIgniter project</h1><p>First, Goto <a href="https://www.codeigniter.com/download" rel="external nofollow noopener noreferrer" target="_blank">Official website</a> and download CodeIgniter.</p><p>Then, create a folder named <code>ci</code> in the root directory of the nginx server and extract the CodeIgniter framework code into this directory. As follow:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@xyz html]# pwd</span><br><span class="line">/usr/share/nginx/html</span><br><span class="line">[root@xyz html]# tree -L 1 ci</span><br><span class="line">ci</span><br><span class="line">├── application</span><br><span class="line">├── composer.json</span><br><span class="line">├── contributing.md</span><br><span class="line">├── index.php</span><br><span class="line">├── license.txt</span><br><span class="line">├── readme.rst</span><br><span class="line">├── system</span><br><span class="line">└── user_guide</span><br><span class="line"></span><br><span class="line">3 directories, 5 files</span><br><span class="line">[root@xyz html]#</span><br></pre></td></tr></table></figure><p>The path <code>/usr/share/nginx/html</code> is the default static files path of nginx in my machine. You can use any other path actually. Just for simple, my goal to test the nginx server configuration.</p><h1 id="edit-nginx-server-configuration">Edit Nginx server configuration</h1><p>Edit nginx default configuration file named <code>default.conf</code>, which is in <code>/etc/nginx/conf.d</code>.</p><p>I highly recommend you back up before changing the server configuration.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    root   /usr/share/nginx/html;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line"></span><br><span class="line">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        try_files $uri $uri/ =404;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /ci &#123;</span><br><span class="line">        try_files $uri $uri/ /ci/index.php?/$request_uri;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">    # redirect server error pages to the static page /50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    proxy_pass   http://127.0.0.1;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">    #</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">        include        fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class="line">    # concurs with nginx&apos;s one</span><br><span class="line">    #</span><br><span class="line">    location ~ /\.ht &#123;</span><br><span class="line">        deny  all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="test">Test</h1><p><strong>My codeigniter folder is <code>ci</code> which is located in <code>/usr/share/nginx/html/ci</code>.</strong></p><ul><li><p>default controller</p><p><code>http://yourdomain/ci/index.php/</code></p><p><code>http://yourdomain/ci/index.php/welcome</code></p><p>The effect of these two urls is the same. They all execute the <code>index</code> function of <code>Welcome</code> controller in <code>Welcome.php</code> file.</p></li><li><p>custom controller</p><p>Create a file named <code>Test.php</code> in <code>application/controllers</code> directory and edit it as follow:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">CI_Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Test Controller index!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Hello CodeIgniter!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Restart service and test:</p><p><code>http://yourdomain/ci/index.php/Test/</code></p><p><code>http://yourdomain/ci/index.php/Test/hello</code></p><p>All these work well.</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Nginx server configuration for CodeIgniter&lt;/p&gt;
    
    </summary>
    
      <category term="Language" scheme="https://wylu.me/categories/Language/"/>
    
      <category term="php" scheme="https://wylu.me/categories/Language/php/"/>
    
    
      <category term="CodeIgniter" scheme="https://wylu.me/tags/CodeIgniter/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB分片集群搭建</title>
    <link href="https://wylu.me/posts/e54730f4/"/>
    <id>https://wylu.me/posts/e54730f4/</id>
    <published>2020-04-04T08:17:04.000Z</published>
    <updated>2020-04-18T06:10:32.883Z</updated>
    
    <content type="html"><![CDATA[<p>在如今的互联网环境下，海量数据已随处可见并且还在不断增长，对于如何存储处理海量数据，比较常见的方法有两种：</p><ul><li><strong>垂直扩展</strong>：通过增加单台服务器的配置，例如使用更强悍的 CPU、更大的内存、更大容量的磁盘，此种方法虽然成本很高，但是实现比较简单，维护起来也比较方便。</li><li><strong>水平扩展</strong>：通过使用更多配置一般的服务器来共同承担工作负载，此种方法很灵活，可以根据工作负载的大小动态增减服务器的数量，但是实现比较复杂，得有专门的人员来运维。</li></ul><p>MongoDB 支持通过分片技术从而进行水平扩展，用以支撑海量数据集和高吞吐量的操作。如果数据集不够大，还是建议您使用 <a href="https://docs.mongodb.com/manual/replication/" rel="external nofollow noopener noreferrer" target="_blank">MongoDB 副本集</a>，因为分片需要处理更多的技术细节，所以在分片环境下其性能可能始终没有副本集性能强。本文通过介绍如何搭建 MongoDB 分片集群以及及一些相关核心概念，可以帮您快速理解 MongoDB 是如何通过分片技术来处理海量数据的。</p><a id="more"></a><h1 id="分片集群组件">分片集群组件</h1><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/Web/mongo/MongoDB分片集群搭建/sharded-cluster-production-architecture.svg" alt="sharded cluster"></p><p>MongoDB 分片集群（参考官方文档 <a href="https://docs.mongodb.com/manual/sharding/" rel="external nofollow noopener noreferrer" target="_blank">Sharded Cluster</a>）由以下三个组件构成，缺一不可：</p><ul><li>mongos：数据库集群请求的入口，所有的请求都通过 mongos 进行协调，不需要在应用程序添加一个路由选择器，mongos 自己就是一个请求分发中心，它负责把对应的数据请求请求转发到对应的 shard 服务器上。在生产环境通常有多 mongos 作为请求的入口，防止其中一个挂掉所有的 mongodb 请求都没有办法操作。</li><li>config server：顾名思义为配置服务器，存储所有数据库元信息（路由、分片）的配置。mongos 本身没有物理存储分片服务器和数据路由信息，只是缓存在内存里，配置服务器则实际存储这些数据。mongos 第一次启动或者关掉重启就会从 config server 加载配置信息，以后如果配置服务器信息变化会通知到所有的 mongos 更新自己的状态，这样 mongos 就能继续准确路由。从 MongoDB 3.4 开始，必须将配置服务器部署为副本集（CSRS，全称是 Config Servers Replica Set），因为它存储了分片路由的元数据，防止数据丢失！</li><li>shard，分片（sharding）是指将数据库拆分，将其分散在不同的机器上的过程，每个分片是整体数据的子集，且都可以部署为副本集。将数据分散到不同的机器上，不需要功能强大的服务器就可以存储更多的数据和处理更大的负载。基本思想就是将集合切成小块，这些块分散到若干片里，每个片只负责总数据的一部分，最后通过一个均衡器来对各个分片进行均衡（数据迁移）。</li></ul><p>其它名词概念：</p><ul><li>replica set：中文翻译副本集，其实就是 shard 的备份，防止 shard 挂掉之后数据丢失。复制提供了数据的冗余备份，并在多个服务器上存储数据副本，提高了数据的可用性， 并可以保证数据的安全性。</li><li>仲裁者（Arbiter）：是复制集中的一个 MongoDB 实例，它并不保存数据。仲裁节点使用最小的资源并且不要求硬件设备，不能将 Arbiter 部署在同一个数据集节点中，可以部署在其他应用服务器或者监视服务器中，也可部署在单独的虚拟机中。为了确保复制集中有奇数的投票成员（包括 primary），需要添加仲裁节点做为投票，否则 primary 不能运行时不会自动切换 primary。</li></ul><p>简单了解之后，我们可以这样总结一下，应用请求 mongos 来操作 mongodb 的增删改查，配置服务器存储数据库元信息，并且和 mongos 做同步，数据最终存入在 shard（分片）上，为了防止数据丢失同步在副本集中存储了一份，仲裁在数据存储到分片的时候决定存储到哪个节点。</p><h1 id="sharded-key-分片键">Sharded Key 分片键</h1><p>MongoDB 通过定义 shared key（分片键）从而对整个集合进行分片，分片键的好坏直接影响到整个集群的性能。另外需要注意的是，一个集合只有且只能有一个分片键，一旦分片键确定好之后就不能更改。分片键分为以下两种类型：</p><ul><li><strong>基于 Hashed 的分片</strong>：MongoDB 会计算分片键字段值的哈希值，用以确定该文档存于哪个 chunk，从而达到将集合分摊到不同的 chunk。此种类型能够使得数据整体分布比较均匀，对于等值查询效率很高，但是对于范围查询效率就比较低，因为可能要扫描所有的分片才能获取到数据。</li><li><strong>基于 Ranged 的分片</strong>：MongoDB 会将相似的值放到一个 chunk 中，所以说如果在查询的时候带上分片键的范围条件，查询效率会非常高，因为不需要扫描所有的分片就可以定位到数据。注意，如果片键的值为单调递增或单调递减，那么不适合采用该分片策略，因为数据总会写到一个分片，从而没有很好地分散 IO。</li></ul><p>分片键的类型需要根据实际的业务场景决定，例如有张非常大的用户表，用户表里有用户 ID 字段，每次查询的时候都会带上用户 ID，如果想对该用户表进行分片，可以选择将用户 ID 字段作为 shard key，并且分片键类型可以使用基于 Hashed 的分片。</p><h1 id="chunk-块">Chunk 块</h1><p><strong>chunk</strong>（块）是均衡器迁移数据的最小单元，默认大小为 64MB，取值范围为 1-1024MB。一个块只存在于一个分片，每个块由片键特定范围内的文档组成，块的范围为左闭又开即 <code>[start,end)</code>。一个文档属于且只属于一个块，当一个块增加到特定大小的时候，会通过拆分点（split point）被拆分成 2 个较小的块。在有些情况下，chunk 会持续增长，超过 ChunkSize，官方称为 <a href="https://www.ibm.com/developerworks/cn/opensource/os-mongodb-sharded-cluster/Maximum-Number-of-Documents-Per-Chunk-to-Migrate" rel="external nofollow noopener noreferrer" target="_blank">jumbo chunk</a>，该块无法被 MongoDB 拆分，也不能被均衡器迁移，故久而久之会导致 chunk 在分片服务器上分布不均匀，从而成为性能瓶颈，表现之一为 insert 数据变慢。</p><h2 id="chunk-的拆分">Chunk 的拆分</h2><p>mongos 会记录每个块中有多少数据，一旦达到了阈值就会检查是否需要对其进行拆分，如果确实需要拆分则可以在配置服务器上更新这个块的相关元信息。</p><p>chunk 的拆分过程如下：</p><ol type="1"><li>mongos 接收到客户端发起的写请求后会检查当前块的拆分阈值点。</li><li>如果需要拆分，mongos 则会像分片服务器发起一个拆分请求。</li><li>分片服务器会做拆分工作，然后将信息返回 mongos。</li></ol><p>注意，相同的片键只能保存在相同的块中，如果一个相同的片键过多，则会导致一个块过大，成为 jumbo chunk，所以具有不同值的片键很重要。</p><h2 id="chunk-的迁移过程"><a href="https://docs.mongodb.com/manual/core/sharding-balancer-administration/" rel="external nofollow noopener noreferrer" target="_blank">Chunk 的迁移过程</a></h2><ol type="1"><li>均衡器进程发送 <code>moveChunk</code> 命令到源分片。</li><li>源分片使用内部 <code>moveChunk</code> 命令，在迁移过程，对该块的操作还是会路由到源分片。</li><li>目标分片构建索引。</li><li>目标分片开始进行数据复制。</li><li>复制完成后会同步在迁移过程中该块的更改。</li><li>同步完成后源分片会连接到配置服务器，使用块的新位置更新集群元数据。</li><li>源分片完成元数据更新后，一旦块上没有打开的游标，源分片将删除其文档副本。</li></ol><p>迁移过程可确保一致性，并在平衡期间最大化块的可用性。</p><h2 id="chunk-迁移的阈值">Chunk 迁移的阈值</h2><p>为了最大程度地减少平衡对集群的影响，平衡器仅在分片集合的块分配达到某些阈值之后才开始平衡。阈值适用于集合中具有最多块的 shard 与该集合中具有最少块的 shard 之间的块数差异。平衡器具有以下阈值：</p><table><thead><tr class="header"><th style="text-align: left;">Number of Chunks</th><th style="text-align: left;">Migration Threshold</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">Fewer than 20</td><td style="text-align: left;">2</td></tr><tr class="even"><td style="text-align: left;">20-79</td><td style="text-align: left;">4</td></tr><tr class="odd"><td style="text-align: left;">80 and greater</td><td style="text-align: left;">8</td></tr></tbody></table><p>当该集合的任何两个分片上的块数之差小于2或块迁移失败时，平衡器将停止在目标集合上运行。</p><h2 id="修改-chunk-size-的注意事项">修改 Chunk Size 的注意事项</h2><p>修改 chunk 大小需要注意以下几点：</p><ol type="1"><li>chunk 的自动拆分操作仅发生在插入或更新的时候。</li><li>如果减少 chunk size，将会耗费一些时间将原有的 chunk 拆分到新 chunk，并且此操作不可逆。</li><li>如果新增 chunk size，已存在的 chunk 只会等到新的插入或更新操作将其扩充至新的大小。</li><li>chunk size 的可调整范围为 1-1024MB。</li></ol><h1 id="balancer-均衡器">Balancer 均衡器</h1><p>MongoDB 的 balancer（均衡器）是监视每个分片的 chunk 数的一个后台进程。当分片上的 chunk 数达到特定迁移阈值时，均衡器会尝试在分片之间自动迁移块，使得每个分片的块的数量达到平衡。分片群集的平衡过程对用户和应用程序层完全透明，但在执行过程时可能会对性能产生一些影响。</p><p>从 MongoDB 3.4 开始，balancer 在配置服务器副本集（CSRS）的主服务器上运行，在 3.4 版本中，当平衡器进程处于活动状态时，主配置服务器的的 locks 集合通过修改 <code>_id: "balancer"</code> 文档会获取一个 balancer lock，该 balancer lock 不会被释放，是为了保证只有一个 mongos 实例能够在分片集群中执行管理任务。从 3.6 版本开始，均衡器不再需要 balancer lock。</p><p>均衡器可以动态的开启和关闭，也可以针对指定的集合开启和关闭，还可以手动控制均衡器迁移 chunk 的时间，避免在业务高峰期的时候迁移 chunk 从而影响集群性能。以下命令将均衡器的迁移 chunk 时间控制在凌晨 02 点至凌晨 06 点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use config</span><br><span class="line">db.settings.update(</span><br><span class="line">   &#123; _id: "balancer" &#125;,</span><br><span class="line">   &#123; $set: &#123; activeWindow : &#123; start : "02:00", stop : "06:00" &#125; &#125; &#125;,</span><br><span class="line">   &#123; upsert: true &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="环境准备">环境准备</h1><ul><li><p>系统系统：CentOS7 64位</p></li><li><p>三台服务器：192.168.0.11/12/13</p></li><li><p>安装包：mongodb-linux-x86_64-4.2.5.tgz</p></li><li><p>服务器规划</p><table><thead><tr class="header"><th><strong>服务器11</strong></th><th><strong>服务器12</strong></th><th><strong>服务器13</strong></th></tr></thead><tbody><tr class="odd"><td>mongos</td><td>mongos</td><td>mongos</td></tr><tr class="even"><td>config server</td><td>config server</td><td>config server</td></tr><tr class="odd"><td>shard server1 主节点</td><td>shard server1 副节点</td><td>shard server1 仲裁</td></tr><tr class="even"><td>shard server2 仲裁</td><td>shard server2 主节点</td><td>shard server2 副节点</td></tr><tr class="odd"><td>shard server3 副节点</td><td>shard server3 仲裁</td><td>shard server3 主节点</td></tr></tbody></table></li><li><p>端口分配</p><ul><li>mongos：20000</li><li>config：21000</li><li>shard1：27001</li><li>shard2：27002</li><li>shard3：27003</li></ul></li></ul><h1 id="分片集群搭建">分片集群搭建</h1><h2 id="安装-mongodb">安装 mongodb</h2><p><a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat-tarball/" rel="external nofollow noopener noreferrer" target="_blank">https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat-tarball/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf mongodb-linux-x86_64-4.2.5.tgz -C /usr/local/</span><br><span class="line">mv mongodb-linux-x86_64-4.2.5 mongodb</span><br></pre></td></tr></table></figure><h3 id="创建数据和日志目录">创建数据和日志目录</h3><p>分别在每台机器建立 conf、mongos、config、shard1、shard2、shard3 六个目录，因为 mongos 不存储数据，只需要建立日志文件目录即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/local/mongodb/conf /usr/local/mongodb/mongos/log /usr/local/mongodb/config/data /usr/local/mongodb/config/log /usr/local/mongodb/shard1/data /usr/local/mongodb/shard1/log /usr/local/mongodb/shard2/data /usr/local/mongodb/shard2/log /usr/local/mongodb/shard3/data /usr/local/mongodb/shard3/log</span><br></pre></td></tr></table></figure><h3 id="配置环境变量">配置环境变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>添加如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export MONGODB_HOME=/usr/local/mongodb</span><br><span class="line">export PATH=$MONGODB_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><p>使修改立即生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h2 id="config-server-配置服务器">config server 配置服务器</h2><p>mongodb3.4 以后要求配置服务器也创建副本集，不然集群搭建不成功。</p><p>添加配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/mongodb/conf/config.conf</span><br></pre></td></tr></table></figure><p>配置文件内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pidfilepath</span>=/usr/local/mongodb/config/log/configsrv.pid</span><br><span class="line"><span class="attr">dbpath</span>=/usr/local/mongodb/config/data</span><br><span class="line"><span class="attr">logpath</span>=/usr/local/mongodb/config/log/configsrv.log</span><br><span class="line"><span class="attr">logappend</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">bind_ip</span>=<span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">21000</span></span><br><span class="line"><span class="attr">fork</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 声明这是集群的配置服务器</span></span><br><span class="line"><span class="attr">configsvr</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 副本集名称</span></span><br><span class="line"><span class="attr">replSet</span>=configs</span><br><span class="line"><span class="comment"># 设置最大连接数</span></span><br><span class="line"><span class="attr">maxConns</span>=<span class="number">20000</span></span><br></pre></td></tr></table></figure><p>启动三台服务器的 config server：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod -f /usr/local/mongodb/conf/config.conf</span><br></pre></td></tr></table></figure><p>登录任意一台配置服务器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo --port 21000</span><br></pre></td></tr></table></figure><p>定义 config server 副本集配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">config = &#123;</span><br><span class="line">    _id : "configs",</span><br><span class="line">    members : [</span><br><span class="line">        &#123;_id : 0, host : "192.168.0.11:21000" &#125;,</span><br><span class="line">        &#123;_id : 1, host : "192.168.0.12:21000" &#125;,</span><br><span class="line">        &#123;_id : 2, host : "192.168.0.13:21000" &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化 config server 副本集：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.initiate(config)</span><br></pre></td></tr></table></figure><p>其中，<code>_id : "configs"</code> 应与配置文件中配置的 <code>replicaction.replSetName</code> 一致，"members" 中的 "host" 为三个节点的 ip 和 port</p><h2 id="配置分片副本集三台机器">配置分片副本集（三台机器）</h2><h3 id="设置第一个分片副本集">设置第一个分片副本集</h3><p>添加配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/mongodb/conf/shard1.conf</span><br></pre></td></tr></table></figure><p>配置文件内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pidfilepath</span>=/usr/local/mongodb/shard1/log/shard1.pid</span><br><span class="line"><span class="attr">dbpath</span>=/usr/local/mongodb/shard1/data</span><br><span class="line"><span class="attr">logpath</span>=/usr/local/mongodb/shard1/log/shard1.log</span><br><span class="line"><span class="attr">logappend</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">bind_ip</span>=<span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">27001</span></span><br><span class="line"><span class="attr">fork</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 副本集名称</span></span><br><span class="line"><span class="attr">replSet</span>=shard1</span><br><span class="line"><span class="comment"># 声明这是集群的一个分片服务器</span></span><br><span class="line"><span class="attr">shardsvr</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 设置最大连接数</span></span><br><span class="line"><span class="attr">maxConns</span>=<span class="number">20000</span></span><br></pre></td></tr></table></figure><p>启动三台服务器的 shard1 server：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod -f /usr/local/mongodb/conf/shard1.conf</span><br></pre></td></tr></table></figure><p>登录任意一台非 arbiter 的 shard1 server：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo --port 27001</span><br></pre></td></tr></table></figure><p>使用 admin 数据库，定义 shard1 server 副本集配置：</p><p>第三个节点的 <code>arbiterOnly: true</code> 代表其为仲裁节点。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br><span class="line">config = &#123;</span><br><span class="line">    _id : "shard1",</span><br><span class="line">    members : [</span><br><span class="line">        &#123;_id : 0, host : "192.168.0.11:27001"&#125;,</span><br><span class="line">        &#123;_id : 1, host : "192.168.0.12:27001"&#125;,</span><br><span class="line">        &#123;_id : 2, host : "192.168.0.13:27001", arbiterOnly: true&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化 shard1 server 副本集：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.initiate(config)</span><br></pre></td></tr></table></figure><h3 id="设置第二个分片副本集">设置第二个分片副本集</h3><p>添加配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/mongodb/conf/shard2.conf</span><br></pre></td></tr></table></figure><p>配置文件内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pidfilepath</span>=/usr/local/mongodb/shard2/log/shard2.pid</span><br><span class="line"><span class="attr">dbpath</span>=/usr/local/mongodb/shard2/data</span><br><span class="line"><span class="attr">logpath</span>=/usr/local/mongodb/shard2/log/shard2.log</span><br><span class="line"><span class="attr">logappend</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">bind_ip</span>=<span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">27002</span></span><br><span class="line"><span class="attr">fork</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 副本集名称</span></span><br><span class="line"><span class="attr">replSet</span>=shard2</span><br><span class="line"><span class="comment"># 声明这是集群的一个分片服务器</span></span><br><span class="line"><span class="attr">shardsvr</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 设置最大连接数</span></span><br><span class="line"><span class="attr">maxConns</span>=<span class="number">20000</span></span><br></pre></td></tr></table></figure><p>启动三台服务器的 shard2 server：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod -f /usr/local/mongodb/conf/shard2.conf</span><br></pre></td></tr></table></figure><p>登录任意一台非 arbiter 的 shard2 server：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo --port 27002</span><br></pre></td></tr></table></figure><p>使用 admin 数据库，定义 shard2 server 副本集配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br><span class="line">config = &#123;</span><br><span class="line">    _id : "shard2",</span><br><span class="line">    members : [</span><br><span class="line">        &#123;_id : 0, host : "192.168.0.11:27002", arbiterOnly: true&#125;,</span><br><span class="line">        &#123;_id : 1, host : "192.168.0.12:27002"&#125;,</span><br><span class="line">        &#123;_id : 2, host : "192.168.0.13:27002"&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化 shard2 server 副本集：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.initiate(config)</span><br></pre></td></tr></table></figure><h3 id="设置第三个分片副本集">设置第三个分片副本集</h3><p>添加配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/mongodb/conf/shard3.conf</span><br></pre></td></tr></table></figure><p>配置文件内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pidfilepath</span>=/usr/local/mongodb/shard3/log/shard3.pid</span><br><span class="line"><span class="attr">dbpath</span>=/usr/local/mongodb/shard3/data</span><br><span class="line"><span class="attr">logpath</span>=/usr/local/mongodb/shard3/log/shard3.log</span><br><span class="line"><span class="attr">logappend</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">bind_ip</span>=<span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">27003</span></span><br><span class="line"><span class="attr">fork</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 副本集名称</span></span><br><span class="line"><span class="attr">replSet</span>=shard3</span><br><span class="line"><span class="comment"># 声明这是集群的一个分片服务器</span></span><br><span class="line"><span class="attr">shardsvr</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 设置最大连接数</span></span><br><span class="line"><span class="attr">maxConns</span>=<span class="number">20000</span></span><br></pre></td></tr></table></figure><p>启动三台服务器的 shard3 server：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod -f /usr/local/mongodb/conf/shard3.conf</span><br></pre></td></tr></table></figure><p>登录任意一台非 arbiter 的 shard3 server：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo --port 27003</span><br></pre></td></tr></table></figure><p>使用 admin 数据库，定义 shard3 server 副本集配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br><span class="line">config = &#123;</span><br><span class="line">    _id : "shard3",</span><br><span class="line">    members : [</span><br><span class="line">        &#123;_id : 0, host : "192.168.0.11:27003"&#125;,</span><br><span class="line">        &#123;_id : 1, host : "192.168.0.12:27003", arbiterOnly: true&#125;,</span><br><span class="line">        &#123;_id : 2, host : "192.168.0.13:27003"&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化 shard3 server 副本集：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.initiate(config)</span><br></pre></td></tr></table></figure><h2 id="配置路由服务器-mongos">配置路由服务器 mongos</h2><p>先启动配置服务器和分片服务器，后启动路由实例：（三台机器）</p><p>添加配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/mongodb/conf/mongos.conf</span><br></pre></td></tr></table></figure><p>配置文件内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pidfilepath</span>=/usr/local/mongodb/mongos/log/mongos.pid</span><br><span class="line"><span class="attr">logpath</span>=/usr/local/mongodb/mongos/log/mongos.log</span><br><span class="line"><span class="attr">logappend</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">bind_ip</span>=<span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">20000</span></span><br><span class="line"><span class="attr">fork</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 监听的配置服务器, 只能有1个或者3个, configs为配置服务器的副本集名字</span></span><br><span class="line"><span class="attr">configdb</span>=configs/<span class="number">192.168</span>.<span class="number">0.11</span>:<span class="number">21000</span>,<span class="number">192.168</span>.<span class="number">0.12</span>:<span class="number">21000</span>,<span class="number">192.168</span>.<span class="number">0.13</span>:<span class="number">21000</span></span><br><span class="line"><span class="comment"># 设置最大连接数</span></span><br><span class="line"><span class="attr">maxConns</span>=<span class="number">20000</span></span><br></pre></td></tr></table></figure><p>启动三台服务器的 mongos server：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongos -f /usr/local/mongodb/conf/mongos.conf</span><br></pre></td></tr></table></figure><h2 id="启用分片">启用分片</h2><p>目前搭建了 mongodb 配置服务器、路由服务器，各个分片服务器，不过应用程序连接到 mongos 路由服务器并不能使用分片机制，还需要在程序里设置分片配置，让分片生效。</p><p>登陆任意一台 mongos：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo --port 20000</span><br></pre></td></tr></table></figure><p>使用 admin 数据库，串联路由服务器与分片副本集：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br><span class="line">sh.addShard("shard1/192.168.0.11:27001,192.168.0.12:27001,192.168.0.13:27001")</span><br><span class="line">sh.addShard("shard2/192.168.0.11:27002,192.168.0.12:27002,192.168.0.13:27002")</span><br><span class="line">sh.addShard("shard3/192.168.0.11:27003,192.168.0.12:27003,192.168.0.13:27003")</span><br></pre></td></tr></table></figure><p>查看集群状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh.status()</span><br></pre></td></tr></table></figure><h2 id="测试分片">测试分片</h2><h3 id="基于-hashed-的分片">基于 Hashed 的分片</h3><p>目前配置服务、路由服务、分片服务、副本集服务都已经串联起来了，现在我们希望插入数据时，数据能够自动分片。</p><p>首先连接到 mongos：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo --port 20000</span><br></pre></td></tr></table></figure><p>切换到 admin 数据库，让指定的数据库、指定的集合分片生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启 <span class="built_in">test</span> 库的分片功能</span></span><br><span class="line">db.runCommand(&#123;enablesharding: "test"&#125;)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择集合的分片键，注意这里创建的是 <span class="built_in">hash</span> 索引</span></span><br><span class="line">db.runCommand(&#123;shardcollection: "test.hashed", key: &#123;_id: "hashed"&#125;&#125;)</span><br></pre></td></tr></table></figure><p>这里设置 test 数据库的 <code>hashed</code> 表需要分片，根据 <code>_id</code> 自动分片到 shard1，shard2，shard3 上面去，之所以这样设置是因为不是所有 mongodb 的数据库和表都需要分片！</p><p>查看此时的分片的状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mongos&gt;</span><span class="bash"> sh.status()</span></span><br><span class="line">--- Sharding Status ---</span><br><span class="line">  sharding version: &#123;</span><br><span class="line">        "_id" : 1,</span><br><span class="line">        "minCompatibleVersion" : 5,</span><br><span class="line">        "currentVersion" : 6,</span><br><span class="line">        "clusterId" : ObjectId("5e82a238caf5457afd11f184")</span><br><span class="line">  &#125;</span><br><span class="line">  shards:</span><br><span class="line">        &#123;  "_id" : "shard1",  "host" : "shard1/192.168.0.11:27001,192.168.0.12:27001",  "state" : 1 &#125;</span><br><span class="line">        &#123;  "_id" : "shard2",  "host" : "shard2/192.168.0.12:27002,192.168.0.13:27002",  "state" : 1 &#125;</span><br><span class="line">        &#123;  "_id" : "shard3",  "host" : "shard3/192.168.0.11:27003,192.168.0.13:27003",  "state" : 1 &#125;</span><br><span class="line">  active mongoses:</span><br><span class="line">        "4.2.5" : 1</span><br><span class="line">  autosplit:</span><br><span class="line">        Currently enabled: yes</span><br><span class="line">  balancer:</span><br><span class="line">        Currently enabled:  yes</span><br><span class="line">        Currently running:  no</span><br><span class="line">        Failed balancer rounds in last 5 attempts:  0</span><br><span class="line">        Migration Results for the last 24 hours:</span><br><span class="line">                6 : Success</span><br><span class="line">  databases:</span><br><span class="line">        &#123;  "_id" : "config",  "primary" : "config",  "partitioned" : true &#125;</span><br><span class="line">                config.system.sessions</span><br><span class="line">                        shard key: &#123; "_id" : 1 &#125;</span><br><span class="line">                        unique: false</span><br><span class="line">                        balancing: true</span><br><span class="line">                        chunks:</span><br><span class="line">                                shard1  1</span><br><span class="line">                        &#123; "_id" : &#123; "$minKey" : 1 &#125; &#125; --&gt;&gt; &#123; "_id" : &#123; "$maxKey" : 1 &#125; &#125; on : shard1 Timestamp(1, 0)</span><br><span class="line">        &#123;  "_id" : "test",  "primary" : "shard1",  "partitioned" : true,  "version" : &#123;  "uuid" : UUID("3ed17366-fef3-4225-bdc4-f89f8bf751cf"),  "lastMod" : 1 &#125; &#125;</span><br><span class="line">                test.hashed</span><br><span class="line">                        shard key: &#123; "_id" : "hashed" &#125;</span><br><span class="line">                        unique: false</span><br><span class="line">                        balancing: true</span><br><span class="line">                        chunks:</span><br><span class="line">                                shard1  2</span><br><span class="line">                                shard2  2</span><br><span class="line">                                shard3  2</span><br><span class="line">                        &#123; "_id" : &#123; "$minKey" : 1 &#125; &#125; --&gt;&gt; &#123; "_id" : NumberLong("-6148914691236517204") &#125; on : shard1 Timestamp(1, 0)</span><br><span class="line">                        &#123; "_id" : NumberLong("-6148914691236517204") &#125; --&gt;&gt; &#123; "_id" : NumberLong("-3074457345618258602") &#125; on : shard1 Timestamp(1, 1)</span><br><span class="line">                        &#123; "_id" : NumberLong("-3074457345618258602") &#125; --&gt;&gt; &#123; "_id" : NumberLong(0) &#125; on : shard2 Timestamp(1, 2)</span><br><span class="line">                        &#123; "_id" : NumberLong(0) &#125; --&gt;&gt; &#123; "_id" : NumberLong("3074457345618258602") &#125; on : shard2 Timestamp(1, 3)</span><br><span class="line">                        &#123; "_id" : NumberLong("3074457345618258602") &#125; --&gt;&gt; &#123; "_id" : NumberLong("6148914691236517204") &#125; on : shard3 Timestamp(1, 4)</span><br><span class="line">                        &#123; "_id" : NumberLong("6148914691236517204") &#125; --&gt;&gt; &#123; "_id" : &#123; "$maxKey" : 1 &#125; &#125; on : shard3 Timestamp(1, 5)</span><br><span class="line"></span><br><span class="line"><span class="meta">mongos&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure><p>切换到 test 数据库，测试分片配置结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use test</span><br><span class="line"><span class="meta">#</span><span class="bash"> 插入测试数据</span></span><br><span class="line">for (var i = 1; i &lt;= 100000; i++) db.hashed.save(&#123;"task": i, "createTime": new Date()&#125;);</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看分片情况</span></span><br><span class="line">db.hashed.stats();</span><br></pre></td></tr></table></figure><p>查看分片情况，省掉了部分无关信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mongos&gt;</span><span class="bash"> use <span class="built_in">test</span></span></span><br><span class="line">switched to db test</span><br><span class="line"><span class="meta">mongos&gt;</span><span class="bash"> <span class="keyword">for</span> (var i = 1; i &lt;= 100000; i++) db.hashed.save(&#123;<span class="string">"task"</span>: i, <span class="string">"createTime"</span>: new Date()&#125;);</span></span><br><span class="line">WriteResult(&#123; "nInserted" : 1 &#125;)</span><br><span class="line"><span class="meta">mongos&gt;</span><span class="bash"> db.hashed.stats()</span></span><br><span class="line">&#123;</span><br><span class="line">        "sharded" : true,</span><br><span class="line">        "capped" : false,</span><br><span class="line">        ...</span><br><span class="line">        "ns" : "test.hashed",</span><br><span class="line">        "count" : 100000,</span><br><span class="line">        "size" : 5600000,</span><br><span class="line">        "storageSize" : 2539520,</span><br><span class="line">        "totalIndexSize" : 4485120,</span><br><span class="line">        "indexSizes" : &#123;</span><br><span class="line">                "_id_" : 1036288,</span><br><span class="line">                "_id_hashed" : 3448832</span><br><span class="line">        &#125;,</span><br><span class="line">        "avgObjSize" : 56,</span><br><span class="line">        "maxSize" : NumberLong(0),</span><br><span class="line">        "nindexes" : 2,</span><br><span class="line">        "nchunks" : 6,</span><br><span class="line">        "shards" : &#123;</span><br><span class="line">                "shard3" : &#123;</span><br><span class="line">                        "ns" : "test.hashed",</span><br><span class="line">                        "size" : 1872584,</span><br><span class="line">                        "count" : 33439,</span><br><span class="line">                        "avgObjSize" : 56,</span><br><span class="line">                        "storageSize" : 675840,</span><br><span class="line">                        "capped" : false,</span><br><span class="line">                        ...</span><br><span class="line">                        "ok" : 1,</span><br><span class="line">                        ...</span><br><span class="line">                &#125;,</span><br><span class="line">                "shard2" : &#123;</span><br><span class="line">                        "ns" : "test.hashed",</span><br><span class="line">                        "size" : 1874656,</span><br><span class="line">                        "count" : 33476,</span><br><span class="line">                        "avgObjSize" : 56,</span><br><span class="line">                        "storageSize" : 663552,</span><br><span class="line">                        "capped" : false,</span><br><span class="line">                        ...</span><br><span class="line">                        "ok" : 1,</span><br><span class="line">                        ...</span><br><span class="line">                &#125;,</span><br><span class="line">                "shard1" : &#123;</span><br><span class="line">                        "ns" : "test.hashed",</span><br><span class="line">                        "size" : 1852760,</span><br><span class="line">                        "count" : 33085,</span><br><span class="line">                        "avgObjSize" : 56,</span><br><span class="line">                        "storageSize" : 1200128,</span><br><span class="line">                        "capped" : false,</span><br><span class="line">                        ...</span><br><span class="line">                        "ok" : 1,</span><br><span class="line">                        ...</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        "ok" : 1,</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">mongos&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure><p>可以看到数据分到3个分片，各自分片数量为：</p><ul><li>shard1 <code>"count": 33085</code></li><li>shard2 <code>"count": 33476</code></li><li>shard3 <code>"count": 33439</code></li></ul><p>33085 + 33476 + 33085 = 100000</p><h3 id="基于-ranged-的分片">基于 Ranged 的分片</h3><p>基于范围分片特别适合范围查找，因为可以直接定位到分片，所以效率很高。</p><p>为了方便看到基于 Ranged 分片的效果，我们先修改分片集群的 Chunk Size。</p><blockquote><p>分片群集的默认块大小为 64 MB。 此默认块大小适用于大多数部署。但是，如果您发现自动迁移的 I/O超出了硬件的处理能力，则可能需要减小块大小。对于自动拆分和迁移，小的块大小会导致更快和更频繁的迁移。块大小的允许范围在 1 到 1024 MB（含）之间。</p></blockquote><p>连接到 mongos：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo --port 20000</span><br></pre></td></tr></table></figure><p>切换到 config 数据库，使用 save() 来设置全局块大小的配置值：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use config</span><br><span class="line">db.settings.save(&#123;_id: "chunksize", value: 2&#125;)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 chunk size 配置值</span></span><br><span class="line">db.settings.find(&#123;_id: "chunksize"&#125;)</span><br></pre></td></tr></table></figure><p>切换到 admin 数据库，让指定的数据库、指定的集合分片生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启 <span class="built_in">test</span> 库的分片功能</span></span><br><span class="line">db.runCommand(&#123;enablesharding: "test"&#125;)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择集合的分片键，此时 MongoDB 会自动为 age 字段创建索引</span></span><br><span class="line">db.runCommand(&#123;shardcollection: "test.ranged", key: &#123;"age": 1&#125;&#125;)</span><br></pre></td></tr></table></figure><p>这里设置 test 数据库的 <code>ranged</code> 表需要分片，根据 <code>age</code> 自动分片到 shard1，shard2，shard3，查看此时的分片的状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mongos&gt;</span><span class="bash"> sh.status()</span></span><br><span class="line">--- Sharding Status ---</span><br><span class="line">  sharding version: &#123;</span><br><span class="line">        "_id" : 1,</span><br><span class="line">        "minCompatibleVersion" : 5,</span><br><span class="line">        "currentVersion" : 6,</span><br><span class="line">        "clusterId" : ObjectId("5e82fe6c6f3857f3fd9253ed")</span><br><span class="line">  &#125;</span><br><span class="line">  shards:</span><br><span class="line">        &#123;  "_id" : "shard1",  "host" : "shard1/10.251.1.231:27001,10.251.1.232:27001",  "state" : 1 &#125;</span><br><span class="line">        &#123;  "_id" : "shard2",  "host" : "shard2/10.251.1.232:27002,10.251.1.233:27002",  "state" : 1 &#125;</span><br><span class="line">        &#123;  "_id" : "shard3",  "host" : "shard3/10.251.1.231:27003,10.251.1.233:27003",  "state" : 1 &#125;</span><br><span class="line">  active mongoses:</span><br><span class="line">        "4.2.5" : 1</span><br><span class="line">  autosplit:</span><br><span class="line">        Currently enabled: yes</span><br><span class="line">  balancer:</span><br><span class="line">        Currently enabled:  yes</span><br><span class="line">        Currently running:  no</span><br><span class="line">        Failed balancer rounds in last 5 attempts:  0</span><br><span class="line">        Migration Results for the last 24 hours:</span><br><span class="line">                No recent migrations</span><br><span class="line">  databases:</span><br><span class="line">        &#123;  "_id" : "config",  "primary" : "config",  "partitioned" : true &#125;</span><br><span class="line">                config.system.sessions</span><br><span class="line">                        shard key: &#123; "_id" : 1 &#125;</span><br><span class="line">                        unique: false</span><br><span class="line">                        balancing: true</span><br><span class="line">                        chunks:</span><br><span class="line">                                shard1  1</span><br><span class="line">                        &#123; "_id" : &#123; "$minKey" : 1 &#125; &#125; --&gt;&gt; &#123; "_id" : &#123; "$maxKey" : 1 &#125; &#125; on : shard1 Timestamp(1, 0)</span><br><span class="line">        &#123;  "_id" : "test",  "primary" : "shard1",  "partitioned" : true,  "version" : &#123;  "uuid" : UUID("73c9a05f-b578-41ea-92c0-42d11821004c"),  "lastMod" : 1 &#125; &#125;</span><br><span class="line">                test.ranged</span><br><span class="line">                        shard key: &#123; "age" : 1 &#125;</span><br><span class="line">                        unique: false</span><br><span class="line">                        balancing: true</span><br><span class="line">                        chunks:</span><br><span class="line">                                shard1  1</span><br><span class="line">                        &#123; "age" : &#123; "$minKey" : 1 &#125; &#125; --&gt;&gt; &#123; "age" : &#123; "$maxKey" : 1 &#125; &#125; on : shard1 Timestamp(1, 0)</span><br><span class="line"></span><br><span class="line"><span class="meta">mongos&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure><p>切换到 test 数据库，测试分片配置结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use test</span><br><span class="line"><span class="meta">#</span><span class="bash"> 插入测试数据</span></span><br><span class="line">for (var i = 1; i &lt;= 100000; i++) db.ranged.save(&#123;"age": NumberInt(i % 100), "createTime": new Date()&#125;);</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看分片情况</span></span><br><span class="line">db.ranged.stats()</span><br></pre></td></tr></table></figure><h1 id="后期运维">后期运维</h1><h2 id="启动关闭">启动关闭</h2><p>mongodb 的启动顺序是，先启动配置服务器，再启动分片，最后启动 mongos</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mongod -f /usr/local/mongodb/conf/config.conf</span><br><span class="line">mongod -f /usr/local/mongodb/conf/shard1.conf</span><br><span class="line">mongod -f /usr/local/mongodb/conf/shard2.conf</span><br><span class="line">mongod -f /usr/local/mongodb/conf/shard3.conf</span><br><span class="line">mongod -f /usr/local/mongodb/conf/mongos.conf</span><br></pre></td></tr></table></figure><p>关闭时，直接 killall 杀掉所有进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">killall mongod</span><br><span class="line">killall mongos</span><br></pre></td></tr></table></figure><h2 id="注意事项">注意事项</h2><ol type="1"><li>Mongodb 分片需要比较大的内存，搭建时分配比较大的内存空间，线上环境是 48G</li><li>每个 mongodb 实例，需要限制 wiredTigerCacheSizeGB 大小，即在每个配置文件中增加这个配置。根据经验，如果每台机器上的实例个数 n，<code>n * wiredTigerCacheSizeGB &lt; 2/3</code> 总内存</li><li>Mongodb 分片后，每次 update 数据时，必须指定片键，没有片键无法 update</li></ol><h1 id="附录">附录</h1><h2 id="清除数据和日志目录">清除数据和日志目录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rm -rf config/data/*</span><br><span class="line">rm -rf config/log/*</span><br><span class="line">rm -rf mongos/log/*</span><br><span class="line">rm -rf shard1/data/*</span><br><span class="line">rm -rf shard1/log/*</span><br><span class="line">rm -rf shard2/data/*</span><br><span class="line">rm -rf shard2/log/*</span><br><span class="line">rm -rf shard3/data/*</span><br><span class="line">rm -rf shard3/log/*</span><br></pre></td></tr></table></figure><h1 id="references">References</h1><p><a href="https://docs.mongodb.com/manual/sharding/" rel="external nofollow noopener noreferrer" target="_blank">https://docs.mongodb.com/manual/sharding/</a></p><p><a href="https://www.ibm.com/developerworks/cn/opensource/os-mongodb-sharded-cluster/index.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.ibm.com/developerworks/cn/opensource/os-mongodb-sharded-cluster/index.html</a></p><p><a href="http://www.ityouknow.com/mongodb/2017/08/05/mongodb-cluster-setup.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.ityouknow.com/mongodb/2017/08/05/mongodb-cluster-setup.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在如今的互联网环境下，海量数据已随处可见并且还在不断增长，对于如何存储处理海量数据，比较常见的方法有两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;垂直扩展&lt;/strong&gt;：通过增加单台服务器的配置，例如使用更强悍的 CPU、更大的内存、更大容量的磁盘，此种方法虽然成本很高，但是实现比较简单，维护起来也比较方便。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;水平扩展&lt;/strong&gt;：通过使用更多配置一般的服务器来共同承担工作负载，此种方法很灵活，可以根据工作负载的大小动态增减服务器的数量，但是实现比较复杂，得有专门的人员来运维。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MongoDB 支持通过分片技术从而进行水平扩展，用以支撑海量数据集和高吞吐量的操作。如果数据集不够大，还是建议您使用 &lt;a href=&quot;https://docs.mongodb.com/manual/replication/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;MongoDB 副本集&lt;/a&gt;，因为分片需要处理更多的技术细节，所以在分片环境下其性能可能始终没有副本集性能强。本文通过介绍如何搭建 MongoDB 分片集群以及及一些相关核心概念，可以帮您快速理解 MongoDB 是如何通过分片技术来处理海量数据的。&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="https://wylu.me/categories/Web/"/>
    
      <category term="mongo" scheme="https://wylu.me/categories/Web/mongo/"/>
    
    
      <category term="MongoDB" scheme="https://wylu.me/tags/MongoDB/"/>
    
      <category term="Sharding Cluster" scheme="https://wylu.me/tags/Sharding-Cluster/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB副本集搭建</title>
    <link href="https://wylu.me/posts/fd4a1d37/"/>
    <id>https://wylu.me/posts/fd4a1d37/</id>
    <published>2020-04-04T06:46:47.000Z</published>
    <updated>2020-04-18T06:10:32.887Z</updated>
    
    <content type="html"><![CDATA[<p>对于互联网应用来说，我们要尽量保证服务的不可间断性，一旦出现故障需要尽快的恢复。MongoDB 的副本集模式主要解决了在其主从模式下故障无法自动转移的情况，自动实现高可用。三个成员副本集提供足够的冗余性，以承受大多数网络分区和其他系统故障，这些集合对于许多分布式读取操作也具有足够的容量。本文介绍如何从三个现有 mongod 实例创建三成员副本集，包括不启用访问控制的和启用访问控制的。</p><a id="more"></a><h1 id="mongodb副本集搭建">MongoDB副本集搭建</h1><p>MongoDB Replica Set</p><h1 id="三成员副本集部署模式">三成员副本集部署模式</h1><h2 id="p-s-s">P-S-S</h2><p>Primary with Two Secondary Members 是具有三个存储数据的成员的副本集部署模式，它包含：</p><ul><li>一个主节点 primary</li><li>两个副节点 secondary （每个副节点都可以被选举为主节点）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/Web/mongo/MongoDB副本集搭建/replica-set-primary-with-two-secondaries.svg" alt="P-S-S"></p><p>除 primary 成员外，P-S-S 部署始终提供数据集的两个完整副本。这些副本集提供了额外的容错能力和高可用性。 如果主服务器不可用，则副本集将 secondary 成员选为 primary 并继续正常操作。原本的 primary 在可用时会重新加入副本集。</p><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/Web/mongo/MongoDB副本集搭建/replica-set-trigger-election.svg" alt="elect"></p><h1 id="环境准备">环境准备</h1><ul><li>系统系统：CentOS7 64位</li></ul><table><thead><tr class="header"><th>Replica Set Member</th><th>Hostname</th></tr></thead><tbody><tr class="odd"><td>rs0-0</td><td>127.0.0.1:27017</td></tr><tr class="even"><td>rs0-1</td><td>127.0.0.1:27018</td></tr><tr class="odd"><td>rs0-2</td><td>127.0.0.1:27019</td></tr></tbody></table><h1 id="部署说明">部署说明</h1><p>下面将一个示例说明在单机部署一个 P-S-S 集群的流程。</p><h2 id="前提">前提</h2><p>对于测试和开发环境，您可以在本地系统或虚拟实例中运行 mongod 实例。</p><p>在部署副本集之前，必须在将成为副本集一部分的每个系统上安装 MongoDB。</p><p>每个成员都必须能够连接到其他每个成员。</p><h2 id="副本集名称">副本集名称</h2><p>此过程中的示例创建一个名为 rs0 的新副本集。</p><p>如果您的应用程序连接到多个副本集，则每个副本集应具有不同的名称。某些驱动程序通过副本集名称对副本集连接进行分组。</p><h2 id="基于命令行参数的部署">基于命令行参数的部署</h2><ol type="1"><li><p>通过执行类似于下列示例的命令，为每个成员创建必要的数据目录，它们将存储 mongod 实例的数据库文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /srv/mongodb/rs0-0/data /srv/mongodb/rs0-1/data /srv/mongodb/rs0-2/data</span><br></pre></td></tr></table></figure></li><li><p>通过下列命令，在终端窗口中启动 mongod 实例：</p><p>启动第一个成员</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup mongod --replSet rs0 --port 27017 --bind_ip 0.0.0.0 --dbpath /srv/mongodb/rs0-0/data --oplogSize 128 &amp;</span><br></pre></td></tr></table></figure><p>启动第二个成员</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup mongod --replSet rs0 --port 27018 --bind_ip 0.0.0.0 --dbpath /srv/mongodb/rs0-1/data --oplogSize 128 &amp;</span><br></pre></td></tr></table></figure><p>启动第三个成员</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup mongod --replSet rs0 --port 27019 --bind_ip 0.0.0.0 --dbpath /srv/mongodb/rs0-2/data --oplogSize 128 &amp;</span><br></pre></td></tr></table></figure><p>通过上面的启动，将使每个实例作为名为 rs0 的副本集的成员，每个副本集都在不同的端口上运行，并使用 <code>--dbpath</code> 设置指定数据目录的路径。如果您已经在使用建议的端口，请选择其他端口。</p><p>这些实例同时绑定到主机的 localhost 和 ip 地址。</p><p><code>--oplogSize</code> 设置减少了每个 mongod 实例使用的磁盘空间。这是测试和开发部署的理想选择，因为它可以防止计算机过载。有关此配置选项和其他配置选项的更多信息，请参阅 <a href="https://docs.mongodb.com/manual/reference/configuration-options/" rel="external nofollow noopener noreferrer" target="_blank">配置文件选项</a>。</p></li><li><p>通过 mongo shell 连接到您的 mongod 实例之一。您需要通过指定其端口号来指示哪个实例。为了简单明了，直接连接第一个，如以下命令所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo --port 27017</span><br></pre></td></tr></table></figure></li><li><p>在 mongo shell 中，使用 <code>rs.initiate()</code> 初始化副本集。您可以在 mongo shell 环境中创建副本集配置对象，如以下示例所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">rsconf = &#123;</span><br><span class="line">  _id: "rs0",</span><br><span class="line">  members: [</span><br><span class="line">    &#123;</span><br><span class="line">     _id: 0,</span><br><span class="line">     host: "127.0.0.1:27017"</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">     _id: 1,</span><br><span class="line">     host: "127.0.0.1:27018"</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">     _id: 2,</span><br><span class="line">     host: "127.0.0.1:27019"</span><br><span class="line">    &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据实际情况替换为系统的主机名和端口，然后将 rsconf 文件传递给 <code>rs.initiate()</code>，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.initiate( rsconf )</span><br></pre></td></tr></table></figure></li><li><p>通过以下命令来显示当前 <a href="https://docs.mongodb.com/manual/reference/replica-configuration/" rel="external nofollow noopener noreferrer" target="_blank">副本配置</a>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.conf()</span><br></pre></td></tr></table></figure><p>副本集配置对象类似于以下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"_id"</span> : <span class="string">"rs0"</span>,</span><br><span class="line">   <span class="attr">"version"</span> : <span class="number">1</span>,</span><br><span class="line">   <span class="attr">"protocolVersion"</span> : NumberLong(<span class="number">1</span>),</span><br><span class="line">   <span class="attr">"members"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">"_id"</span> : <span class="number">0</span>,</span><br><span class="line">         <span class="attr">"host"</span> : <span class="string">"&lt;hostname&gt;:27017"</span>,</span><br><span class="line">         <span class="attr">"arbiterOnly"</span> : <span class="literal">false</span>,</span><br><span class="line">         <span class="attr">"buildIndexes"</span> : <span class="literal">true</span>,</span><br><span class="line">         <span class="attr">"hidden"</span> : <span class="literal">false</span>,</span><br><span class="line">         <span class="attr">"priority"</span> : <span class="number">1</span>,</span><br><span class="line">         <span class="attr">"tags"</span> : &#123;</span><br><span class="line"></span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="attr">"slaveDelay"</span> : NumberLong(<span class="number">0</span>),</span><br><span class="line">         <span class="attr">"votes"</span> : <span class="number">1</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">"_id"</span> : <span class="number">1</span>,</span><br><span class="line">         <span class="attr">"host"</span> : <span class="string">"&lt;hostname&gt;:27018"</span>,</span><br><span class="line">         <span class="attr">"arbiterOnly"</span> : <span class="literal">false</span>,</span><br><span class="line">         <span class="attr">"buildIndexes"</span> : <span class="literal">true</span>,</span><br><span class="line">         <span class="attr">"hidden"</span> : <span class="literal">false</span>,</span><br><span class="line">         <span class="attr">"priority"</span> : <span class="number">1</span>,</span><br><span class="line">         <span class="attr">"tags"</span> : &#123;</span><br><span class="line"></span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="attr">"slaveDelay"</span> : NumberLong(<span class="number">0</span>),</span><br><span class="line">         <span class="attr">"votes"</span> : <span class="number">1</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">"_id"</span> : <span class="number">2</span>,</span><br><span class="line">         <span class="attr">"host"</span> : <span class="string">"&lt;hostname&gt;:27019"</span>,</span><br><span class="line">         <span class="attr">"arbiterOnly"</span> : <span class="literal">false</span>,</span><br><span class="line">         <span class="attr">"buildIndexes"</span> : <span class="literal">true</span>,</span><br><span class="line">         <span class="attr">"hidden"</span> : <span class="literal">false</span>,</span><br><span class="line">         <span class="attr">"priority"</span> : <span class="number">1</span>,</span><br><span class="line">         <span class="attr">"tags"</span> : &#123;</span><br><span class="line"></span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="attr">"slaveDelay"</span> : NumberLong(<span class="number">0</span>),</span><br><span class="line">         <span class="attr">"votes"</span> : <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">   ],</span><br><span class="line">   <span class="attr">"settings"</span> : &#123;</span><br><span class="line">      <span class="attr">"chainingAllowed"</span> : <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"heartbeatIntervalMillis"</span> : <span class="number">2000</span>,</span><br><span class="line">      <span class="attr">"heartbeatTimeoutSecs"</span> : <span class="number">10</span>,</span><br><span class="line">      <span class="attr">"electionTimeoutMillis"</span> : <span class="number">10000</span>,</span><br><span class="line">      <span class="attr">"catchUpTimeoutMillis"</span> : <span class="number">-1</span>,</span><br><span class="line">      <span class="attr">"getLastErrorModes"</span> : &#123;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"getLastErrorDefaults"</span> : &#123;</span><br><span class="line">         <span class="attr">"w"</span> : <span class="number">1</span>,</span><br><span class="line">         <span class="attr">"wtimeout"</span> : <span class="number">0</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"replicaSetId"</span> : ObjectId(<span class="string">"598f630adc9053c6ee6d5f38"</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>随时使用 <code>rs.status()</code> 检查副本集的状态。</p><p>从运行该方法的成员的角度返回副本集状态。此方法为 <a href="https://docs.mongodb.com/manual/reference/command/replSetGetStatus/#dbcmd.replSetGetStatus" rel="external nofollow noopener noreferrer" target="_blank">replSetGetStatus</a> 命令提供了包装。</p><p>此输出使用从副本集其他成员发送的心跳数据包派生的数据反映副本集的当前状态。</p></li></ol><h2 id="基于配置文件的部署">基于配置文件的部署</h2><p><a href="https://docs.mongodb.com/manual/reference/configuration-options/" rel="external nofollow noopener noreferrer" target="_blank">https://docs.mongodb.com/manual/reference/configuration-options/</a></p><ol type="1"><li><p>创建日志文件目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /srv/mongodb/rs0-0/log /srv/mongodb/rs0-1/log /srv/mongodb/rs0-2/log</span><br></pre></td></tr></table></figure></li><li><p>创建配置文件目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /srv/mongodb/conf</span><br></pre></td></tr></table></figure></li><li><p>创建每个成员的配置文件</p><p>第一个成员的配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /srv/mongodb/conf/rs0-0.conf</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemLog:</span></span><br><span class="line"><span class="attr">   destination:</span> <span class="string">file</span></span><br><span class="line"><span class="attr">   path:</span> <span class="string">/srv/mongodb/rs0-0/log/mongod.log</span></span><br><span class="line"><span class="attr">   logAppend:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line"><span class="attr">   dbPath:</span> <span class="string">/srv/mongodb/rs0-0/data</span></span><br><span class="line"><span class="attr">   journal:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">processManagement:</span></span><br><span class="line"><span class="attr">   fork:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">   pidFilePath:</span> <span class="string">/srv/mongodb/rs0-0/mongod.pid</span></span><br><span class="line"><span class="attr">replication:</span></span><br><span class="line"><span class="attr">   replSetName:</span> <span class="string">rs0</span></span><br><span class="line"><span class="attr">   oplogSizeMB:</span> <span class="number">128</span></span><br><span class="line"><span class="attr">net:</span></span><br><span class="line"><span class="attr">   bindIp:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">   port:</span> <span class="number">27017</span></span><br><span class="line"><span class="comment"># security:</span></span><br><span class="line"><span class="comment">#     keyFile: /srv/mongodb/mongodb.key</span></span><br><span class="line"><span class="comment">#     authorization: disabled</span></span><br></pre></td></tr></table></figure><p>第二个成员的配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /srv/mongodb/conf/rs0-1.conf</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemLog:</span></span><br><span class="line"><span class="attr">   destination:</span> <span class="string">file</span></span><br><span class="line"><span class="attr">   path:</span> <span class="string">/srv/mongodb/rs0-1/log/mongod.log</span></span><br><span class="line"><span class="attr">   logAppend:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line"><span class="attr">   dbPath:</span> <span class="string">/srv/mongodb/rs0-1/data</span></span><br><span class="line"><span class="attr">   journal:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">processManagement:</span></span><br><span class="line"><span class="attr">   fork:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">   pidFilePath:</span> <span class="string">/srv/mongodb/rs0-1/mongod.pid</span></span><br><span class="line"><span class="attr">replication:</span></span><br><span class="line"><span class="attr">   replSetName:</span> <span class="string">rs0</span></span><br><span class="line"><span class="attr">   oplogSizeMB:</span> <span class="number">128</span></span><br><span class="line"><span class="attr">net:</span></span><br><span class="line"><span class="attr">   bindIp:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">   port:</span> <span class="number">27018</span></span><br><span class="line"><span class="comment"># security:</span></span><br><span class="line"><span class="comment">#     keyFile: /srv/mongodb/mongodb.key</span></span><br><span class="line"><span class="comment">#     authorization: disabled</span></span><br></pre></td></tr></table></figure><p>第三个成员的配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /srv/mongodb/conf/rs0-2.conf</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemLog:</span></span><br><span class="line"><span class="attr">   destination:</span> <span class="string">file</span></span><br><span class="line"><span class="attr">   path:</span> <span class="string">/srv/mongodb/rs0-2/log/mongod.log</span></span><br><span class="line"><span class="attr">   logAppend:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line"><span class="attr">   dbPath:</span> <span class="string">/srv/mongodb/rs0-2/data</span></span><br><span class="line"><span class="attr">   journal:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">processManagement:</span></span><br><span class="line"><span class="attr">   fork:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">   pidFilePath:</span> <span class="string">/srv/mongodb/rs0-2/mongod.pid</span></span><br><span class="line"><span class="attr">replication:</span></span><br><span class="line"><span class="attr">   replSetName:</span> <span class="string">rs0</span></span><br><span class="line"><span class="attr">   oplogSizeMB:</span> <span class="number">128</span></span><br><span class="line"><span class="attr">net:</span></span><br><span class="line"><span class="attr">   bindIp:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">   port:</span> <span class="number">27019</span></span><br><span class="line"><span class="comment"># security:</span></span><br><span class="line"><span class="comment">#     keyFile: /srv/mongodb/mongodb.key</span></span><br><span class="line"><span class="comment">#     authorization: disabled</span></span><br></pre></td></tr></table></figure></li><li><p>启动副本集成员</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongod -f /srv/mongodb/conf/rs0-0.conf</span><br><span class="line">mongod -f /srv/mongodb/conf/rs0-1.conf</span><br><span class="line">mongod -f /srv/mongodb/conf/rs0-2.conf</span><br></pre></td></tr></table></figure></li><li><p>查看 mongod 进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep mongod</span><br></pre></td></tr></table></figure><p>剩余初始副本集的步骤与上面命令行方式部署的操作相同。</p></li></ol><h1 id="启用身份验证">启用身份验证</h1><p>默认情况下，MongoDB 不会进行身份验证，也没有账号，只要能连接上服务就可以对数据库进行各种操作，出于安全角度考虑，我们应当为其添加认证访问。</p><p>通过 <code>--auth</code> 选项可以开启身份认证，此外，副本集设置身份验证与单机不同，需要增加一个 <code>keyFile</code> 以便副本集成员相互认证。</p><h2 id="创建一个用户">创建一个用户</h2><p>首先创建一个用于身份验证的用户，首先使用 mongo shell 连接到集群的 primary 节点，如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo --port 27017</span><br></pre></td></tr></table></figure><p>切换到 admin 数据库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br></pre></td></tr></table></figure><p>在 admin 下创建用户 root：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.createUser(&#123;</span><br><span class="line">  user: "root",</span><br><span class="line">  pwd: "toor",</span><br><span class="line">  roles: [</span><br><span class="line">    &#123;role: "userAdminAnyDatabase", db:"admin"&#125;,</span><br><span class="line">    &#123;role: "readWriteAnyDatabase", db: "admin"&#125;,</span><br><span class="line">    &#123;role:"clusterAdmin", db:"admin"&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="创建-keyfile">创建 KeyFile</h2><p>这个文件需要满足下面几点要求：</p><ul><li>文本长度需要在 6 和 1024 之间</li><li>认证时候不考虑文件中空白字符</li><li>连接到副本集的成员和 mongos 进程的 keyfile 文件内容必须一样</li><li>必须是 base64 编码，但是不能有等号</li><li>文件权限必须是 X00，也就是说，不能分配任何权限给 group 成员和 other 成员</li></ul><p>我们可以在 Linux 上直接使用 openssl 创建一个这样的文件，然后上传至其他副本集成员服务器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl rand -base64 512 &gt; mongodb.key</span><br><span class="line">chmod 400 mongodb.key</span><br></pre></td></tr></table></figure><h2 id="修改配置文件">修改配置文件</h2><p>如果你是通过配置文件形式部署的副本集，那么需要修改对应成员的配置：</p><p>（假设 Key File 文件在 <code>/srv/mongodb</code> 目录下）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">keyFile:</span> <span class="string">/srv/mongodb/mongodb.key</span></span><br><span class="line"><span class="attr">authorization:</span> <span class="string">enabled</span></span><br></pre></td></tr></table></figure><p>如果你是直接通过命令行参数形式启动的副本集，那么需要使用 <code>--auth</code> 选项并指定 <code>--keyFile</code>，如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup mongod --replSet rs0 --port 27017 --bind_ip 0.0.0.0 --dbpath /srv/mongodb/rs0-0 --auth --keyFile=/srv/mongodb/mongodb.key --oplogSize 128 &amp;</span><br></pre></td></tr></table></figure><h2 id="测试密码认证">测试密码认证</h2><p>关闭三个 mongod 服务实例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">killall mongod</span><br></pre></td></tr></table></figure><p>添加 <code>--auth</code> 和 <code>--keyFile</code> 选项重新启动 mongod：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动第一个成员</span></span><br><span class="line">nohup mongod --replSet rs0 --port 27017 --bind_ip 0.0.0.0 --dbpath /srv/mongodb/rs0-0  --auth --keyFile=/srv/mongodb/mongodb.key --oplogSize 128 &amp;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动第二个成员</span></span><br><span class="line">nohup mongod --replSet rs0 --port 27018 --bind_ip 0.0.0.0 --dbpath /srv/mongodb/rs0-1  --auth --keyFile=/srv/mongodb/mongodb.key --oplogSize 128 &amp;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动第三个成员</span></span><br><span class="line">nohup mongod --replSet rs0 --port 27019 --bind_ip 0.0.0.0 --dbpath /srv/mongodb/rs0-2  --auth --keyFile=/srv/mongodb/mongodb.key --oplogSize 128 &amp;</span><br></pre></td></tr></table></figure><p>重启 mongodb ，第一次登陆时，直接查询会报权限错误，使用 <code>db.auth()</code> 认证后就可以成功读取数据库了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">rs0:PRIMARY&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line">rs0:PRIMARY&gt; db.auth('root', 'toor')</span><br><span class="line">1</span><br><span class="line">rs0:PRIMARY&gt; show dbs</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line">local   0.000GB</span><br><span class="line">test    0.000GB</span><br><span class="line">rs0:PRIMARY&gt;</span><br></pre></td></tr></table></figure><h1 id="问题">问题</h1><h2 id="初始化失败">初始化失败</h2><p>在初始化一个 MongoDB 副本集的过程中，出现了初始化失败，报 "No host described in new configuration 1 for replica set mongotest maps to this node"。具体报错信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> rsconf = &#123;</span></span><br><span class="line">...   _id: "rs0",</span><br><span class="line">...   members: [</span><br><span class="line">...     &#123;</span><br><span class="line">...      _id: 0,</span><br><span class="line">...      host: "0.0.0.0:27017"</span><br><span class="line">...     &#125;,</span><br><span class="line">...     &#123;</span><br><span class="line">...      _id: 1,</span><br><span class="line">...      host: "0.0.0.0:27018"</span><br><span class="line">...     &#125;,</span><br><span class="line">...     &#123;</span><br><span class="line">...      _id: 2,</span><br><span class="line">...      host: "0.0.0.0:27019"</span><br><span class="line">...     &#125;</span><br><span class="line">...    ]</span><br><span class="line">... &#125;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> rs.initiate( rsconf )</span></span><br><span class="line">&#123;</span><br><span class="line">        "operationTime" : Timestamp(0, 0),</span><br><span class="line">        "ok" : 0,</span><br><span class="line">        "errmsg" : "No host described in new configuration 1 for replica set rs0 maps to this node",</span><br><span class="line">        "code" : 93,</span><br><span class="line">        "codeName" : "InvalidReplicaSetConfig",</span><br><span class="line">        "$clusterTime" : &#123;</span><br><span class="line">                "clusterTime" : Timestamp(0, 0),</span><br><span class="line">                "signature" : &#123;</span><br><span class="line">                        "hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),</span><br><span class="line">                        "keyId" : NumberLong(0)</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决方法，将 rsconf 中的 IP 替换为真正的 IP，如：127.0.0.1。</p><h2 id="开启认证后-secondary-读取失败">开启认证后 SECONDARY 读取失败</h2><p>"errmsg" : "not master and slaveOk=false" 的解决办法参考：</p><p><a href="https://stackoverflow.com/questions/8990158/mongodb-replicates-and-error-err-not-master-and-slaveok-false-code" rel="external nofollow noopener noreferrer" target="_blank">https://stackoverflow.com/questions/8990158/mongodb-replicates-and-error-err-not-master-and-slaveok-false-code</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">rs0:SECONDARY&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line">rs0:SECONDARY&gt; db.auth(&apos;root&apos;, &apos;toor&apos;)</span><br><span class="line">1</span><br><span class="line">rs0:SECONDARY&gt; show dbs</span><br><span class="line">2020-03-30T12:03:51.218+0800 E  QUERY    [js] uncaught exception: Error: listDatabases failed:&#123;</span><br><span class="line">        &quot;operationTime&quot; : Timestamp(1585541025, 1),</span><br><span class="line">        &quot;ok&quot; : 0,</span><br><span class="line">        &quot;errmsg&quot; : &quot;not master and slaveOk=false&quot;,</span><br><span class="line">        &quot;code&quot; : 13435,</span><br><span class="line">        &quot;codeName&quot; : &quot;NotMasterNoSlaveOk&quot;,</span><br><span class="line">        &quot;$clusterTime&quot; : &#123;</span><br><span class="line">                &quot;clusterTime&quot; : Timestamp(1585541025, 1),</span><br><span class="line">                &quot;signature&quot; : &#123;</span><br><span class="line">                        &quot;hash&quot; : BinData(0,&quot;DHLkVZz2fe4aeAjIxEmkHu9FhBE=&quot;),</span><br><span class="line">                        &quot;keyId&quot; : NumberLong(&quot;6809843876723949571&quot;)</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125; :</span><br><span class="line">_getErrorWithCode@src/mongo/shell/utils.js:25:13</span><br><span class="line">Mongo.prototype.getDBs/&lt;@src/mongo/shell/mongo.js:135:19</span><br><span class="line">Mongo.prototype.getDBs@src/mongo/shell/mongo.js:87:12</span><br><span class="line">shellHelper.show@src/mongo/shell/utils.js:906:13</span><br><span class="line">shellHelper@src/mongo/shell/utils.js:790:15</span><br><span class="line">@(shellhelp2):1:1</span><br><span class="line">rs0:SECONDARY&gt; rs.slaveOk()</span><br><span class="line">rs0:SECONDARY&gt; show dbs</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line">local   0.000GB</span><br><span class="line">rs0:SECONDARY&gt;</span><br></pre></td></tr></table></figure><h1 id="references">References</h1><p><a href="https://docs.mongodb.com/manual/reference/configuration-options/" rel="external nofollow noopener noreferrer" target="_blank">https://docs.mongodb.com/manual/reference/configuration-options/</a></p><p><a href="https://www.ibm.com/developerworks/cn/opensource/os-mongodb-replication/index.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.ibm.com/developerworks/cn/opensource/os-mongodb-replication/index.html</a></p><p><a href="https://docs.mongodb.com/manual/core/retryable-writes/#retryable-writes" rel="external nofollow noopener noreferrer" target="_blank">https://docs.mongodb.com/manual/core/retryable-writes/#retryable-writes</a></p><p><a href="https://docs.mongodb.com/manual/reference/configuration-file-settings-command-line-options-mapping/#conf-file-command-line-mapping" rel="external nofollow noopener noreferrer" target="_blank">Configuration File Settings and Command-Line Options Mapping</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于互联网应用来说，我们要尽量保证服务的不可间断性，一旦出现故障需要尽快的恢复。MongoDB 的副本集模式主要解决了在其主从模式下故障无法自动转移的情况，自动实现高可用。三个成员副本集提供足够的冗余性，以承受大多数网络分区和其他系统故障，这些集合对于许多分布式读取操作也具有足够的容量。本文介绍如何从三个现有 mongod 实例创建三成员副本集，包括不启用访问控制的和启用访问控制的。&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="https://wylu.me/categories/Web/"/>
    
      <category term="mongo" scheme="https://wylu.me/categories/Web/mongo/"/>
    
    
      <category term="MongoDB" scheme="https://wylu.me/tags/MongoDB/"/>
    
      <category term="Replica Set" scheme="https://wylu.me/tags/Replica-Set/"/>
    
  </entry>
  
  <entry>
    <title>python 自定义比较函数</title>
    <link href="https://wylu.me/posts/8100d913/"/>
    <id>https://wylu.me/posts/8100d913/</id>
    <published>2020-03-29T00:29:11.000Z</published>
    <updated>2020-04-04T09:09:13.981Z</updated>
    
    <content type="html"><![CDATA[<p>Python 列表具有内置的 list.sort() 方法，该方法可就地修改列表。还有一个 sorted() 内置函数，可从迭代器构建新的排序列表。</p><p>因为 Python3 中 sorted() 和 list.sort() 放弃了类似 C++ 中的 cmp 写法，本文将展示官方推荐替代解决方案，以实现自定义的两个参数的比较函数，并详细分析了 cmp_to_key 函数实现原理。</p><a id="more"></a><h1 id="排序基础">排序基础</h1><p>一个简单的升序排序非常容易：只需调用 sorted() 函数即可。它返回一个新的排序列表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; sorted([5, 2, 3, 1, 4])</span></span><br><span class="line">[1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure><p>你也可以使用 list.sort() 方法。它就地修改列表（并返回 None 以避免混淆）。通常，它不如 sorted() 方便（如果你不需要原始列表，则效率会略高一些）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a = [5, 2, 3, 1, 4]</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a.sort()</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a</span></span><br><span class="line">[1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure><p>另一个区别是 list.sort() 方法仅为列表定义。而 sorted() 函数接受任何可迭代的对象。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; sorted(&#123;1: <span class="string">'D'</span>, 2: <span class="string">'B'</span>, 3: <span class="string">'B'</span>, 4: <span class="string">'E'</span>, 5: <span class="string">'A'</span>&#125;)</span></span><br><span class="line">[1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure><h1 id="key-functions">Key Functions</h1><p>list.sort() 和 sorted() 都有一个 key 参数，用于指定在进行比较之前在每个列表元素上要调用的函数。例如，这是不区分大小写的字符串比较：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; sorted(<span class="string">"This is a test string from Andrew"</span>.split(), key=str.lower)</span></span><br><span class="line">['a', 'Andrew', 'from', 'is', 'string', 'test', 'This']</span><br></pre></td></tr></table></figure><p><strong>key 参数的值应该是一个采用单个参数并返回用于排序目的的键的函数。</strong> 这种技术之所以快捷，是因为对于每个输入记录，key function 都只被调用一次。</p><p>一种常见的模式是使用某些对象的索引作为键来对复杂的对象进行排序。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; student_tuples = [</span></span><br><span class="line">...     ('john', 'A', 15),</span><br><span class="line">...     ('jane', 'B', 12),</span><br><span class="line">...     ('dave', 'B', 10),</span><br><span class="line">... ]</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; sorted(student_tuples, key=lambda student: student[2])   <span class="comment"># sort by age</span></span></span><br><span class="line">[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]</span><br></pre></td></tr></table></figure><p>具有命名属性的对象也可以使用相同的技术。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; class Student:</span></span><br><span class="line">...     def __init__(self, name, grade, age):</span><br><span class="line">...         self.name = name</span><br><span class="line">...         self.grade = grade</span><br><span class="line">...         self.age = age</span><br><span class="line">...     def __repr__(self):</span><br><span class="line">...         return repr((self.name, self.grade, self.age))</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; student_objects = [</span></span><br><span class="line">...     Student('john', 'A', 15),</span><br><span class="line">...     Student('jane', 'B', 12),</span><br><span class="line">...     Student('dave', 'B', 10),</span><br><span class="line">... ]</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; sorted(student_objects, key=lambda student: student.age)   <span class="comment"># sort by age</span></span></span><br><span class="line">[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]</span><br></pre></td></tr></table></figure><h1 id="为什么取消-cmp-参数">为什么取消 cmp 参数</h1><p>所有 Py2.x 版本都支持 cmp 参数来处理用户指定的比较功能。</p><p>在 Py3.0 中，完全删除了 cmp 参数（这是简化和统一语言的较大工作的一部分，从而消除了丰富的比较与 <code>__cmp__()</code> 魔术方法之间的冲突）。</p><h1 id="在-py2.x-中使用-cmp-参数">在 Py2.x 中使用 cmp 参数</h1><p>Py2.x 中，sort 允许一个可选函数，可以进行比较。该函数应该接受两个参数进行比较，如果是小于等于的返回负值，如果相等则返回零，如果是大于等于的返回正值。例如，我们可以做：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; def numeric_compare(x, y):</span></span><br><span class="line">...     return x - y</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; sorted([5, 2, 4, 1, 3], cmp=numeric_compare) </span></span><br><span class="line">[1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure><p>或者，你可以通过以下方式反转比较顺序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; def reverse_numeric(x, y):</span></span><br><span class="line">...     return y - x</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; sorted([5, 2, 4, 1, 3], cmp=reverse_numeric) </span></span><br><span class="line">[5, 4, 3, 2, 1]</span><br></pre></td></tr></table></figure><h1 id="使用-cmp_to_key-函数实现自定义比较函数">使用 <code>cmp_to_key</code> 函数实现自定义比较函数</h1><p>当将代码从 Python 2.x 移植到 3.x 时，如果你有使用自定义比较功能的函数，需要将其转换为 Key function，我们可以使用 functools 提供的 <code>cmp_to_key()</code> 来实现：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">def cmp_to_key(mycmp):</span><br><span class="line">    'Convert a cmp= function into a key= function'</span><br><span class="line">    class K:</span><br><span class="line">        def __init__(self, obj, *args):</span><br><span class="line">            self.obj = obj</span><br><span class="line">        def __lt__(self, other):</span><br><span class="line">            return mycmp(self.obj, other.obj) &lt; 0</span><br><span class="line">        def __gt__(self, other):</span><br><span class="line">            return mycmp(self.obj, other.obj) &gt; 0</span><br><span class="line">        def __eq__(self, other):</span><br><span class="line">            return mycmp(self.obj, other.obj) == 0</span><br><span class="line">        def __le__(self, other):</span><br><span class="line">            return mycmp(self.obj, other.obj) &lt;= 0</span><br><span class="line">        def __ge__(self, other):</span><br><span class="line">            return mycmp(self.obj, other.obj) &gt;= 0</span><br><span class="line">        def __ne__(self, other):</span><br><span class="line">            return mycmp(self.obj, other.obj) != 0</span><br><span class="line">    return K</span><br></pre></td></tr></table></figure><p>要转换为 Key Function，只需包装旧的比较函数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; from functools import cmp_to_key</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; sorted([5, 2, 4, 1, 3], key=cmp_to_key(reverse_numeric))</span></span><br><span class="line">[5, 4, 3, 2, 1]</span><br></pre></td></tr></table></figure><p>在 Python 3.2 中，<code>functools.cmp_to_key()</code> 函数已添加到标准库的 functools 模块中。</p><h1 id="理解-cmp_to_key-函数">理解 cmp_to_key 函数</h1><p>如果你明白了 Key Function 的作用，那么再看 cmp_to_key 的代码就非常容易理解了。</p><p>cmp_to_key 接收一个比较函数作为内部类实例比较时执行的函数，并返回这个类。根据 <code>key=com_to_key(mycmp)</code> 可以知道最终作为 Key Function 的是一个类，这个类就是 cmp_to_key 返回的类 <code>K</code>。因为 Key Function 是作用在可迭代对象的每个元素上的，那么这个类又是怎么作用到每个元素的呢。</p><p>这里，你可能需要明确一点，Key Function 允许接受的来源不一定是函数，实际上它可以接受一切可调用对象，而类也是一个可调用对象。</p><p>据 "流畅的python" 中关于可调用对象的描述，类是 Python 数据模型文档列出的 7 种可调用对象中的一种：</p><blockquote><p>调用类时会运行类的 <code>__new__</code> 方法创建一个实例，然后运行 <code>__init__</code> 方法，初始化实例，最后把实例返回给调用方。因为 Python 没有 new 运算符，所以调用类相当于调用函数。（通常，调用类会创建 那个类的实例，不过覆盖 <code>__new__</code> 方法的话，也可能出现其他行为。）</p></blockquote><p>到此，我们可以知道 cmp_to_key 函数返回的类作用到每个元素的结果了，这个类的作用结果就是：创建一个 <code>K</code> 类的实例，这个实例接收当前作用元素进行初始化，返回初始化后的实例。</p><p>在 K 类的实例间进行比较时，就会调用相应的特殊方法，如 <code>&lt;</code> 将调用 <code>__lt__</code> 方法，而 <code>K</code> 类实现的 <code>__lt__</code> 将使用我们自己定义的函数进行比较。</p><h1 id="references">References</h1><p><a href="https://docs.python.org/3/howto/sorting.html#sortinghowto" rel="external nofollow noopener noreferrer" target="_blank">https://docs.python.org/3/howto/sorting.html#sortinghowto</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python 列表具有内置的 list.sort() 方法，该方法可就地修改列表。还有一个 sorted() 内置函数，可从迭代器构建新的排序列表。&lt;/p&gt;
&lt;p&gt;因为 Python3 中 sorted() 和 list.sort() 放弃了类似 C++ 中的 cmp 写法，本文将展示官方推荐替代解决方案，以实现自定义的两个参数的比较函数，并详细分析了 cmp_to_key 函数实现原理。&lt;/p&gt;
    
    </summary>
    
      <category term="Language" scheme="https://wylu.me/categories/Language/"/>
    
      <category term="python" scheme="https://wylu.me/categories/Language/python/"/>
    
    
      <category term="python" scheme="https://wylu.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>远程连接MongoDB</title>
    <link href="https://wylu.me/posts/7043b2c8/"/>
    <id>https://wylu.me/posts/7043b2c8/</id>
    <published>2020-03-25T14:10:52.000Z</published>
    <updated>2020-04-18T06:10:32.883Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/Web/mongo/远程连接MongoDB/robo3t.png" alt="robo3t"></p><a id="more"></a><h1 id="配置远程连接-mongodb">配置远程连接 MongoDB</h1><h2 id="ip-绑定">IP 绑定</h2><p>默认情况下，MongoDB 启动时将 <code>bindIp</code> 设置为 <code>127.0.0.1</code>，绑定到 localhost 网络接口。这意味着 mongod 只能接受来自同一计算机上运行的客户端的连接。远程客户端将无法连接到 mongod，并且 mongod将无法初始化副本集，除非将此值设置为有效的网络接口。</p><p>可以一下两种方式配置绑定的 IP：</p><ul><li>在带有 <code>bindIp</code> 的 MongoDB 配置文件中（默认 /etc/mongod.conf）</li><li>或者通过命令行参数 <code>--bind_ip</code></li></ul><blockquote><p>WARNING</p><p>Before binding to a non-localhost (e.g. publicly accessible) IP address, ensure you have secured your cluster from unauthorized access. For a complete list of security recommendations, see <a href="https://docs.mongodb.com/manual/administration/security-checklist/" rel="external nofollow noopener noreferrer" target="_blank">Security Checklist</a>. At minimum, consider <a href="https://docs.mongodb.com/manual/administration/security-checklist/#checklist-auth" rel="external nofollow noopener noreferrer" target="_blank">enabling authentication</a> and <a href="https://docs.mongodb.com/manual/core/security-hardening/" rel="external nofollow noopener noreferrer" target="_blank">hardening network infrastructure</a>.</p></blockquote><h2 id="端口绑定">端口绑定</h2><p>端口默认绑定到 27017，可以根据需要进行配置，配置方法与配置 IP 绑定类似。</p><ul><li>在带有 <code>port</code> 的 MongoDB 配置文件中（默认 /etc/mongod.conf）</li><li>或者通过命令行参数 <code>--port</code></li></ul><h2 id="不启用认证">不启用认证</h2><p>在不启用认证的情况下，要想远程连接到 MongoDB，需要将 IP 绑定到 <code>0.0.0.0</code>，以修改配置文件为例，编辑 /etc/mongod.conf 文件：</p><p>将 <code>bindIp: 127.0.0.1</code> 替换为 <code>bindIp: 0.0.0.0</code></p><p>修改完成后，重启 mongod：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mongod</span><br></pre></td></tr></table></figure><p><strong>如果你的防火墙对端口有限制，请关闭防火墙或开放相应的端口。</strong></p><h2 id="启用认证">启用认证</h2><p>不需要认证的远程连接方式具有很大的安全风险，所以一般远程连接都采用认证的方式。</p><p>启用访问控制时，请确保你在管理数据库中拥有一个具有 userAdmin 或 userAdminAnyDatabase 角色的用户。该用户可以管理用户和角色，例如：创建用户，向用户授予或撤消角色，以及创建或修改自定义角色。</p><p><strong>启用认证的简要步骤：</strong></p><ul><li>不启用访问控制的情况下运行 MongoDB</li><li>使用 mongo shell 连接到运行的 mongod 实例</li><li>创建一个具有 userAdmin 或 userAdminAnyDatabase 角色的用户</li><li>启用访问控制</li><li>重启 MongoDB</li></ul><p>以上步骤假定你的管理数据库中没有一个具有 userAdmin 或 userAdminAnyDatabase 角色的用户。</p><h3 id="创建一个认证用户">创建一个认证用户</h3><p>下面将创建一个具有 userAdmin 或 userAdminAnyDatabase 角色的用户 myUserAdmin。</p><h4 id="不启用访问控制的情况下启动-mongodb">(1) 不启用访问控制的情况下启动 MongoDB</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --port 27017 --dbpath /var/lib/mongodb</span><br></pre></td></tr></table></figure><p><strong>你可以使用 systemd 的方式启动管理 mongod：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mongod</span><br></pre></td></tr></table></figure><h4 id="连接到-mongodb-运行的实例">(2) 连接到 MongoDB 运行的实例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo --port 27017</span><br></pre></td></tr></table></figure><h4 id="创建管理员用户-root">(3) 创建管理员用户 root</h4><p>在 mongo shell 中，在 admin 数据库中添加一个具有 userAdminAnyDatabase 角色的用户。包括此用户所需的其他角色。例如，以下代码在 admin 数据库中使用 userAdminAnyDatabase 角色和 readWriteAnyDatabase 角色创建用户 myUserAdmin。</p><blockquote><p>TIP</p><p>Starting in version 4.2 of the <a href="https://docs.mongodb.com/manual/reference/program/mongo/#bin.mongo" rel="external nofollow noopener noreferrer" target="_blank"><code>mongo</code></a> shell, you can use the <a href="https://docs.mongodb.com/manual/reference/method/passwordPrompt/#passwordPrompt" rel="external nofollow noopener noreferrer" target="_blank"><code>passwordPrompt()</code></a> method in conjunction with various user authentication/management methods/commands to prompt for the password instead of specifying the password directly in the method/command call. However, you can still specify the password directly as you would with earlier versions of the <a href="https://docs.mongodb.com/manual/reference/program/mongo/#bin.mongo" rel="external nofollow noopener noreferrer" target="_blank"><code>mongo</code></a> shell.</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.createUser(</span><br><span class="line">  &#123;</span><br><span class="line">    user: "myUserAdmin",</span><br><span class="line">    pwd: passwordPrompt(), // or cleartext password</span><br><span class="line">    roles: [ &#123; role: "userAdminAnyDatabase", db: "admin" &#125;, "readWriteAnyDatabase" ]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>NOTE</p><p>The database where you create the user (in this example, <code>admin</code>) is the user’s <a href="https://docs.mongodb.com/manual/core/security-users/#user-authentication-database" rel="external nofollow noopener noreferrer" target="_blank">authentication database</a>. Although the user would authenticate to this database, the user can have roles in other databases; i.e. the user’s authentication database does not limit the user’s privileges.</p></blockquote><h4 id="启用访问控制重启-mongodb">(4) 启用访问控制重启 MongoDB</h4><ul><li><p>关闭 mongod 实例。例如，在 mongo shell 中，执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.adminCommand( &#123; shutdown: 1 &#125; )</span><br></pre></td></tr></table></figure></li><li><p>退出 mongo shell</p></li><li><p>在终端上，使用 <code>--auth</code> 命令行选项重新启动 mongod 实例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --auth --port 27017 --dbpath /var/lib/mongodb</span><br></pre></td></tr></table></figure><p>现在，连接到该实例的客户端必须将自己认证为 MongoDB 用户。客户只能执行由其分配的角色确定的操作。</p></li></ul><p><strong>如果你是通过 systemd 的方式利用配置文件启动的：</strong></p><ul><li><p>创建完认证用户后，退出 mongo shell</p></li><li><p>编辑配置文件 /etc/mongod.conf</p><p>在 security 下添加 authorization，删除 security 前面的注释符号 <code>#</code>，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">security:</span><br><span class="line">  authorization: enabled</span><br></pre></td></tr></table></figure></li><li><p>重启 mongod</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mongod</span><br></pre></td></tr></table></figure></li></ul><h4 id="以用户管理员身份连接并进行身份验证">(5) 以用户管理员身份连接并进行身份验证</h4><p>使用 mongo shell，你可以：</p><ul><li>通过连接时传递用户凭据以验证身份</li><li>或首先连接而不进行身份验证，然后通过 <code>db.auth()</code> 方法进行身份验证</li></ul><p><strong>连接时认证：</strong></p><p>使用 <a href="https://docs.mongodb.com/manual/reference/program/mongo/#cmdoption-mongo-username" rel="external nofollow noopener noreferrer" target="_blank"><code>-u</code></a>, <a href="https://docs.mongodb.com/manual/reference/program/mongo/#cmdoption-mongo-password" rel="external nofollow noopener noreferrer" target="_blank"><code>-p</code></a>, 和 <a href="https://docs.mongodb.com/manual/reference/program/mongo/#cmdoption-mongo-authenticationdatabase" rel="external nofollow noopener noreferrer" target="_blank"><code>--authenticationDatabase</code></a> 命令行选项启动 mongo shell：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo --port 27017  --authenticationDatabase "admin" -u "myUserAdmin" -p</span><br></pre></td></tr></table></figure><p>出现提示时输入密码。</p><p><strong>连接后认证：</strong></p><p>将 mongo shell 连接到 mongod：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo --port 27017</span><br></pre></td></tr></table></figure><p>在 mongo shell 中，切换到身份验证数据库（在本例中为 admin），然后使用 <a href="https://docs.mongodb.com/manual/reference/method/db.auth/#db.auth" rel="external nofollow noopener noreferrer" target="_blank"><code>db.auth(&lt;username&gt;, &lt;pwd&gt;)</code></a>方法进行身份验证：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.auth("myUserAdmin", passwordPrompt()) // or cleartext password</span><br></pre></td></tr></table></figure><h4 id="根据部署需要创建其他用户">(6) 根据部署需要创建其他用户</h4><p>通过身份验证为用户管理员后，可以使用 <a href="https://docs.mongodb.com/manual/reference/method/db.createUser/#db.createUser" rel="external nofollow noopener noreferrer" target="_blank"><code>db.createUser()</code></a> 创建其他用户。你可以将任何 <a href="https://docs.mongodb.com/manual/reference/built-in-roles/" rel="external nofollow noopener noreferrer" target="_blank">built-in roles</a> 或 <a href="https://docs.mongodb.com/manual/core/security-user-defined-roles/" rel="external nofollow noopener noreferrer" target="_blank">user-defined roles</a> 分配给用户。</p><p>以下操作将用户 myTester 添加到 test 数据库，该用户在 test 数据库中具有 <a href="https://docs.mongodb.com/manual/reference/built-in-roles/#readWrite" rel="external nofollow noopener noreferrer" target="_blank"><code>readWrite</code></a> 角色，在 reporting 数据库中具有 <a href="https://docs.mongodb.com/manual/reference/built-in-roles/#read" rel="external nofollow noopener noreferrer" target="_blank"><code>read</code></a> 角色。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">use test</span><br><span class="line">db.createUser(</span><br><span class="line">  &#123;</span><br><span class="line">    user: "myTester",</span><br><span class="line">    pwd:  passwordPrompt(),   // or cleartext password</span><br><span class="line">    roles: [ &#123; role: "readWrite", db: "test" &#125;,</span><br><span class="line">             &#123; role: "read", db: "reporting" &#125; ]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>创建其他用户后，断开 mongo shell 的连接。</p><h4 id="连接到实例并通过-mytester-进行身份验证">(7) 连接到实例并通过 myTester 进行身份验证</h4><p>以 myUserAdmin 断开 mongo shell 的连接后，以 myTester 的身份重新连接。你可以：</p><p>连接时验证身份：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo --port 27017 -u "myTester" --authenticationDatabase "test" -p</span><br></pre></td></tr></table></figure><p>或者连接后验证身份：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo --port 27017</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use test</span><br><span class="line">db.auth("myTester", passwordPrompt())  // or cleartext password</span><br></pre></td></tr></table></figure><p>出现提示时输入密码。</p><h4 id="作为-mytester-插入文档">(8) 作为 myTester 插入文档</h4><p>作为 myTester，你有权在 test 数据库中执行读取和写入操作（以及在 reporting 数据库中执行读取操作）。 通过 myTester 身份验证后，将文档插入 test 数据库的集合中。例如，你可以在测试数据库中执行以下插入操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.foo.insert( &#123; x: 1, y: 1 &#125; )</span><br></pre></td></tr></table></figure><h1 id="robo-3t-远程连接-mongodb">robo 3t 远程连接 MongoDB</h1><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/Web/mongo/远程连接MongoDB/robo3t-connection.png" alt="robo3t-connection"></p><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/Web/mongo/远程连接MongoDB/robo3t-authentication.png" alt="robo3t-authentication"></p><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/Web/mongo/远程连接MongoDB/robo3t-test.png" alt="robo3t-test"></p><h1 id="references">References</h1><p><a href="https://docs.mongodb.com/manual/tutorial/enable-authentication/" rel="external nofollow noopener noreferrer" target="_blank">https://docs.mongodb.com/manual/tutorial/enable-authentication/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/wylu/cdn/post/Web/mongo/远程连接MongoDB/robo3t.png&quot; alt=&quot;robo3t&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="https://wylu.me/categories/Web/"/>
    
      <category term="mongo" scheme="https://wylu.me/categories/Web/mongo/"/>
    
    
      <category term="MongoDB" scheme="https://wylu.me/tags/MongoDB/"/>
    
      <category term="robo3t" scheme="https://wylu.me/tags/robo3t/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7安装及卸载MongoDB.md</title>
    <link href="https://wylu.me/posts/696d9dac/"/>
    <id>https://wylu.me/posts/696d9dac/</id>
    <published>2020-03-25T13:48:25.000Z</published>
    <updated>2020-04-18T06:10:32.883Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/Web/mongo/CentOS7安装及卸载MongoDB/mongodb.jpg" alt="mongodb"></p><a id="more"></a><h1 id="安装-mongodb-社区版本">安装 MongoDB 社区版本</h1><h2 id="配置-yum-包管理系统">配置 yum 包管理系统</h2><p>创建 <code>/etc/yum.repos.d/mongodb-org-4.2.repo</code> 文件，这样你就可以使用 yum 安装 MongoDB，文件内容如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mongodb-org-4.2]</span></span><br><span class="line"><span class="attr">name</span>=MongoDB Repository</span><br><span class="line"><span class="attr">baseurl</span>=https://repo.mongodb.org/yum/redhat/<span class="variable">$releasever</span>/mongodb-org/<span class="number">4.2</span>/x<span class="number">86_64</span>/</span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=https://www.mongodb.org/static/pgp/server-<span class="number">4.2</span>.asc</span><br></pre></td></tr></table></figure><blockquote><p>You can also download the <code>.rpm</code> files directly from the <a href="https://repo.mongodb.org/yum/redhat/" rel="external nofollow noopener noreferrer" target="_blank">MongoDB repository</a>. Downloads are organized by Red Hat / CentOS version (e.g. <code>7</code>), then MongoDB <a href="https://docs.mongodb.com/manual/reference/versioning/" rel="external nofollow noopener noreferrer" target="_blank">release version</a> (e.g. <code>4.2</code>), then architecture (e.g. <code>x86_64</code>).</p></blockquote><h2 id="安装-mongodb">安装 MongoDB</h2><p>执行下列命令安装最新稳定版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y mongodb-org</span><br></pre></td></tr></table></figure><p>如果要安装特定版本的 MongoDB，请分别指定每个组件软件包，并将版本号附加到软件包名称中，如以下示例所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y mongodb-org-4.2.3 mongodb-org-server-4.2.3 mongodb-org-shell-4.2.3 mongodb-org-mongos-4.2.3 mongodb-org-tools-4.2.3</span><br></pre></td></tr></table></figure><p>你可以指定任何可用的 MongoDB 版本。但是，当有较新版本时，yum会升级软件包。为防止意外升级，请固定包。要固定软件包，请在 <code>/etc/yum.conf</code> 文件中添加以下 exclude 指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exclude=mongodb-org,mongodb-org-server,mongodb-org-shell,mongodb-org-mongos,mongodb-org-tools</span><br></pre></td></tr></table></figure><h2 id="运行-mongodb">运行 MongoDB</h2><p><strong>运行前需要确认数据目录和日志目录是否存在，如果是初次尝试使用 MongoDB，建议使用默认目录。</strong></p><h3 id="目录路径">目录路径</h3><h4 id="使用默认目录">使用默认目录</h4><p>默认情况下，MongoDB 使用 mongod 用户帐户运行，并使用以下默认目录：</p><ul><li><code>/var/lib/mongo</code> (数据目录)</li><li><code>/var/log/mongodb</code> (日志目录)</li></ul><p>如果你是通过软件包管理器安装的，将会自动创建默认目录，并将这些目录的所有者和组设置为 mongod。</p><p>如果你是通过下载压缩包进行安装，未创建默认 MongoDB 目录的，需要手动创建 MongoDB 数据和日志目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /var/lib/mongo</span><br><span class="line">sudo mkdir -p /var/log/mongodb</span><br></pre></td></tr></table></figure><p>创建后，将这些目录的所有者和组设置为 mongod：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R mongod:mongod &lt;directory&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;directory&gt;</code> 为你创建的目录。</p><h4 id="使用非默认目录">使用非默认目录</h4><p>要使用默认目录以外的数据目录和/或日志目录：</p><ul><li><p>创建一个或多个新目录。</p></li><li><p>编辑配置文件 <code>/etc/mongod.conf</code> 并相应地修改以下字段：</p><ul><li><code>storage.dbPath</code> 以指定新的数据目录路径（例如 /some/data/directory）</li><li><code>systemLog.path</code> 以指定新的日志文件路径（例如 /some/log/directory/mongod.log）</li></ul></li><li><p>确保运行 MongoDB 的用户有权访问这些非默认目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R mongod:mongod &lt;directory&gt;</span><br></pre></td></tr></table></figure><p>如果更改运行 MongoDB 进程的用户，则必须授予新用户访问这些目录的权限。</p></li><li><p>配置 SELinux</p></li></ul><h3 id="配置-selinux">配置 SELinux</h3><p><a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/#configure-selinux" rel="external nofollow noopener noreferrer" target="_blank">Configure SELinux</a></p><h3 id="管理-mongod">管理 mongod</h3><p>请按照以下步骤在系统上运行 MongoDB Community Edition。这些说明假定你使用的是默认设置。</p><p>要运行和管理 mongod 进程，你将使用操作系统的内置初始化系统。Linux 的最新版本趋向于使用 systemd（使用 systemctl 命令），而 Linux 的较早版本趋向于使用 System V init（使用 service 命令）。</p><p>以 systemd（使用 systemctl 命令）为例：</p><ul><li><p>启动 mongod</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start mongod</span><br></pre></td></tr></table></figure><p>如果启动 mongod 时收到与以下类似的错误：</p><p><strong>Failed to start mongod.service: Unit mongod.service not found.</strong></p><p>首先运行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>然后再次运行上面的启动命令。</p></li><li><p>验证 MongoDB 是否已成功启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status mongod</span><br></pre></td></tr></table></figure><p>你可以选择执行以下命令来确保 MongoDB 在系统启动时启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable mongod</span><br></pre></td></tr></table></figure></li><li><p>停止 mongod</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop mongod</span><br></pre></td></tr></table></figure></li><li><p>重启 mongod</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart mongod</span><br></pre></td></tr></table></figure><p>你可以通过查看 /var/log/mongodb/mongod.log 文件中的输出来跟踪错误或重要消息的进程状态。</p></li><li><p>使用 MongoDB</p><p>在与 mongod 相同的主机上启动 mongo shell，你可以在没有任何命令行选项的情况下运行 mongo shell，这将使用默认端口 27017 连接到在本地主机上运行的 mongod：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure><p>有关使用 <a href="https://docs.mongodb.com/manual/reference/program/mongo/#bin.mongo" rel="external nofollow noopener noreferrer" target="_blank">mongo</a> shell 连接的更多信息，例如连接到在其他主机和/或端口上运行的 mongod 实例，请参阅 <a href="https://docs.mongodb.com/manual/mongo/" rel="external nofollow noopener noreferrer" target="_blank">mongo Shell</a>。</p></li></ul><h1 id="卸载-mongodb-社区版本">卸载 MongoDB 社区版本</h1><p>要从系统中完全删除 MongoDB，必须删除 MongoDB 应用程序本身，配置文件以及所有包含数据和日志的目录。以下部分将指导你完成必要的步骤：</p><blockquote><p>WARNING</p><p>This process will <em>completely</em> remove MongoDB, its configuration, and <em>all</em> databases. This process is not reversible, so ensure that all of your configuration and data is backed up before proceeding.</p></blockquote><ul><li><p>停止 mongod</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mongod stop</span><br></pre></td></tr></table></figure></li><li><p>删除 MongoDB 包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum erase $(rpm -qa | grep mongodb-org)</span><br></pre></td></tr></table></figure></li><li><p>删除数据和日志目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -r /var/log/mongodb</span><br><span class="line">sudo rm -r /var/lib/mongo</span><br></pre></td></tr></table></figure></li></ul><h1 id="references">References</h1><p><a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/" rel="external nofollow noopener noreferrer" target="_blank">https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/wylu/cdn/post/Web/mongo/CentOS7安装及卸载MongoDB/mongodb.jpg&quot; alt=&quot;mongodb&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="https://wylu.me/categories/Web/"/>
    
      <category term="mongo" scheme="https://wylu.me/categories/Web/mongo/"/>
    
    
      <category term="MongoDB" scheme="https://wylu.me/tags/MongoDB/"/>
    
      <category term="CentOS7" scheme="https://wylu.me/tags/CentOS7/"/>
    
  </entry>
  
  <entry>
    <title>打印二叉树</title>
    <link href="https://wylu.me/posts/91f36751/"/>
    <id>https://wylu.me/posts/91f36751/</id>
    <published>2020-03-23T15:04:12.000Z</published>
    <updated>2020-03-23T15:19:57.420Z</updated>
    
    <content type="html"><![CDATA[<p>本文将使用两种展示方式打印一颗二叉树，效果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">├── 12</span><br><span class="line">│   ├── 14</span><br><span class="line">│   │   ├── 20</span><br><span class="line">│   │   │   └── 15</span><br><span class="line">│   │   └── 13</span><br><span class="line">│   └── 10</span><br><span class="line">│       ├── 11</span><br><span class="line">│       └── 9</span><br><span class="line">└── 4</span><br><span class="line">    ├── 6</span><br><span class="line">    │   ├── 7</span><br><span class="line">    │   └── 5</span><br><span class="line">    └── 2</span><br><span class="line">        ├── 3</span><br><span class="line">        └── 1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">                 /----- 20</span><br><span class="line">                 |       \----- 15</span><br><span class="line">         /----- 14</span><br><span class="line">         |       \----- 13</span><br><span class="line"> /----- 12</span><br><span class="line"> |       |       /----- 11</span><br><span class="line"> |       \----- 10</span><br><span class="line"> |               \----- 9</span><br><span class="line">8</span><br><span class="line"> |               /----- 7</span><br><span class="line"> |       /----- 6</span><br><span class="line"> |       |       \----- 5</span><br><span class="line"> \----- 4</span><br><span class="line">         |       /----- 3</span><br><span class="line">         \----- 2</span><br><span class="line">                 \----- 1</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="构建二叉树">构建二叉树</h1><p>为了方便测试，我们需要构建一颗二叉树，这里使用前序遍历序列和中序遍历序列来重建二叉树。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> TreeNode left;</span><br><span class="line">    <span class="keyword">public</span> TreeNode right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        val = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@File</span>    :   Tree.java</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Time</span>    :   2020/03/23 17:46:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>  :   wylu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> :   1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Contact</span> :   15wylu@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@License</span> :   (C)Copyright 2020, wylu-CHINA-SHENZHEN</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Desc</span>    :</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tree</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> TreeNode <span class="title">mk</span><span class="params">(<span class="keyword">int</span>[] pre, <span class="keyword">int</span>[] in,</span></span></span><br><span class="line"><span class="function"><span class="params">                               <span class="keyword">int</span> startPre, <span class="keyword">int</span> endPre,</span></span></span><br><span class="line"><span class="function"><span class="params">                               <span class="keyword">int</span> startIn, <span class="keyword">int</span> endIn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (startPre == endPre) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(pre[startPre]);</span><br><span class="line">        <span class="comment">// 中序遍历序列根结点索引</span></span><br><span class="line">        <span class="keyword">int</span> idx = startIn;</span><br><span class="line">        <span class="keyword">while</span> (idx &lt; endIn &amp;&amp; in[idx] != root.val) &#123;</span><br><span class="line">            idx++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 左子树序列长度</span></span><br><span class="line">        <span class="keyword">int</span> llen = idx - startIn;</span><br><span class="line">        <span class="comment">// 左右子树序列中点（右子树序列起始点）</span></span><br><span class="line">        <span class="keyword">int</span> mpre = startPre + <span class="number">1</span> + llen;</span><br><span class="line">        root.left = mk(pre, in, startPre + <span class="number">1</span>, mpre, startIn, idx - <span class="number">1</span>);</span><br><span class="line">        root.right = mk(pre, in, mpre, endPre, idx + <span class="number">1</span>, endIn);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 利用前序遍历序列和中序遍历序列构建一颗二叉树</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pre 前序遍历序列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in  中序遍历序列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">mkTree</span><span class="params">(<span class="keyword">int</span>[] pre, <span class="keyword">int</span>[] in)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pre == <span class="keyword">null</span> || in == <span class="keyword">null</span> || pre.length == <span class="number">0</span> || pre.length != in.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mk(pre, in, <span class="number">0</span>, pre.length, <span class="number">0</span>, in.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Case 1</span></span><br><span class="line">    <span class="keyword">int</span>[] pre = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span>[] in = &#123;<span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">6</span>&#125;;</span><br><span class="line">    TreeNode root = Tree.mkTree(pre, in);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二叉树打印类">二叉树打印类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@File</span> : TreePrinter.java</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Time</span> : 2020/03/23 17:47:57</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> : wylu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> : 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Contact</span> : 15wylu@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@License</span> : (C)Copyright 2020, wylu-CHINA-SHENZHEN</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Desc</span> :</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreePrinter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">linuxStyle</span><span class="params">(TreeNode root, StringBuilder sb, String prefix, String childPrefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(prefix);</span><br><span class="line">        sb.append(root.val);</span><br><span class="line">        sb.append(<span class="string">"\n"</span>);</span><br><span class="line">        linuxStyle(root.right, sb, childPrefix + <span class="string">"├── "</span>, childPrefix + <span class="string">"│   "</span>);</span><br><span class="line">        linuxStyle(root.left, sb, childPrefix + <span class="string">"└── "</span>, childPrefix + <span class="string">"    "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StringBuilder <span class="title">getLinuxStyle</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        linuxStyle(root, sb, <span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span> sb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * z</span></span><br><span class="line"><span class="comment">     * ├── c</span></span><br><span class="line"><span class="comment">     * │ ├── a</span></span><br><span class="line"><span class="comment">     * │ └── b</span></span><br><span class="line"><span class="comment">     * └── d</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prtLinuxStyle</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        System.out.println(getLinuxStyle(root).toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StringBuilder <span class="title">horizontalStyle</span><span class="params">(TreeNode root, StringBuilder sb)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            horizontalStyle(root.right, sb, <span class="keyword">true</span>, <span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(root.val).append(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">if</span> (root.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            horizontalStyle(root.left, sb, <span class="keyword">false</span>, <span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">horizontalStyle</span><span class="params">(TreeNode root, StringBuilder sb, <span class="keyword">boolean</span> isRight,</span></span></span><br><span class="line"><span class="function"><span class="params">            String indent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            horizontalStyle(root.right, sb, <span class="keyword">true</span>, indent + (isRight ? <span class="string">"        "</span> : <span class="string">" |      "</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(indent);</span><br><span class="line">        sb.append(isRight ? <span class="string">" /"</span> : <span class="string">" \\"</span>);</span><br><span class="line">        sb.append(<span class="string">"----- "</span>);</span><br><span class="line">        sb.append(root.val).append(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">if</span> (root.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            horizontalStyle(root.left, sb, <span class="keyword">false</span>, indent + (isRight ? <span class="string">" |      "</span> : <span class="string">"        "</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *                 /----- 20</span></span><br><span class="line"><span class="comment">     *                 |       \----- 15</span></span><br><span class="line"><span class="comment">     *         /----- 14</span></span><br><span class="line"><span class="comment">     *         |       \----- 13</span></span><br><span class="line"><span class="comment">     * /----- 12</span></span><br><span class="line"><span class="comment">     * |       |       /----- 11</span></span><br><span class="line"><span class="comment">     * |       \----- 10</span></span><br><span class="line"><span class="comment">     * |               \----- 9</span></span><br><span class="line"><span class="comment">     * 8</span></span><br><span class="line"><span class="comment">     * |              /----- 7</span></span><br><span class="line"><span class="comment">     * |      /----- 6</span></span><br><span class="line"><span class="comment">     * |      |       \----- 5</span></span><br><span class="line"><span class="comment">     * \----- 4</span></span><br><span class="line"><span class="comment">     *        |       /----- 3</span></span><br><span class="line"><span class="comment">     *        \----- 2</span></span><br><span class="line"><span class="comment">     *                \----- 1</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prtHorizontalStyle</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        System.out.println(horizontalStyle(root, <span class="keyword">new</span> StringBuilder()).toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Case 1</span></span><br><span class="line">        <span class="keyword">int</span>[] pre = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] in = &#123;<span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        TreeNode root = Tree.mkTree(pre, in);</span><br><span class="line">        TreePrinter.prtLinuxStyle(root);</span><br><span class="line">        TreePrinter.prtHorizontalStyle(root);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Case 2</span></span><br><span class="line">        pre = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">20</span>, <span class="number">15</span>&#125;;</span><br><span class="line">        in = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">20</span>&#125;;</span><br><span class="line">        root = Tree.mkTree(pre, in);</span><br><span class="line">        TreePrinter.prtLinuxStyle(root);</span><br><span class="line">        TreePrinter.prtHorizontalStyle(root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="references">References</h1><p><a href="https://stackoverflow.com/questions/4965335/how-to-print-binary-tree-diagram" rel="external nofollow noopener noreferrer" target="_blank">https://stackoverflow.com/questions/4965335/how-to-print-binary-tree-diagram</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将使用两种展示方式打印一颗二叉树，效果如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── 12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── 14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   ├── 20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   │   └── 15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   └── 13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       ├── 11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       └── 9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ├── 6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    │   ├── 7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    │   └── 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    └── 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ├── 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        └── 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;                 /----- 20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 |       \----- 15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         /----- 14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         |       \----- 13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; /----- 12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; |       |       /----- 11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; |       \----- 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; |               \----- 9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; |               /----- 7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; |       /----- 6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; |       |       \----- 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; \----- 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         |       /----- 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         \----- 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 \----- 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Code" scheme="https://wylu.me/categories/Code/"/>
    
    
      <category term="二叉树" scheme="https://wylu.me/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下安装拳皇97</title>
    <link href="https://wylu.me/posts/7de10289/"/>
    <id>https://wylu.me/posts/7de10289/</id>
    <published>2020-02-02T13:17:51.000Z</published>
    <updated>2020-04-18T06:10:32.871Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/OS/Linux/Ubuntu下安装拳皇97/kof97.jpeg" alt="kof97"></p><a id="more"></a><h1 id="系统环境">系统环境</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> lsb_release -a</span></span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID:Ubuntu</span><br><span class="line">Description:Ubuntu 18.04.3 LTS</span><br><span class="line">Release:18.04</span><br><span class="line">Codename:bionic</span><br></pre></td></tr></table></figure><h1 id="安装-mame-模拟器">安装 <a href="https://www.mamedev.org/" rel="external nofollow noopener noreferrer" target="_blank">MAME</a> 模拟器</h1><p><a href="https://en.wikipedia.org/wiki/MAME" rel="external nofollow noopener noreferrer" target="_blank">MAME</a>（最初是 Multiple Arcade Machine Emulator 的缩写）是一种免费的开源模拟器，旨在在现代个人计算机和其他平台上的软件中重新创建街机游戏系统的硬件。MAME 目的是通过防止老式游戏丢失或遗忘来保留游戏历史，并为模拟街机的内部工作提供参考，其实际玩游戏的能力被认为是“不错的副作用”。</p><p>执行以下命令安装 MAME 模拟器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt install mame</span></span><br></pre></td></tr></table></figure><h1 id="测试-mame-是否安装成功">测试 MAME 是否安装成功</h1><p>执行 <code>mame</code> 命令启动模拟器，如果启动后界面如下，说明模拟器安装成功，按 <code>ESC</code> 键可退出程序。</p><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/OS/Linux/Ubuntu下安装拳皇97/mame.png" alt="mame"></p><h1 id="下载-kof97.zip-rom">下载 kof97.zip rom</h1><p>因为大多数游戏数据都是存储于只读存储器，渐渐地不管这些文件原先是被存储于怎样的介质，读取后的文件都通称为 ROM 映像档或 ROM。在要运行某一特定的游戏时，MAME 就需要这些读取自原始街机的整组文件，这一整组的文件称之为“ROM 集合”，但是碍于法规 MAME 不会自带这些文件。</p><p>所以想要在 MAME 中玩拳皇97还需要下载游戏的 rom 包，MAME 支持的游戏 rom 包可以到 <a href="https://www.planetemu.net/roms/mame-roms" rel="external nofollow noopener noreferrer" target="_blank">https://www.planetemu.net/roms/mame-roms</a> 下载。</p><p>这是拳皇97的 rom：<a href="https://www.planetemu.net/rom/mame-roms/kof97" rel="external nofollow noopener noreferrer" target="_blank">kof97.zip</a></p><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/OS/Linux/Ubuntu下安装拳皇97/download-kof97.png" alt="download-kof97"></p><p>拳皇97风云再起的 rom: <a href="https://www.planetemu.net/rom/mame-roms/kof97pls" rel="external nofollow noopener noreferrer" target="_blank">kof97pls.zip</a>，该 rom 依赖于 kof97.zip</p><h1 id="下载-neogeo.zip">下载 neogeo.zip</h1><p>neogeo.zip 是玩所有 NEOGEO 公司出品的游戏所必需的 BIOS 文件，需要和其它游戏 ROM 一起放在模拟器的 roms 文件夹下。</p><p>Mame 0.198 街机 BIOS 文件 neogeo.zip 进行了更新，新增 uni-bios_3_3.rom，sp1-u3.bin sp1-j3.bin 驱动。</p><p><a href="https://source.mamecn.com/newrom2018/0.198mameBIOS/neogeo.zip" rel="external nofollow noopener noreferrer" target="_blank">https://source.mamecn.com/newrom2018/0.198mameBIOS/neogeo.zip</a></p><h1 id="将-kof97.zip-和-neogeo.zip-放到-mame-的-roms-目录下">将 kof97.zip 和 neogeo.zip 放到 MAME 的 roms 目录下</h1><p>使用 apt 安装 MAME 时，默认会将模拟器安装在 <code>/usr/share/games/mame</code>，所以 MAME 的 roms 目录在 <code>/usr/share/games/mame/roms</code>，将 kof97.zip 和 neogeo.zip 都拷贝到 roms 目录下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> wylu @ X555LJ <span class="keyword">in</span> /usr/share/games/mame/roms [23:28:54] </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo cp ~/Downloads/kof97.zip . </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> wylu @ X555LJ <span class="keyword">in</span> /usr/share/games/mame/roms [23:29:54] </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo cp ~/Downloads/neogeo.zip .</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> wylu @ X555LJ <span class="keyword">in</span> /usr/share/games/mame/roms [23:30:11] </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ll</span></span><br><span class="line">total 30M</span><br><span class="line">-rw-r--r-- 1 root root  28M Feb  2 23:29 kof97.zip</span><br><span class="line">-rw-r--r-- 1 root root 1.7M Feb  2 23:30 neogeo.zip</span><br></pre></td></tr></table></figure><h1 id="验证-rom-是否正确可用">验证 rom 是否正确可用</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mame -verifyroms kof97    </span></span><br><span class="line">romset kof97 [neogeo] is good</span><br><span class="line">1 romsets found, 1 were OK.</span><br></pre></td></tr></table></figure><p>验证成功，如果提示你的 neogeo.zip 缺少文件导致无法运行，请尝试获取最新的 neogeo.zip 文件然后重试。</p><h1 id="运行游戏">运行游戏</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mame kof97</span></span><br></pre></td></tr></table></figure><p>执行以上命令即可启动游戏，默认 MAME 运行时是全屏，使用组合键 <code>Alt + Enter</code> 可切换成窗口模式；按 <code>p</code> 键暂停游戏并释放鼠标；按 <code>Tab</code> 键可进行相应的设置，按 <code>Esc</code> 退出 MAME。</p><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/OS/Linux/Ubuntu下安装拳皇97/run-kof97.png" alt="run-kof97"></p><h1 id="配置视图长宽比aspect-ratio">配置视图长宽比（Aspect Ratio）</h1><p>如果你成功运行了 kof97，并尝试进行设置，你会发现视图的长宽比始终为 4:3，且无法调整，导致整个视图看起来非常窄，为了能够调整长宽比，我查阅了许多资料，后来发现一个帖子，它基本上解决了我遇到的问题：</p><p><a href="http://forum.arcadecontrols.com/index.php?topic=154130.0" rel="external nofollow noopener noreferrer" target="_blank">Correct Aspect Ratio for vertical games on 16:9 screens??</a></p><p>我的方法就是修改模拟器的配置文件，首先进入到 MAME 配置文件目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /etc/mame</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ll</span></span><br><span class="line">total 8.0K</span><br><span class="line">-rw-r--r-- 1 root root 1.9K Aug 30  2017 mame.ini</span><br><span class="line">drwxr-xr-x 2 root root 4.0K Feb  2 22:29 presets</span><br></pre></td></tr></table></figure><p>然后编辑 mame.ini 文件，在文件末尾加上如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">keepaspect              0</span><br><span class="line">unevenstretch           1</span><br><span class="line">autostretchxy           0</span><br></pre></td></tr></table></figure><p>保存退出，最后重新运行游戏 <code>mame kof97</code></p><h1 id="reference">Reference</h1><p><a href="https://www.mamecn.com/jiejiyouxixiazaijieshao/13814.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.mamecn.com/jiejiyouxixiazaijieshao/13814.html</a></p><p><a href="http://forum.arcadecontrols.com/index.php?topic=154130.0" rel="external nofollow noopener noreferrer" target="_blank">http://forum.arcadecontrols.com/index.php?topic=154130.0</a></p><p><a href="https://docs.mamedev.org/advanced/multiconfig.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.mamedev.org/advanced/multiconfig.html</a></p><p><a href="https://strategywiki.org/wiki/MAME/Configure" rel="external nofollow noopener noreferrer" target="_blank">https://strategywiki.org/wiki/MAME/Configure</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/wylu/cdn/post/OS/Linux/Ubuntu下安装拳皇97/kof97.jpeg&quot; alt=&quot;kof97&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="https://wylu.me/categories/OS/"/>
    
      <category term="Linux" scheme="https://wylu.me/categories/OS/Linux/"/>
    
    
      <category term="Ubuntu" scheme="https://wylu.me/tags/Ubuntu/"/>
    
      <category term="Linux" scheme="https://wylu.me/tags/Linux/"/>
    
      <category term="MAME" scheme="https://wylu.me/tags/MAME/"/>
    
      <category term="kof97" scheme="https://wylu.me/tags/kof97/"/>
    
      <category term="拳皇97" scheme="https://wylu.me/tags/%E6%8B%B3%E7%9A%8797/"/>
    
  </entry>
  
  <entry>
    <title>Github+jsDelivr打造稳定快速、高效免费图床</title>
    <link href="https://wylu.me/posts/e714e6f9/"/>
    <id>https://wylu.me/posts/e714e6f9/</id>
    <published>2020-01-14T13:47:03.000Z</published>
    <updated>2020-04-18T06:10:32.851Z</updated>
    
    <content type="html"><![CDATA[<p>jsDelivr 是 ProspectOne 开发的公共开源 CDN（Content Delivery Network），专注于性能，可靠性和安全性。每个人均可免费使用，没有带宽限制。jsDelivr 是唯一由中国政府签发并具有有效 ICP 许可证的公共 CDN，并且直接在中国大陆拥有数百个地点。</p><p>jsDelivr 有一个十分好用的功能，它可以加速 Github 仓库的文件访问，借助 jsDelivr 我们可以搭建一个稳定快速、高效免费的图床。</p><a id="more"></a><h1 id="新建-github-仓库">新建 Github 仓库</h1><p>要实现一个 Github 图床，首先我们需要在 Github 创建一个仓库，用来存放我们的图片，假设新仓库名为 figure-bed。</p><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/Tool/Hexo/Github-jsDelivr-打造稳定快速免费图床/create-a-new-repo.png" alt="create-a-new-repo"></p><h1 id="clone-仓库到本地">Clone 仓库到本地</h1><p>复制图床仓库地址</p><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/Tool/Hexo/Github-jsDelivr-打造稳定快速免费图床/clone-repo.png" alt="clone-repo"></p><p>执行 <code>git clone</code>，将 figure-bed 克隆到本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> git@github.com:wylu/figure-bed.git</span></span><br></pre></td></tr></table></figure><h1 id="上传图片到仓库">上传图片到仓库</h1><p>复制需要上传的图片或其它资源，如 js、css等，现假设我们将三张图片放到 figure-bed 仓库的 blog 目录下，其目录结构如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tree figure-bed </span></span><br><span class="line">figure-bed</span><br><span class="line">├── blog</span><br><span class="line">│   ├── 1.jpg</span><br><span class="line">│   ├── 2.jpg</span><br><span class="line">│   └── 3.png</span><br><span class="line">└── README.md</span><br><span class="line"></span><br><span class="line">1 directory, 4 files</span><br></pre></td></tr></table></figure><p>执行以下命令，推送资源到远程库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add *</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"initial commit"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push</span></span><br></pre></td></tr></table></figure><h1 id="通过-jsdelivr-引用图片">通过 jsDelivr 引用图片</h1><p>在将图片推送到远程库后，我们就可以用 jsDelivr 引用仓库中的图片了。</p><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/Tool/Hexo/Github-jsDelivr-打造稳定快速免费图床/push-asset.png" alt="push-asset"></p><p>引用方法为："https://cdn.jsdelivr.net/gh/Github用户名/仓库名/文件路径"</p><p>以上面的 figure-bed 为例，假如我们要引用名为 <code>1.jpg</code> 的图片，使用方法为：</p><p>https://cdn.jsdelivr.net/gh/wylu/figure-bed/blog/1.jpg</p><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/Tool/Hexo/Github-jsDelivr-打造稳定快速免费图床/ref-asset.png" alt="ref-asset"></p><p>更多引用 Github 资源的写法请参考 <a href="https://github.com/jsdelivr/jsdelivr" rel="external nofollow noopener noreferrer" target="_blank">jsdelivr GitHub</a>。</p><h1 id="利用-picgo-上传图片到图床">利用 PicGo 上传图片到图床</h1><p>如果你不想手动地 commit 图片到图床，而是想通过简单的拖拽的方式就能实现图片的上传，那么 PicGo 工具是一个不错的选择。</p><p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/" rel="external nofollow noopener noreferrer" target="_blank">PicGo使用文档</a></p><p>具体操作可参考 THRX 博客 <a href="https://www.itrhx.com/2019/08/01/A27-image-hosting/" rel="external nofollow noopener noreferrer" target="_blank">Github+jsDelivr+PicGo 打造稳定快速、高效免费图床</a></p><h1 id="references">References</h1><p><a href="https://github.com/jsdelivr/jsdelivr" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jsdelivr/jsdelivr</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jsDelivr 是 ProspectOne 开发的公共开源 CDN（Content Delivery Network），专注于性能，可靠性和安全性。每个人均可免费使用，没有带宽限制。jsDelivr 是唯一由中国政府签发并具有有效 ICP 许可证的公共 CDN，并且直接在中国大陆拥有数百个地点。&lt;/p&gt;
&lt;p&gt;jsDelivr 有一个十分好用的功能，它可以加速 Github 仓库的文件访问，借助 jsDelivr 我们可以搭建一个稳定快速、高效免费的图床。&lt;/p&gt;
    
    </summary>
    
      <category term="Tool" scheme="https://wylu.me/categories/Tool/"/>
    
      <category term="Hexo" scheme="https://wylu.me/categories/Tool/Hexo/"/>
    
    
      <category term="Github" scheme="https://wylu.me/tags/Github/"/>
    
      <category term="jsDelivr" scheme="https://wylu.me/tags/jsDelivr/"/>
    
      <category term="图床" scheme="https://wylu.me/tags/%E5%9B%BE%E5%BA%8A/"/>
    
      <category term="PicGo" scheme="https://wylu.me/tags/PicGo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo NexT 图片caption出现多次</title>
    <link href="https://wylu.me/posts/7bd83fc5/"/>
    <id>https://wylu.me/posts/7bd83fc5/</id>
    <published>2020-01-13T14:16:09.000Z</published>
    <updated>2020-04-18T06:10:32.847Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 Hexo + NexT 搭建个人博客的过程中一直有个问题没有解决，直到今天才找到了解决方法。问题就是在展示同一张图片中，caption出现了两次，如图：</p><a id="more"></a><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/Tool/Hexo/Hexo-NexT-图片caption出现多次/multiple-captions.png" alt="multiple-captions"></p><h1 id="问题分析">问题分析</h1><p>图片正下方的 image-caption 是 NexT 给 fancybox 加上的；而图片左下方的 figcaption 是因为使用了 hexo-renderer-pandoc Markdown 渲染器导致的，hexo-renderer-pandoc 将 Markdown 文件渲染成 HTML 时，会对图片进行渲染，然后生成一个 figcaption 的标签。</p><p>很多人可能不会有这样的问题，因为 Hexo 默认的 Markdown 渲染器是 hexo-renderer-marked，hexo-renderer-marked 渲染图片时不会生成 figcaption。</p><p>如果你使用的是 hexo-renderer-marked 渲染器，就不会有这样的问题，但是相信很多人都是因为需要使用 mathjax，所以都将默认的 Hexo 默认的 Markdown 渲染器换成了 hexo-renderer-pandoc，hexo-renderer-pandoc 功能强大（依赖与 pandoc 自身强大的功能），它对数学公式的渲染简直可以说是吊打 hexo-renderer-marked，这也是我一直使用它的原因。</p><p>所以为了在使用 hexo-renderer-pandoc 的同时，把图片 caption 出现了两次的问题解决，我提过 issue，查阅了许多资料，终于找到了解决的方法。</p><h1 id="解决方法">解决方法</h1><p>编辑站点配置文件 <code>_config.yml</code>，添加如下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pandoc:</span></span><br><span class="line"><span class="attr">  extensions:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'-implicit_figures'</span></span><br></pre></td></tr></table></figure><p>执行下列命令重新生成站点，展示效果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo clean &amp;&amp; hexo g &amp;&amp; hexo s -o</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/Tool/Hexo/Hexo-NexT-图片caption出现多次/single-caption.png" alt="single-caption"></p><h1 id="隐藏-fancybox-的-caption">隐藏 fancybox 的 caption</h1><p>以 NexT v7.7.0 为例，通过查看 hexo-theme-next/source/js/utils.js 源码，发现 NexT 在使用 fancybox 时，如果图片 title 或 alt 属性不为空时，就会 fancybox 添加一个子标签展示图片的 title 或 alt 属性值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> imageTitle = $image.attr(<span class="string">'title'</span>) || $image.attr(<span class="string">'alt'</span>);</span><br><span class="line"><span class="keyword">if</span> (imageTitle) &#123;</span><br><span class="line">  $imageWrapLink.append(<span class="string">`&lt;p class="image-caption"&gt;<span class="subst">$&#123;imageTitle&#125;</span>&lt;/p&gt;`</span>);</span><br><span class="line">  <span class="comment">// Make sure img title tag will show correctly in fancybox</span></span><br><span class="line">  $imageWrapLink.attr(<span class="string">'title'</span>, imageTitle).attr(<span class="string">'data-caption'</span>, imageTitle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想通过配置支持选择是否展示 caption，可以参考下方的方法（在 NexT v7.7.0 已测试过），其实不管 NexT 的版本如何，解决方法的思路基本是一致的。</p><p>首先修改主题配置文件 <code>_config.yml</code>，找到 fancybox 的配置，将 fancybox 的配置改成如下所示内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># FancyBox is a tool that offers a nice and elegant way to add zooming functionality for images.</span></span><br><span class="line"><span class="comment"># For more information: https://fancyapps.com/fancybox</span></span><br><span class="line"><span class="attr">fancybox:</span> </span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  caption:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>其中，enable 控制是否启用 fancybox，而 caption 控制是否展示 caption (当然只有在 enable 为 true 时，caption 配置才有效)，如果你不启用 fancybox 自然也不会有 caption。</p><p>然后，编辑 hexo-theme-next/source/js/utils.js 文件，将上面的代码修改成如下内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> imageTitle = $image.attr(<span class="string">'title'</span>) || $image.attr(<span class="string">'alt'</span>);</span><br><span class="line"><span class="keyword">if</span> (imageTitle) &#123;</span><br><span class="line">  <span class="keyword">if</span> (CONFIG.fancybox.caption) &#123;</span><br><span class="line">    $imageWrapLink.append(<span class="string">`&lt;p class="image-caption"&gt;<span class="subst">$&#123;imageTitle&#125;</span>&lt;/p&gt;`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Make sure img title tag will show correctly in fancybox</span></span><br><span class="line">  $imageWrapLink.attr(<span class="string">'title'</span>, imageTitle).attr(<span class="string">'data-caption'</span>, imageTitle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着，编辑 hexo-theme-next/source/js/next-boot.js 文件，将 <code>CONFIG.fancybox &amp;&amp; NexT.utils.wrapImageWithFancyBox();</code> 替换成如下内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register JS handlers by condition option.</span></span><br><span class="line"><span class="comment"> * Need to add config option in Front-End at 'layout/_partials/head.swig' file.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">CONFIG.fancybox.enable &amp;&amp; NexT.utils.wrapImageWithFancyBox();</span><br></pre></td></tr></table></figure><p>相信你可以发现，我们这里将 <code>CONFIG.fancybox</code> 替换成 <code>CONFIG.fancybox.enable</code>，正是因为我们自定义的配置是通过 fancybox 下的 enable 的值来确定是否启用的。另外从源码上方的注释可以看到，CONFIG 下的配置项需要在前端文件 'layout/_partials/head.swig' （实际上该文件在'layout/_partials/head/head.swig'）中加上。</p><p>所以最后，我们需要在 <code>layout/_partials/head/head.swig</code> 中修改一下上面我们所使用 <code>CONFIG.fancybox.caption</code> 配置。参照其它配置，这里需要将 <code>fancybox: </code>，修改成如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fancybox: &#123;&#123; theme.fancybox | json &#125;&#125;</span><br></pre></td></tr></table></figure><p>重新生成，效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/Tool/Hexo/Hexo-NexT-图片caption出现多次/no-caption.png" alt="no-caption"></p><h1 id="references">References</h1><p><a href="https://github.com/wzpan/hexo-renderer-pandoc/issues/34" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wzpan/hexo-renderer-pandoc/issues/34</a></p><p><a href="https://github.com/theme-next/hexo-theme-next/issues/857" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/theme-next/hexo-theme-next/issues/857</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用 Hexo + NexT 搭建个人博客的过程中一直有个问题没有解决，直到今天才找到了解决方法。问题就是在展示同一张图片中，caption出现了两次，如图：&lt;/p&gt;
    
    </summary>
    
      <category term="Tool" scheme="https://wylu.me/categories/Tool/"/>
    
      <category term="Hexo" scheme="https://wylu.me/categories/Tool/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://wylu.me/tags/Hexo/"/>
    
      <category term="NexT" scheme="https://wylu.me/tags/NexT/"/>
    
      <category term="caption" scheme="https://wylu.me/tags/caption/"/>
    
  </entry>
  
  <entry>
    <title>Git子模块</title>
    <link href="https://wylu.me/posts/3504e7d9/"/>
    <id>https://wylu.me/posts/3504e7d9/</id>
    <published>2020-01-12T13:40:01.000Z</published>
    <updated>2020-01-12T14:57:22.296Z</updated>
    
    <content type="html"><![CDATA[<p>Git 子模块(Git submodules)允许你将 git repo 保留为另一个 git repo 的子目录。Git 子模块只是在特定时间快照上对另一个 repo 的引用。Git 子模块使 Git repo 能够合并和跟踪外部代码的版本历史。</p><a id="more"></a><h1 id="添加子模块">添加子模块</h1><p>通过下列命令，可以将在一个已存在的 Git 仓库添加为当前工作的仓库的子模块：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git submodule add &lt;repo url&gt; [submodule path]</span></span><br></pre></td></tr></table></figure><p>例如，在一个 Hexo 博客仓库下添加一个主题仓库 NexT：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git submodule add https://github.com/wylu/hexo-theme-next themes/next</span></span><br></pre></td></tr></table></figure><p>默认情况下，如果没有指定子模块存放路径，子模块将会放到一个与仓库同名的目录中。如果你想要放到其他地方，那么可以在命令结尾添加一个不同的路径，本例中子模块将会 clone 到 "themes/next" 目录下。</p><p>命令执行完成后，会在当前工作仓库根目录下生成 .gitmodules 文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[submodule &quot;themes/next&quot;]</span><br><span class="line">    path = themes/next</span><br><span class="line">    url = https://github.com/wylu/hexo-theme-next</span><br></pre></td></tr></table></figure><p>该文件保存了项目 URL 与已经拉取的本地目录之间的映射，如果有多个子模块，该文件中就会有多条记录。要重点注意的是，该文件应像 .gitignore 文件一样受到（通过）版本控制，和该项目的其他部分一同被拉取推送。有了映射关系，克隆该项目的人就知道去哪获得子模块了。</p><p>添加子模块完成后，当在父仓库时，Git 仍然不会跟踪 submodule 的文件， 而是将它看作该仓库中的一个特殊提交。</p><p>推送到远程仓库后，远程仓库中 submodule 会和指定的 commit 关联起来。如果需要指定分支，可以在 ".gitmodules" 文件中加上 branch 配置，如 <code>branch = develop</code>。</p><h1 id="克隆含有子模块的项目">克隆含有子模块的项目</h1><p>接下来我们将会克隆（clone）一个含有子模块的项目。 当你在克隆这样的项目时，默认会包含该子模块目录，但其中还没有任何文件，你需要执行两个命令以拉取子模块：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git submodule init</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git submodule update</span></span><br></pre></td></tr></table></figure><p><code>git submodule init</code> 用来初始化本地配置文件，而 <code>git submodule update</code> 则从子项目中抓取所有数据并检出父项目中列出的合适的提交。</p><p>或者：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --recursive &lt;parent repo url&gt;</span><br></pre></td></tr></table></figure><h1 id="删除子模块">删除子模块</h1><ol type="1"><li><p>把子模块从版本控制系统中移除 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git rm --cached &lt;submodule path&gt;</span></span><br></pre></td></tr></table></figure></p></li><li><p>删除子模块目录 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rm -rf &lt;submodule path&gt;</span></span><br></pre></td></tr></table></figure></p></li><li><p>编辑 ".gitmodules"，移除相应 submodule 节点内容</p></li><li><p>编辑 ".git/config"，移除相应 submodule 配置</p></li><li><p>如果有 ".git/modules" 目录，还应删除其下的相应子模块的目录</p></li></ol><p>以上面的 NexT 子模块为例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git rm --cached themes/next</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rm -rf themes/next</span></span><br></pre></td></tr></table></figure><p>然后删除 ".gitmodules" 中如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[submodule &quot;themes/next&quot;]</span><br><span class="line">    path = themes/next</span><br><span class="line">    url = https://github.com/wylu/hexo-theme-next</span><br></pre></td></tr></table></figure><p>最后删除 ".git/config" 中如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[submodule &quot;themes/next&quot;]</span><br><span class="line">        url = https://github.com/wylu/hexo-theme-next</span><br><span class="line">        active = true</span><br></pre></td></tr></table></figure><p>要把此次修改同步到远程库，还需要 push 一下。</p><h1 id="references">References</h1><p><a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules" rel="external nofollow noopener noreferrer" target="_blank">https://git-scm.com/book/en/v2/Git-Tools-Submodules</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git 子模块(Git submodules)允许你将 git repo 保留为另一个 git repo 的子目录。Git 子模块只是在特定时间快照上对另一个 repo 的引用。Git 子模块使 Git repo 能够合并和跟踪外部代码的版本历史。&lt;/p&gt;
    
    </summary>
    
      <category term="Tool" scheme="https://wylu.me/categories/Tool/"/>
    
      <category term="Git" scheme="https://wylu.me/categories/Tool/Git/"/>
    
    
      <category term="Git" scheme="https://wylu.me/tags/Git/"/>
    
      <category term="子模块" scheme="https://wylu.me/tags/%E5%AD%90%E6%A8%A1%E5%9D%97/"/>
    
      <category term="submodule" scheme="https://wylu.me/tags/submodule/"/>
    
  </entry>
  
  <entry>
    <title>Git在同一机器下配置多个github账号</title>
    <link href="https://wylu.me/posts/e186bfe8/"/>
    <id>https://wylu.me/posts/e186bfe8/</id>
    <published>2020-01-06T15:42:03.000Z</published>
    <updated>2020-01-12T09:42:03.936Z</updated>
    
    <content type="html"><![CDATA[<p>大多数人有时会需要在同一台机器上管理多个 github 账号，本文以管理两个 github 账号为例，记录了配置 git 的过程，方便下次遇到相同问题时，能节省处理时间。</p><a id="more"></a><h1 id="约定">约定</h1><ul><li>github 账号 1： wylu, 对应邮箱为 wylu@gmail.com</li><li>github 账号 2： 15wylu, 对应邮箱为 15wylu@gmail.com</li></ul><h1 id="生成第一对-ssh-key">生成第一对 SSH key</h1><p>第一个密钥对以 wylu 账号为例，在生成之前，我们可以通过 <code>ls -al ~/.ssh</code> 查看是否已有 SSH key。</p><p>例如： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls -al ~/.ssh</span></span><br><span class="line">total 24</span><br><span class="line">drwx------  2 wylu wylu 4096 Nov 24  2018 .</span><br><span class="line">drwxr-xr-x 66 wylu wylu 4096 Jan  7 00:00 ..</span><br><span class="line">-rw-------  1 wylu wylu 1675 Nov 24  2018 id_rsa</span><br><span class="line">-rw-r--r--  1 wylu wylu  398 Nov 24  2018 id_rsa.pub</span><br><span class="line">-rw-r--r--  1 wylu wylu 4841 Dec 22 21:46 known_hosts</span><br></pre></td></tr></table></figure></p><p>如果 <code>~/.ssh</code> 下有 "id_rsa"（私钥） 和 "id_rsa.pub"（公钥），说明之前已生成过 SSH key 了，我们可以直接复用这个密钥对（SSH key）。</p><p>如果你没有 SSH key 或者你想要重新生成一个 SSH key，可以执行以下命令生成：</p><ul><li>不存在 SSH Key 时。</li></ul><p>遇到输入一路回车使用默认配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -C <span class="string">"wylu@gmail.com"</span></span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/home/pi/.ssh/id_rsa): </span><br><span class="line">Created directory '/home/pi/.ssh'.</span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in /home/pi/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /home/pi/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:nGAMmHYEKfJ3/iEDLxOsg1xinfg/IzuYTQVggEnVSWQ wylu@gmail.com</span><br><span class="line">The key's randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|==+B*E.          |</span><br><span class="line">|* =.o=           |</span><br><span class="line">|.+ooo +          |</span><br><span class="line">| +.+=o.o .       |</span><br><span class="line">|o.+o.*  S        |</span><br><span class="line">|..ooo = .        |</span><br><span class="line">|  =..o + .       |</span><br><span class="line">| o + +  .        |</span><br><span class="line">|   .+ o          |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><ul><li>已存在 SSH Key 时。</li></ul><p>当询问是否 <code>Overwrite (y/n)?</code> 已存在的 <code>id_rsa</code> 时，直接输入 <code>y</code> 然后回车，其余的一路回车使用默认配置就好。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -C <span class="string">"wylu@gmail.com"</span></span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/home/pi/.ssh/id_rsa): </span><br><span class="line">/home/pi/.ssh/id_rsa already exists.</span><br><span class="line">Overwrite (y/n)? y</span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in /home/pi/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /home/pi/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:rPh6Y081aG7URerEmd6aA5FVYi+1w0KPHR59KggFwLk wylu@gmail.com</span><br><span class="line">The key's randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|     ..o.o*.*.   |</span><br><span class="line">|      o .* # +. .|</span><br><span class="line">|       .o.X.X  o |</span><br><span class="line">|      E. B.=...  |</span><br><span class="line">|        S * ..   |</span><br><span class="line">|     . = o +     |</span><br><span class="line">|    . . + +      |</span><br><span class="line">|     .+o   .     |</span><br><span class="line">|    .+.o.        |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><p>我们以此 SSH Key 作为默认的密钥对。</p><h1 id="生成第二对-ssh-key">生成第二对 SSH Key</h1><p>假设我们已经拥有了一对 SSH Key 对应于管理 wylu 的 github 账号，现在需要生成另外一对 SSH Key 用于管理 15wylu 的 github 账号。</p><p>执行下面的命令生成另一对 SSH Key：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/.ssh</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -C <span class="string">"15wylu@gmail.com"</span> -f <span class="string">"15wylu_id_rsa"</span></span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in 15wylu_id_rsa.</span><br><span class="line">Your public key has been saved in 15wylu_id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:6cQHRLvxRovTNQgPh1JiMCe4U1tFgkxe541ZGN+NiHA 15wylu@gmail.com</span><br><span class="line">The key's randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|   +=oB=E+o      |</span><br><span class="line">|  ..+*oOo&amp; + o   |</span><br><span class="line">|   o.o .O B = .  |</span><br><span class="line">|  o .  . X o .   |</span><br><span class="line">|   .    S *      |</span><br><span class="line">|       o +       |</span><br><span class="line">|        .        |</span><br><span class="line">|                 |</span><br><span class="line">|                 |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><p>方法与上面生成第一对 SSH Key 一样，一路回车，这里使用 <code>-f</code> 选项的作用是指定生成的密钥对文件的名称，以避免覆盖之前的密钥对文件。从输出信息中可以看到，此次生成的私钥文件名为 <code>15wylu_id_rsa</code>，公钥文件名为 <code>15wylu_id_rsa.pub</code>。这样同一台机器下，wylu 和 15wylu 都拥有了各自的 SSH Keys：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls -al ~/.ssh</span></span><br><span class="line">total 24</span><br><span class="line">drwx------ 2 pi pi 4096 Jan  6 17:00 .</span><br><span class="line">drwxr-xr-x 7 pi pi 4096 Jan  6 16:55 ..</span><br><span class="line">-rw------- 1 pi pi 1823 Jan  6 17:00 15wylu_id_rsa</span><br><span class="line">-rw-r--r-- 1 pi pi  396 Jan  6 17:00 15wylu_id_rsa.pub</span><br><span class="line">-rw------- 1 pi pi 1823 Jan  6 16:38 id_rsa</span><br><span class="line">-rw-r--r-- 1 pi pi  396 Jan  6 16:38 id_rsa.pub</span><br></pre></td></tr></table></figure><h1 id="在对应的-github-账号中添加-ssh-key">在对应的 github 账号中添加 SSH key</h1><p>参考文章 <a href="https://wylu.github.io/posts/5b767b23/" target="_blank" rel="noopener">Git配置SSH Key</a> 中的 <strong>添加 SSH Key 到 Github</strong> 部分，分别将 <code>id_rsa.pub</code> 文件中的公钥添加到 wylu 账号，将 <code>15wylu_id_rsa.pub</code> 文件中的公钥添加到 15wylu 账号。</p><h1 id="使用-ssh-agent-注册新的-ssh-密钥">使用 ssh-agent 注册新的 SSH 密钥</h1><p>ssh-agent：是一个可以控制和保存公钥身份验证所使用的私钥的程序，可以理解为一个密钥管理器，ssh-agent 是一个守护进程（daemon），设计它的唯一目的就是对解密的专用私钥进行高速缓存。</p><p><strong>如果没有正在运行的 ssh-agent，则执行 <code>eval "$(ssh-agent -s)"</code> 以确保 ssh-agent 运行。</strong></p><p>然后使用 ssh-add 添加私钥：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-add ~/.ssh/id_rsa</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh-add ~/.ssh/15wylu_id_rsa</span></span><br></pre></td></tr></table></figure><p>使用 ssh-add 将私钥交给 ssh-agent 保管，其他程序需要身份验证时，ssh 将直接从 ssh-agent 获取私钥，而不会提示你输入密码口令以获取私钥，这样就不需要经常输入密码了。可以使用 <code>ssh-add -l</code> 查看已添加到 ssh-agent 中的密钥。</p><p>接下来，<strong>需要使 ssh-agent 对不同的 SSH 主机使用各自的 SSH 密钥</strong>，这是关键部分，我们有两种不同的方法（使用其中一种即可）：</p><ul><li>使用 SSH 配置文件</li><li>在 ssh-agent 中只有一个活动的 SSH 密钥</li></ul><h1 id="使用-ssh-配置文件推荐">使用 SSH 配置文件（推荐）</h1><p>使用 <code>~/.ssh/config</code> 作为我们的配置文件，如果文件不存在，我们就创建它。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/.ssh/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> touch config</span></span><br></pre></td></tr></table></figure><p>编辑 <code>~/.ssh/config</code>，使相关 GitHub 帐户的配置类似于以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># github: wylu, email: wylu@gmail.com</span><br><span class="line"># the default config</span><br><span class="line">Host github.com</span><br><span class="line">   HostName github.com</span><br><span class="line">   User git</span><br><span class="line">   IdentityFile ~/.ssh/id_rsa</span><br><span class="line">   </span><br><span class="line"># github: 15wylu, email: 15wylu@gmail.com</span><br><span class="line">Host 15wylu.github.com</span><br><span class="line">   HostName github.com</span><br><span class="line">   User git</span><br><span class="line">   IdentityFile ~/.ssh/15wylu_id_rsa</span><br></pre></td></tr></table></figure><ul><li>Host: 别名，用于区分多个 git 账号，可随意</li><li>HostName: 要连接的服务器的主机名</li><li>IdentityFile: ssh 连接使用的私钥</li></ul><p>上面的配置要求 ssh-agent：</p><ul><li>使用 <code>id_rsa</code> 作为使用 <span class="citation" data-cites="github.com">@github.com</span> 的任何 Git URL 的密钥</li><li>对于使用 <span class="citation" data-cites="15wylu.github.com">@15wylu.github.com</span> 的任何 Git URL，则使用 <code>15wylu_id_rsa</code> 密钥</li></ul><p>其规则就是：从上至下读取 config 的内容，在每个 Host 下寻找对应的私钥，你可以根据需要添加更多的 Host。</p><h2 id="clone-新仓库">clone 新仓库</h2><p><strong>注意：如果使用 SSH 配置文件前，仓库已存在，参考下方 "对于已存在的仓库" 的内容。</strong></p><p>这里以上面的配置为例，假设要克隆 15wylu 账号的一个项目，原来使用的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git@github.com:15wylu/15wylu.github.io.git</span></span><br></pre></td></tr></table></figure><p>但是经过配置，我们已经将 15wylu 的 Host 设为了 <code>15wylu.github.com</code>，而不再是原来的 <code>github.com</code>，所以相应地 clone 的命令也变成如下：</p><p>（请注意克隆时我们使用了 SSH 配置中使用的主机名）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git@15wylu.github.com:15wylu/15wylu.github.io.git</span></span><br></pre></td></tr></table></figure><h2 id="对于已存在的仓库">对于已存在的仓库</h2><p>假设在配置之前，我们就已经 clone 了仓库。</p><p>首先使用 <code>git remote -v</code> 列出本地仓库对应的远程库，检查该 URL 是否与要使用的 GitHub 主机匹配，否则更新远程原始 URL：</p><p>以 15wylu 账号的仓库为例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git remote <span class="built_in">set</span>-url origin git@15wylu.github.com:15wylu/15wylu.github.io.git</span></span><br></pre></td></tr></table></figure><p>确保 <code>@</code> 和 <code>:</code> 之间的字符串与我们在 SSH 配置中指定的主机（Host）匹配。</p><h2 id="对于本地创建新的仓库">对于本地创建新的仓库</h2><p>在项目文件夹中使用 <code>git init</code> 中初始化目录为一个 Git 仓库。然后在 GitHub 帐户中创建新的仓库，将其作为远程库添加到本地仓库中：</p><p>同样以 15wylu 账号为例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git remote add origin git@15wylu.github.com:15wylu/remote_repo_name.git</span></span><br></pre></td></tr></table></figure><p>确保 <code>@</code> 和 <code>:</code> 之间的字符串与我们在 SSH 配置中指定的主机（Host）匹配。将初始提交推送到 GitHub 仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"initial commit"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push -u origin master</span></span><br></pre></td></tr></table></figure><h2 id="小结">小结</h2><p><strong>在这里，我们实际上是在为不同的主机（Host）添加 SSH 配置规则，说明要在哪个域中使用哪个身份文件（SSH key）。</strong></p><h2 id="测试">测试</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh -T git@github.com</span></span><br><span class="line">The authenticity of host 'github.com (13.250.177.223)' can't be established.</span><br><span class="line">RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">Warning: Permanently added 'github.com,13.250.177.223' (RSA) to the list of known hosts.</span><br><span class="line">Hi wylu! You've successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh -T git@15wylu.github.com</span></span><br><span class="line">Hi 15wylu! You've successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p>第一次执行 <code>ssh -T git@github.com</code> 时会有一段警告，直接输入 yes 回车既可。从输出的信息可以看到，wylu 和 15wylu 都认证成功了。</p><h1 id="在-ssh-agent-中只有一个活动的-ssh-密钥">在 ssh-agent 中只有一个活动的 SSH 密钥</h1><p>这种方法不需要 SSH 配置规则，而是我们手动确保 ssh-agent 在执行任何 Git 操作时仅附加了相关的密钥。</p><p><code>ssh-add -l</code> 将列出附加到 ssh-agent 的所有 SSH 密钥，删除所有这些密钥后，添加你将要使用的一个密钥，以确保 ssh-agent 中只有一个活动的密钥。</p><p>例如，假设你要使用 git 操作 15wylu 账号，首先使用下面的命令删除 ssh-agent 中的所有密钥：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-add -D</span></span><br></pre></td></tr></table></figure><p>然后添加 15wylu 账号对应的密钥：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-add ~/.ssh/15wylu_id_rsa</span></span><br></pre></td></tr></table></figure><p>此时，ssh-agent 已将密钥映射到 15wylu GitHub 帐户，当我们使用 git 推送、克隆等操作时都是对 15wylu 账号的仓库进行操作。</p><p>类似地，假如要使用 git 操作 wylu 账号，则：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-add -D</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh-add ~/.ssh/id_rsa</span></span><br></pre></td></tr></table></figure><h1 id="为本地仓库设置-git-remote-url">为本地仓库设置 git remote url</h1><p>clone 或创建本地 Git 仓库后，请确保 Git 配置的用户名和电子邮件正是你想要的。GitHub 通过 commit 描述附随的电子邮件 ID 来标识任何提交的作者。</p><p>要在本地 Git 目录（本地 Git 仓库下）中列出配置名称和电子邮件，请执行 <code>git config user.name</code> 和 <code>git config user.email</code>。如果找不到，则需要进行相应的更新，如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config user.name <span class="string">"wylu"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config user.email <span class="string">"wylu@gmail.com"</span></span></span><br></pre></td></tr></table></figure><h1 id="references">References</h1><p><a href="https://www.freecodecamp.org/news/manage-multiple-github-accounts-the-ssh-way-2dadc30ccaca/" rel="external nofollow noopener noreferrer" target="_blank">How to manage multiple GitHub accounts on a single machine with SSH keys</a></p><p><a href="https://www.jianshu.com/p/89cb26e5c3e8" rel="external nofollow noopener noreferrer" target="_blank">同一客户端下使用多个git账号</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大多数人有时会需要在同一台机器上管理多个 github 账号，本文以管理两个 github 账号为例，记录了配置 git 的过程，方便下次遇到相同问题时，能节省处理时间。&lt;/p&gt;
    
    </summary>
    
      <category term="Tool" scheme="https://wylu.me/categories/Tool/"/>
    
      <category term="Git" scheme="https://wylu.me/categories/Tool/Git/"/>
    
    
      <category term="git" scheme="https://wylu.me/tags/git/"/>
    
      <category term="github" scheme="https://wylu.me/tags/github/"/>
    
      <category term="git多用户" scheme="https://wylu.me/tags/git%E5%A4%9A%E7%94%A8%E6%88%B7/"/>
    
      <category term="git多账号" scheme="https://wylu.me/tags/git%E5%A4%9A%E8%B4%A6%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>tmux 简介与使用指南</title>
    <link href="https://wylu.me/posts/996c49c/"/>
    <id>https://wylu.me/posts/996c49c/</id>
    <published>2019-11-10T10:18:14.000Z</published>
    <updated>2020-04-18T06:10:32.843Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/Tool/Linux/tmux-简介与使用指南/tmux-logo.png" alt="tmux-logo"></p><p>tmux 是一个终端复用器（terminal multiplexer），它使你能够轻松地在多个终端程序之间来回切换，同时你还可以脱离它们（它们将在后台继续运行），然后在另一个终端窗口重新连接它们。</p><p>tmux 提升工作效率的两个主要功能：</p><ul><li><p>窗口分割。在一个终端窗口中，可以随意进行水平或垂直分割，让你在一个窗口中运行多个独立的终端实例，这样你就无需打开多个终端窗口了。通过简单的组合键，你可以轻松在多个独立运行的终端实例间进行切换。</p></li><li><p>基于会话的访问控制。在使用 SSH 工作的情况下，tmux 能避免工作现场丢失。假设在你执行某条命令的过程中，因为某些不可抗的因素（如网络问题）导致连接断开，这时你可能很难确定刚才的命令是否执行成功；又或者当你处一个较深层次的目录位置时，若 SSH 连接断开，你不得不重新进入到之前的工作目录。如果使用了 tmux，就可以在 SSH 重新连接后，连接到 tmux 之前的 session，这样就可以回到原来的工作环境。</p></li></ul><a id="more"></a><h1 id="tmux-工作原理">tmux 工作原理</h1><p>本文将为您提供有关 tmux 的简要介绍，然后是安装和使用指南。</p><ul><li><a href="https://github.com/tmux/tmux/blob/master/.github/README.md" rel="external nofollow noopener noreferrer" target="_blank">tmux README</a></li><li><a href="http://man.openbsd.org/OpenBSD-current/man1/tmux.1" rel="external nofollow noopener noreferrer" target="_blank">tmux 使用手册</a></li></ul><p>tmux 使用 C/S 模型构建，主要包含以下几个概念： - Server：服务器，若当前没有 Server 进程，则执行 tmux 命令时会启动一个 Server - Session：会话，一个 Server 可以包含多个 Session - Window：窗口，一个 Session 可以包含多个 Window - Pane：窗格，一个 Window 可以包含多个 Pane</p><p>当 tmux 启动时，它将创建一个具有单个 Window 的新 Session，这个 Window 中默认只包含一个 Pane，并将其显示在屏幕上。屏幕底部的状态栏显示了当前会话的信息，并用于输入交互式命令。</p><p><strong>注：这里包括以下所说的屏幕指的是当前仿真终端窗口的屏幕区域，因为在执行 tmux 命令前首先需要打开一个终端模拟器。</strong></p><p>Session 是“在 tmux 管理下的伪终端”的单个集合。每个会话都有一个或多个链接到它的 Window。Window 占据整个屏幕，并且可以分成多个矩形 Pane，每个 Pane 都是独立的伪终端。任意数量的 tmux 实例可以连接到同一个 Session，并且同一 Session 中可以存在任意数量的 Window。一旦所有的 Session 都被杀死，tmux 就会退出。</p><p>每个 Session 都是持久的，并且可以在意外断开连接（例如 ssh 连接超时）或故意断开连接（使用 <code>C-b d</code> 组合键）时幸免。可以使用以下方法重新连接 tmux：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tmux attach</span></span><br></pre></td></tr></table></figure><p><strong>在 tmux 中，Session 由 Client 显示在屏幕上，所有的 Session 均有单个 Server 管理。Server 和每个 Client 都是独立的进程，它们通过 /tmp 中的 socket 进行通信。</strong></p><p>不使用 tmux 时，是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/Tool/Linux/tmux-简介与使用指南/without-tmux.png" alt="without-tmux"></p><p>使用 tmux 时，是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/Tool/Linux/tmux-简介与使用指南/use-tmux.png" alt="use-tmux"></p><h1 id="安装">安装</h1><p>Ubuntu / Debian 及其衍生版只需执行以下命令即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install tmux</span><br></pre></td></tr></table></figure><p>CentOS 上安装执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install tmux</span><br></pre></td></tr></table></figure><p>如果是 Mac，则执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install tmux</span><br></pre></td></tr></table></figure><h1 id="开启你的第一个-session">开启你的第一个 Session</h1><p>对于你的的第一个 Session，你只需要简单的启动 tmux 即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux</span><br></pre></td></tr></table></figure><p>这将创建一个新的 tmux Session，底部带有一个绿色的状态栏：</p><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/Tool/Linux/tmux-简介与使用指南/first-tmux-session.png" alt="first-tmux-session"></p><p>状态栏是 tmux 的重要组成部分。除了当前打开的窗口（在左侧）之外，它还显示一些系统信息，例如日期和时间（在右侧），此外状态栏也可以自定义。</p><h1 id="分割-pane">分割 Pane</h1><p>现在，我们已经创建了第一个 Session，接着通过分屏我们可以了解 Pane。当创建新 Session 时，默认情况下，tmux 将自动为我们创建一个 Window 和 一个内部 Pane，现在我们进行分屏操作。</p><p>tmux 中的所有命令均由 <code>前缀键+命令键</code> 触发。默认情况下，tmux 使用 <code>C-b</code> 作为前缀键，<code>C-</code> 表示“按住Ctrl键”，<code>C-b</code> 表示同时按下 <code>Ctrl</code> 和 <code>b</code> 键。</p><p>将一个 Pane 分割成左右两个 Pane 的快捷键是 <code>C-b %</code>，这里前缀键为 <code>C-b</code>，命令键为 <code>%</code>，这意味着你需要同时按住 <code>Ctrl</code> 和 <code>b</code>，然后松开这两个键，最后输入 <code>%</code> 键，这样就可以将一个 Pane 垂直分割为两个 Pane 了。</p><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/Tool/Linux/tmux-简介与使用指南/split-pane.png" alt="split-pane"></p><p>想要水平分割成上下两个 Pane 则使用 <code>C-b "</code>。</p><h1 id="在-pane-间切换">在 Pane 间切换</h1><p>假如我们在新的右侧的 Pane 中了，现在想回到左侧的 Pane 可以使用 <code>C-b Left</code>，其中 <code>Left</code> 为左方向键。根据 Pane 的排布，你可以输入不同的方向键去到你想去的 Pane 中，每次输入方向键前，都需要输入前缀键 <code>C-b</code>。</p><h1 id="关闭-pane">关闭 Pane</h1><p>关闭 Pane 输入 <code>exit</code> 然后回车或直接使用快捷键 <code>C-d</code> 就可以了。</p><h1 id="创建-window">创建 Window</h1><p>tmux 中创建一个新的 Window 可以类比于创建一个新的虚拟桌面。创建一个新的 Window 很简单，只需输入 <code>C-b c</code> 就可以了。<strong>通过底部状态栏的星号，你就可以知道当前你所在的 Window 是哪个了。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/Tool/Linux/tmux-简介与使用指南/create-window.png" alt="create-window"></p><p>要切换到上一个 Window (根据状态栏中的顺序)，请使用 <code>C-b p</code>，要切换到下一个 Window，请使用 <code>C-b n</code>。如果创建了许多窗口，则使用 <code>C-b &lt;number&gt;</code> 会更加高效，其中 <code>&lt;number&gt;</code> 是指定要切换到的 Window 的前面的数字。</p><h1 id="session-管理">Session 管理</h1><p>如果你已完成或未完成你想要进行的工作，你都可以使用 <code>C-b d</code> 断开 detach 你当前的 Session，这样将会断开你的连接，但是这个 Session 仍会保留在后台中以供重新连接到该 Session 继续之前的工作。</p><p>假设你已经 detach 了你的 Session，当你想要重新连接 attach 之前 Session 时，你需要先确定是哪个 Session，通过以下命令可以查看当前所有的 Session：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux ls</span><br></pre></td></tr></table></figure><p>这将为你展示所有正在运行的会话的列表，在我们的示例中，该列表应类似于：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0: 2 windows (created Sun Nov 10 22:30:50 2019) [80x12]</span><br></pre></td></tr></table></figure><p>要连接到该会话，需要再次启动tmux，但这一次告诉它要 attach 到哪个 Session：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux attach -t 0</span><br></pre></td></tr></table></figure><p>注：<code>-t 0</code> 是告诉 tmux attach 到哪个会话的参数，"0" 是 <code>tmux ls</code> 输出的第一部分。</p><p>如果你希望为 Session 指定一个更有意义的名称（而不是以 0 开头的数字），则可以使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux new -s database</span><br></pre></td></tr></table></figure><p>这将创建一个名为 "database" 的新 Session。</p><p>你还可以重命名现有会话：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux rename-session -t 0 database</span><br></pre></td></tr></table></figure><p>下次连接到该会话时，只需使用 <code>tmux attach -t database</code>，如果一次使用多个 Session，这对于我们区分不同的 Session 很有帮助。</p><p>当你想关闭 Session 时：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux kill-session -t session-name</span><br></pre></td></tr></table></figure><h1 id="复制模式-copy-mode">复制模式 Copy Mode</h1><ol type="1"><li><p>使用 <code>C-b :</code> 进入 tmux 末行模式，设置 Copy 模式使用按键模式为 vi 模式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:setw -g mode-keys vi</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>C-b [</code> 进入 Copy 模式</p></li><li><p>按 <code>Spacebar</code> 开始选中，移动光标选择选中区域</p></li><li><p>按 <code>Enter</code> 复制选中区域内容并退出 Copy 模式</p></li><li><p>将光标移动到指定位置，使用 <code>C-b ]</code> 粘贴</p></li></ol><h1 id="tmux-常用按键">tmux 常用按键</h1><h2 id="session">Session</h2><ul><li><p>创建一个新 Session <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tmux</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux new</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux new-session</span></span><br></pre></td></tr></table></figure></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:new</span><br></pre></td></tr></table></figure></li><li><p>创建一个名为 "mysession" 的新 Session</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tmux new -s mysession</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:new -s mysession</span><br></pre></td></tr></table></figure></li><li><p>关闭或删除名为 "mysession" 的 Session</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tmux <span class="built_in">kill</span>-sess -t mysession</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux <span class="built_in">kill</span>-session -t mysession</span></span><br></pre></td></tr></table></figure></li><li><p>关闭或删除当前会话以外的所有 Session</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tmux <span class="built_in">kill</span>-session -a</span></span><br></pre></td></tr></table></figure></li><li><p>关闭或删除名为 "mysession" 会话以外的所有 Session</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tmux <span class="built_in">kill</span>-session -a -t mysession</span></span><br></pre></td></tr></table></figure></li><li><p>重命名 Session</p><p><code>C-b $</code></p></li><li><p>Detach Session</p><p><code>C-b d</code></p></li><li><p>Detach others on the Session</p><p>通过 detach 其它 client 来最大化窗口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:attach -d</span><br></pre></td></tr></table></figure></li><li><p>查看所有 Session</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tmux ls</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux list-sessions</span></span><br></pre></td></tr></table></figure><p><code>C-b s</code></p></li><li><p>Attach 到最近的 Session</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tmux a</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux at</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux attach</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux attach-session</span></span><br></pre></td></tr></table></figure></li><li><p>Attach 到名为 "mysession" 的 Session</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tmux a -t mysession</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux at -t mysession</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux attach -t mysession</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux attach-session -t mysession</span></span><br></pre></td></tr></table></figure></li><li><p>切换到上一个 Session</p><p><code>C-b (</code></p></li><li><p>切换到下一个 Session</p><p><code>C-b )</code></p></li></ul><h2 id="window">Window</h2><ul><li><p>创建一个名为 "mysession" 的新 Session 并指定创建 Window 的名称为 "mywindow"</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tmux new -s mysession -n mywindow</span></span><br></pre></td></tr></table></figure></li><li><p>创建 Window</p><p><code>C-b c</code></p></li><li><p>重命名当前 Window</p><p><code>C-b ,</code></p></li><li><p>关闭当前 Window</p><p><code>C-b &amp;</code></p></li><li><p>切换到上一个 Window</p><p><code>C-b p</code></p></li><li><p>切换到下一个 Window</p><p><code>C-b n</code></p></li><li><p>根据数字切换 Window</p><p><code>C-b 0~9</code></p></li><li><p>重新排序窗口，交换编号为 2 和 1 的窗口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:swap-window -s 2 -t 1</span><br></pre></td></tr></table></figure></li><li><p>将当前窗口向左移动一个位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:swap-window -t -1</span><br></pre></td></tr></table></figure></li></ul><h2 id="pane">Pane</h2><ul><li><p>切换到上一次活动的 Pane</p><p><code>C-b ;</code></p></li><li><p>垂直分割 Pane</p><p><code>C-b %</code></p></li><li><p>水平分割 Pane</p><p><code>C-b "</code></p></li><li><p>向左移动当前 Pane</p><p><code>C-b {</code></p></li><li><p>向右移动当前 Pane</p><p><code>C-b }</code></p></li><li><p>切换到箭头方向的 Pane</p><p><code>C-b UP</code> <code>C-b DOWN</code> <code>C-b LEFT</code> <code>C-b RIGHT</code></p></li><li><p>切换到同步 Pane（将命令发送到所有 Pane）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:setw synchronize-panes</span><br></pre></td></tr></table></figure></li><li><p>在 Pane 布局之间切换</p><p><code>C-b Spacebar</code></p></li><li><p>切换到下一个 Pane</p><p><code>C-b o</code></p></li><li><p>展示 Pane 编号</p><p><code>C-b q</code></p></li><li><p>按编号切换 Pane</p><p><code>C-b q 0~9</code></p></li><li><p>缩放当前 Pane</p><p><code>C-b z</code></p></li><li><p>将 Pane 转换成 Window</p><p><code>C-b !</code></p></li><li><p>调整当前 Pane 的高度（按住第二个键是可选的）</p><p><code>C-b-UP</code> <code>C-b C-UP</code> <code>C-b-DOWN</code> <code>C-b C-DOWN</code></p></li><li><p>调整当前 Pane 的宽度（按住第二个键是可选的）</p><p><code>C-b-LEFT</code> <code>C-b C-LEFT</code> <code>C-b-RIGHT</code> <code>C-b C-RIGHT</code></p></li><li><p>关闭当前 Pane</p><p><code>C-b x</code></p></li></ul><h2 id="copy-mode">Copy Mode</h2><ul><li><p>设置 Copy 模式下使用 vi 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:setw -g mode-keys vi</span><br></pre></td></tr></table></figure></li><li><p>进入 Copy 模式</p><p><code>C-b [</code></p></li><li><p>进入 Copy 模式并向上滚动一页</p><p><code>C-b PgUp</code></p></li><li><p>退出 Copy 模式</p><p><code>q</code></p></li><li><p>转到第一行</p><p><code>g</code></p></li><li><p>转到最后一行</p><p><code>G</code></p></li><li><p>向上滚动</p><p><code>UP</code></p></li><li><p>向下滚动</p><p><code>DOWN</code></p></li><li><p>向左移动光标</p><p><code>h</code></p></li><li><p>向下移动光标</p><p><code>j</code></p></li><li><p>向上移动光标</p><p><code>k</code></p></li><li><p>向右移动光标</p><p><code>l</code></p></li><li><p>一次将光标向前移动一个单词</p><p><code>w</code></p></li><li><p>一次将光标向后移动一个单词</p><p><code>b</code></p></li><li><p>向前搜索</p><p><code>/</code></p></li><li><p>向后搜索</p><p><code>?</code></p></li><li><p>搜索结果中，跳到下一个关键字出现位置</p><p><code>n</code></p></li><li><p>搜索结果中，跳到上一个关键字出现位置</p><p><code>N</code></p></li><li><p>开始选中内容</p><p><code>Spacebar</code></p></li><li><p>清空选中内容</p><p><code>Esc</code></p></li><li><p>复制选中内容</p><p><code>Enter</code></p></li><li><p>粘贴 buffer_0 的内容</p><p><code>C-b ]</code></p></li><li><p>展示 buffer_0 的内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:show-buffer</span><br></pre></td></tr></table></figure></li><li><p>将 Pane 中的所有可见内容复制到缓冲区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:capture-pane</span><br></pre></td></tr></table></figure></li><li><p>显示所有缓冲区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:list-buffers</span><br></pre></td></tr></table></figure></li><li><p>显示所有缓冲区并粘贴所选</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:choose-buffer</span><br></pre></td></tr></table></figure></li><li><p>将缓冲区内容保存到 buf.txt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:save-buffer buf.txt</span><br></pre></td></tr></table></figure></li><li><p>删除 buffer_1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:delete-buffer -b 1</span><br></pre></td></tr></table></figure></li></ul><h2 id="misc">Misc</h2><ul><li><p>进入命令模式</p><p><code>C-b :</code></p></li><li><p>为所有 Session 设置 OPTION</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:set -g OPTION</span><br></pre></td></tr></table></figure></li><li><p>为所有 Window 设置 OPTION</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:setw -g OPTION</span><br></pre></td></tr></table></figure></li></ul><h2 id="help">Help</h2><ul><li><p>展示快捷键帮助</p><p><code>C-b ?</code></p></li><li><p>显示当前时间</p><p><code>C-b t</code></p></li></ul><h1 id="references">References</h1><p><a href="https://www.hamvocke.com/blog/a-quick-and-easy-guide-to-tmux/" rel="external nofollow noopener noreferrer" target="_blank">https://www.hamvocke.com/blog/a-quick-and-easy-guide-to-tmux/</a></p><p><a href="https://tmuxcheatsheet.com/" rel="external nofollow noopener noreferrer" target="_blank">https://tmuxcheatsheet.com/</a></p><p><a href="https://github.com/tmux/tmux/blob/master/.github/README.md" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/tmux/tmux/blob/master/.github/README.md</a></p><p><a href="http://man.openbsd.org/OpenBSD-current/man1/tmux.1" rel="external nofollow noopener noreferrer" target="_blank">http://man.openbsd.org/OpenBSD-current/man1/tmux.1</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/wylu/cdn/post/Tool/Linux/tmux-简介与使用指南/tmux-logo.png&quot; alt=&quot;tmux-logo&quot;&gt;&lt;/p&gt;
&lt;p&gt;tmux 是一个终端复用器（terminal multiplexer），它使你能够轻松地在多个终端程序之间来回切换，同时你还可以脱离它们（它们将在后台继续运行），然后在另一个终端窗口重新连接它们。&lt;/p&gt;
&lt;p&gt;tmux 提升工作效率的两个主要功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;窗口分割。在一个终端窗口中，可以随意进行水平或垂直分割，让你在一个窗口中运行多个独立的终端实例，这样你就无需打开多个终端窗口了。通过简单的组合键，你可以轻松在多个独立运行的终端实例间进行切换。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基于会话的访问控制。在使用 SSH 工作的情况下，tmux 能避免工作现场丢失。假设在你执行某条命令的过程中，因为某些不可抗的因素（如网络问题）导致连接断开，这时你可能很难确定刚才的命令是否执行成功；又或者当你处一个较深层次的目录位置时，若 SSH 连接断开，你不得不重新进入到之前的工作目录。如果使用了 tmux，就可以在 SSH 重新连接后，连接到 tmux 之前的 session，这样就可以回到原来的工作环境。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Tool" scheme="https://wylu.me/categories/Tool/"/>
    
      <category term="Linux" scheme="https://wylu.me/categories/Tool/Linux/"/>
    
    
      <category term="tmux" scheme="https://wylu.me/tags/tmux/"/>
    
  </entry>
  
  <entry>
    <title>CGI、FastCGI、WSGI、uwsgi、uWSGI</title>
    <link href="https://wylu.me/posts/60a486d8/"/>
    <id>https://wylu.me/posts/60a486d8/</id>
    <published>2019-06-17T04:23:09.000Z</published>
    <updated>2020-04-18T06:10:32.843Z</updated>
    
    <content type="html"><![CDATA[<p>CGI、FastCGI、WSGI、uwsgi、uWSGI 的联系与区别。</p><a id="more"></a><h1 id="cgi">CGI</h1><h2 id="cgi-简介">CGI 简介</h2><p>CGI，（Common Gateway Interface）通用网关接口，是一个协议，是外部应用程序（CGI 程序）与 WEB 服务器之间的接口标准，该协议定义了 Web 服务器调用外部应用程序的时候需要输入的参数和给 Web 服务器的返回结果。</p><blockquote><p>最早的 Web 服务器简单地响应浏览器发来的 HTTP 请求，并将存储在服务器上的 HTML 文件返回给浏览器，也就是静态 html。随着不断地发展，网站也越来越复杂，所以出现动态技术。但是服务器并不能直接运行 php，asp 这样的文件，自己不能做，外包给别人吧，但是要与第三做个约定，我给你什么，然后你给我什么，就是我把请求参数发送给你，然后我接收你的处理结果给客户端。那这个约定就是 common gateway interface，简称 cgi。这个协议可以用 vb，c，php，python 来实现。cgi 只是接口协议，根本不是什么语言。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/Language/python/CGI-FastCGI-WSGI-uwsgi-uWSGI/CGI.png" alt="CGI"></p><h2 id="web-服务器与-cgi-程序的交互">Web 服务器与 CGI 程序的交互</h2><p>WEB 服务器将根据 CGI 程序的类型决定向 CGI 程序的传送数据的方式，一般是通过标准输入/输出流和环境变量来与 CGI 程序间传递数据。如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/Language/python/CGI-FastCGI-WSGI-uwsgi-uWSGI/Web服务器与CGI程序的交互.png" alt="Web服务器与CGI程序的交互"></p><p>CGI 程序通过标准输入（STDIN）和标准输出（STDOUT）来进行输入输出。此外 CGI 程序还通过环境变量来得到输入，操作系统提供了许多环境变量，它们定义了程序的执行环境，应用程序可以存取它们。Web 服务器和 CGI 接口又另外设置了一些环境变量，用来向 CGI 程序传递一些重要的参数。</p><p>常用 CGI 环境变量：</p><table><colgroup><col style="width: 20%"><col style="width: 80%"></colgroup><thead><tr class="header"><th>变量名</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>CONTENT_TYPE</td><td>这个环境变量的值指示所传递来的信息的MIME类型。目前，环境变量 CONTENT_TYPE 一般都是：application/x-www-form-urlencoded，它表示数据来自于 HTML 表单。</td></tr><tr class="even"><td>CONTENT_LENGTH</td><td>如果服务器与 CGI 程序信息的传递方式是 POST，这个环境变量即使从标准输入 STDIN 中可以读到的有效数据的字节数。这个环境变量在读取所输入的数据时必须使用。</td></tr><tr class="odd"><td>HTTP_COOKIE</td><td>客户机内的 COOKIE 内容。</td></tr><tr class="even"><td>HTTP_USER_AGENT</td><td>提供包含了版本数或其他专有数据的客户浏览器信息。</td></tr><tr class="odd"><td>PATH_INFO</td><td>这个环境变量的值表示紧接在 CGI 程序名之后的其他路径信息。它常常作为 CGI 程序的参数出现。</td></tr><tr class="even"><td>QUERY_STRING</td><td>如果服务器与 CGI 程序信息的传递方式是 GET，这个环境变量的值即使所传递的信息。这个信息经跟在 CGI 程序名的后面，两者中间用一个问号'?'分隔。</td></tr><tr class="odd"><td>REMOTE_ADDR</td><td>这个环境变量的值是发送请求的客户机的 IP 地址，例如上面的 192.168.1.67。这个值总是存在的。而且它是 Web 客户机需要提供给 Web 服务器的唯一标识，可以在 CGI 程序中用它来区分不同的 Web 客户机。</td></tr><tr class="even"><td>REMOTE_HOST</td><td>这个环境变量的值包含发送 CGI 请求的客户机的主机名。如果不支持你想查询，则无需定义此环境变量。</td></tr><tr class="odd"><td>REQUEST_METHOD</td><td>提供脚本被调用的方法。对于使用 HTTP/1.0 协议的脚本，仅 GET 和 POST 有意义。</td></tr><tr class="even"><td>SCRIPT_FILENAME</td><td>CGI 脚本的完整路径</td></tr><tr class="odd"><td>SCRIPT_NAME</td><td>CGI 脚本的的名称</td></tr><tr class="even"><td>SERVER_NAME</td><td>这是你的 WEB 服务器的主机名、别名或 IP 地址。</td></tr><tr class="odd"><td>SERVER_SOFTWARE</td><td>这个环境变量的值包含了调用 CGI 程序的 HTTP 服务器的名称和版本号。例如，上面的值为 Apache/2.2.14(Unix)</td></tr></tbody></table><h2 id="cgi-工作原理">CGI 工作原理</h2><p>每当客户请求 CGI 的时候，WEB 服务器就请求操作系统生成一个新的 CGI 解释器进程(如 php-cgi.exe)，CGI 的一个进程则处理完一个请求后退出，下一个请求来时再创建新进程。当然，这样在访问量很少没有并发的情况也行。但当访问量增大，并发存在，这种方式就不适合了，于是就有了 FastCGI。</p><h1 id="fastcgi">FastCGI</h1><h2 id="fastcgi-简介">FastCGI 简介</h2><p>CGI 的一个扩展，像是一个常驻(long-live)型的 CGI ，废除了 CGI fork-and-execute （来一个请求 fork 一个新进程处理，处理完再把进程 kill 掉）的工作方式，转而使用一种长生存期的方法，减少了进程消耗，提升了性能。</p><h2 id="fastcgi-工作原理">FastCGI 工作原理</h2><ul><li>（1）Web Server 启动时载入 FastCGI 进程管理器（IIS ISAPI 或 Apache Module)</li><li>（2）FastCGI 进程管理器自身初始化，启动多个 CGI 解释器进程(可见多个 php-cgi)并等待来自 Web Server 的连接。</li><li>（3）当客户端请求到达 Web Server 时，FastCGI 进程管理器选择并连接到一个 CGI 解释器。Web server 将 CGI 环境变量和标准输入发送到 FastCGI 子进程 php-cgi。</li><li>（4）FastCGI 子进程完成处理后将标准输出和错误信息从同一连接返回 Web Server。当 FastCGI 子进程关闭连接时，请求便被告知处理完成。FastCGI 子进程接着等待并处理来自 FastCGI 进程管理器(运行在 Web Server 中)的下一个连接。在 CGI 模式中， php-cgi 在此便退出了。</li></ul><h1 id="wsgi">WSGI</h1><p>WSGI，（WEB SERVER GATEWAY INTERFACE），Web 服务器网关接口，是一种 Web 服务器网关接口，它是一个 Web 服务器（如 Nginx，uWSGI 等服务器）与 web 应用（如 Flask 框架写的程序）通信的一种规范。</p><p>当前运行在 WSGI 协议之上的 Web 框架有 Bottle，Flask，Django</p><h1 id="uwsgi">uwsgi</h1><p>uwsgi 是一种线路协议，是 uWSGI 服务器的独占协议，用于定义传输信息的类型（type of information），每一个 uwsgi packet 前4 byte 为传输信息类型的描述，与 WSGI 协议是两种东西。</p><blockquote><p>对于 uwsgi，个人比较认同 <a href="https://baijiahao.baidu.com/s?id=1590941335729952485&amp;wfr=spider&amp;for=pc" rel="external nofollow noopener noreferrer" target="_blank">https://baijiahao.baidu.com/s?id=1590941335729952485&amp;wfr=spider&amp;for=pc</a> 的观点，"它是用于前端服务器与 uwsgi 的通信规范，相当于 FastCGI 的作用"。</p></blockquote><h1 id="uwsgi-1">uWSGI</h1><p>uWSGI 是一个 Web 服务器，它实现了 WSGI 协议、uwsgi、http等协议。</p><p>uWSGI 也可以当做中间件。</p><ul><li>如果是 Nginx+uWSGI+App，那 uWSGI 就是一个中间件</li><li>如果是 uWSGI+App，那它就是服务器</li></ul><h1 id="区分-wsgiuwsgiuwsgi">区分 WSGI、uwsgi、uWSGI</h1><ul><li>WSGI 是一种通信协议</li><li>uwsgi 是一种通信协议，常用于在 uWSGI 服务器与其他网络服务器的数据通信</li><li>而 uWSGI 是实现了 uwsgi 和 WSGI 两种协议的Web服务器</li></ul><blockquote><p>百度百科上说 uwsgi 是一种线路协议而不是通信协议，个人更倾向于 uwsgi 是类似 WSGI 的通信协议的说法，uwsgi 和 WSGI 都是基于 CGI 扩展出来的。</p></blockquote><h1 id="这些名词的关系">这些名词的关系</h1><p>假设我们使用 python 的 Django 框架写了一个网站，现在要将它挂在网上运行，我们一般需要：</p><ul><li>Nginx 做为代理服务器：负责静态资源发送（js、css、图片等）、动态请求转发以及结果的回复。</li><li>uWSGI 做为后端服务器：负责接收 Nginx 转发的请求并处理后发给 Django 应用以及接收 Django 应用返回信息转发给 Nginx。</li><li>Django 应用收到请求后处理数据并渲染相应的返回页面给 uWSGI 服务器。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/Language/python/CGI-FastCGI-WSGI-uwsgi-uWSGI/这些名词的关系.png" alt="这些名词的关系"></p><h1 id="有-uwgsi-了-django-为什么还需要-nginx">有 uWGSI 了 Django 为什么还需要 Nginx</h1><p>Nginx 是一个 HTTP 和反向代理服务器</p><ul><li><p>正向代理</p><p>正向的就是由浏览器主动的想代理服务器发出请求，经代理服务器做出处理后再转给目标服务器</p></li><li><p>反向代理</p><p>反向的就是不管浏览器同不同意，请求都会经过代理服务器处理再发给目标服务器</p></li></ul><blockquote><p>更多关于正向代理和反向代理的内容可参考：</p><p><a href="https://www.cnblogs.com/Anker/p/6056540.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/Anker/p/6056540.html</a></p></blockquote><p>使用 Nginx 作为反向代理服务器的好处：</p><ul><li><p>安全</p><p>不管什么请求都要经过代理服务器，可以避免外部程序直接攻击 Web 服务器</p></li><li><p>负载均衡</p><p>根据请求情况和服务器负载情况，将请求分配给不同的 Web 服务器，保证服务器性能</p></li><li><p>提高 Web 服务器的 IO 性能</p><p>请求从客户端传到 Web 服务器是需要时间的，传递多长时间就会让这个进程阻塞多长时间，而通过反向代理，就可以由反向代理完整接受该请求，然后再传给 Web 服务器，从而保证服务器性能，而且有的一些简单的事情（比如静态文件）可以直接由反向代理处理，不经过 Web 服务器</p></li></ul><h1 id="references">References</h1><p><a href="https://www.cnblogs.com/wanghetao/p/3934350.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/wanghetao/p/3934350.html</a></p><p><a href="https://baike.baidu.com/item/fastcgi/10880685" rel="external nofollow noopener noreferrer" target="_blank">https://baike.baidu.com/item/fastcgi/10880685</a></p><p><a href="https://www.jianshu.com/p/679dee0a4193" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/679dee0a4193</a></p><p><a href="https://baijiahao.baidu.com/s?id=1590941335729952485&amp;wfr=spider&amp;for=pc" rel="external nofollow noopener noreferrer" target="_blank">https://baijiahao.baidu.com/s?id=1590941335729952485&amp;wfr=spider&amp;for=pc</a></p><p><a href="https://blog.csdn.net/qq_35318838/article/details/61198183" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/qq_35318838/article/details/61198183</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CGI、FastCGI、WSGI、uwsgi、uWSGI 的联系与区别。&lt;/p&gt;
    
    </summary>
    
      <category term="Language" scheme="https://wylu.me/categories/Language/"/>
    
      <category term="python" scheme="https://wylu.me/categories/Language/python/"/>
    
    
      <category term="python" scheme="https://wylu.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>常见HTTP状态码</title>
    <link href="https://wylu.me/posts/25bce1a2/"/>
    <id>https://wylu.me/posts/25bce1a2/</id>
    <published>2019-06-10T06:49:43.000Z</published>
    <updated>2020-01-12T09:42:03.908Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81" rel="external nofollow noopener noreferrer" target="_blank">HTTP 状态码（HTTP Status Code）</a>是用以表示网页服务器超文本传输协议响应状态的 3 位数字代码。它由 RFC 2616 规范定义的，并得到 RFC 2518、RFC 2817、RFC 2295、RFC 2774 与 RFC 4918 等规范扩展。所有状态码的第一个数字代表了响应的五种状态之一。所示的消息短语是典型的，但是可以提供任何可读取的替代方案。除非另有说明，状态码是HTTP / 1.1标准（RFC 7231）的一部分。</p><a id="more"></a><h1 id="状态码的作用">状态码的作用</h1><p>HTTP 状态码的核心作用是 Web Server 用来告诉客户端，当前的网页请求发生了什么事，或者是当前 Web 服务器的响应状态。所以HTTP 状态码常用来判断和分析当前 Web 服务器的运行状况。</p><p>状态码位于 HTTP Response 的第一行中，会返回一个"三位数字的状态码"和一个"状态消息"。"三位数字的状态码"便于程序进行处理， "状态消息"便于人理解。</p><h1 id="http-状态码分类"><a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE#%E7%8A%B6%E6%80%81%E7%A0%81" rel="external nofollow noopener noreferrer" target="_blank">HTTP 状态码分类</a></h1><table><thead><tr class="header"><th>状态码</th><th>响应类别</th><th>原因短语</th></tr></thead><tbody><tr class="odd"><td>1XX</td><td>消息（Informational）</td><td>请求已被服务器接收，继续处理</td></tr><tr class="even"><td>2XX</td><td>成功（Success）</td><td>请求已成功被服务器接收、理解、并接受</td></tr><tr class="odd"><td>3XX</td><td>重定向（Redirection）</td><td>需要后续操作才能完成这一请求</td></tr><tr class="even"><td>4XX</td><td>请求错误（Client Error）</td><td>请求含有词法错误或者无法被执行</td></tr><tr class="odd"><td>5XX</td><td>服务器错误（Server Error）</td><td>服务器在处理某个正确请求时发生错误</td></tr></tbody></table><h1 id="常见状态码">常见状态码</h1><h2 id="xx-信息性">1XX 信息性</h2><p>这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。由于 HTTP/1.0 协议中没有定义任何 1xx 状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送 1xx 响应。这些状态码代表的响应都是信息性的，标示客户应该采取的其他行动。</p><ul><li><p>100 Continue</p><p>这个临时响应是用来通知客户端它的请求头已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求主体，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。</p></li><li><p>101 Switching Protocols</p><p>服务器已经理解了客户端的请求，并将通过 Upgrade 消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在 Upgrade 消息头中定义的那些协议。</p><p>只有在切换新的协议更有好处的时候才应该采取类似措施。例如，切换到新的 HTTP 版本比旧版本更有优势，或者切换到一个实时且同步的协议（如WebSocket）以传送利用此类特性的资源。</p></li><li><p>102 Processing</p><p>WebDAV 请求可能包含许多涉及文件操作的子请求，需要很长时间才能完成请求。该代码表示​​服务器已经收到并正在处理请求，但无响应可用。这样可以防止客户端超时，并假设请求丢失。</p></li></ul><h2 id="xx-成功">2XX 成功</h2><p>这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。</p><ul><li><p>200 OK</p><p>请求已成功，请求所希望的响应头或数据体将随此响应返回。实际的响应将取决于所使用的请求方法。在 GET 请求中，响应将包含与请求的资源相对应的实体。在 POST 请求中，响应将包含描述或操作结果的实体。</p></li><li><p>204 No Content</p><p>服务器成功处理了请求，没有返回任何内容。</p><p>浏览器向服务器发送请求后收到了 204，那么浏览器页面不会发生更新，一般用在只是客户端向服务器发送信息，而服务器不用向客户端返回什么信息的情况。</p></li><li><p>206 Partial Content</p><p>服务器已经成功处理了部分 GET 请求。类似于 FlashGet 或者迅雷这类的 HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。</p></li></ul><h2 id="xx-重定向">3XX 重定向</h2><p>这类状态码代表需要客户端采取进一步的操作才能完成请求。通常，这些状态码用来重定向，后续的请求地址（重定向目标）在本次响应的 Location 域中指明。</p><ul><li><p>301 Moved Permanently</p><p>永久重定向，表示请求的资源已经永久的搬到了其他位置。</p><p>就是说资源已经被分配了新的 URI，新的永久性的 URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI 的超链接及简短说明。</p></li><li><p>302 Found</p><p>临时重定向，表示请求的资源临时搬到了其他位置。</p><p>请求的资源暂时被配到到了新的 URI 和301很像，只不过资源是临时移动，资源在将来可能还会改变；同样地，新的临时性的 URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI 的超链接及简短说明。</p></li><li><p>303 See Other</p><p>表示请求资源存在另一个 URI，应使用 GET 定向获取请求资源。</p><p>303 功能与 302 一样，区别只是 303 明确客户端应该使用 GET访问。</p><p>注意：许多HTTP/1.1版以前的浏览器不能正确理解303状态。如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。</p></li><li><p>304 Not Modified</p><p>表示资源在由请求头中的 If-Modified-Since 或 If-None-Match 参数指定的这一版本之后，未曾被修改。在这种情况下，由于客户端仍然具有以前下载的副本，因此不需要重新传输资源。虽然 304 被划分在 3XX，但和重定向并没有关系。</p></li><li><p>307 Temporary Redirect</p><p>临时重定向，和 302 有着相同含义。</p><p>尽管 302 标准禁止 POST 变为 GET，但没人听他的，而 307 就会遵照标准，不会从 POST 变为 GET，但处理响应行为，各个浏览器可能不同。</p></li></ul><h2 id="xx-客户端错误">4XX 客户端错误</h2><p>这类的状态码代表了客户端看起来可能发生了错误，妨碍了服务器的处理。除非响应的是一个 HEAD 请求，否则服务器就应该返回一个解释当前错误状况的实体，以及这是临时的还是永久性的状况。这些状态码适用于任何请求方法。浏览器应当向用户显示任何包含在此类错误响应中的实体内容。</p><ul><li><p>400 Bad Request</p><p>由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求。</p></li><li><p>401 Unauthorized</p><p>该状态码表示当前请求需要用户验证。该响应必须包含一个适用于被请求资源的 WWW-Authenticate 信息头用以询问用户信息。客户端可以重复提交一个包含恰当的 Authorization 头信息的请求。如果当前请求已经包含了 Authorization 证书，那么 401 响应代表着服务器验证已经拒绝了那些证书。如果 401 响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。</p><p>注意：当网站（通常是网站域名）禁止IP地址时，有些网站状态码显示的 401，表示该特定地址被拒绝访问网站。</p></li><li><p>403 Forbidden</p><p>服务器已经理解请求，但是拒绝执行它。与 401 响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个 HEAD 请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个 404 响应，假如它不希望让客户端获得任何信息。</p></li><li><p>404 Not Found</p><p>请求失败，请求所希望得到的资源未被在服务器上发现，但允许用户的后续请求。没有信息能够告诉用户这个状况到底是暂时的还是永久的。404 这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。</p></li></ul><h2 id="xx-服务器错误">5XX 服务器错误</h2><p>表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。除非这是一个 HEAD 请求，否则服务器应当包含一个解释当前错误状态以及这个状况是临时的还是永久的解释信息实体。浏览器应当向用户展示任何在当前响应中被包含的实体。这些状态码适用于任何响应方法。</p><ul><li><p>500 Internal Server Error</p><p>通用错误消息，服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。没有给出具体错误信息。可能是 Web 应用有 bug 或临时故障，更有可能是服务器源代码有 bug。</p></li><li><p>503 Service Unavailable</p><p>由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是暂时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个 Retry-After 头用以标明这个延迟时间。如果没有给出这个 Retry-After 信息，那么客户端应当以处理 500 响应的方式处理它。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;HTTP 状态码（HTTP Status Code）&lt;/a&gt;是用以表示网页服务器超文本传输协议响应状态的 3 位数字代码。它由 RFC 2616 规范定义的，并得到 RFC 2518、RFC 2817、RFC 2295、RFC 2774 与 RFC 4918 等规范扩展。所有状态码的第一个数字代表了响应的五种状态之一。所示的消息短语是典型的，但是可以提供任何可读取的替代方案。除非另有说明，状态码是HTTP / 1.1标准（RFC 7231）的一部分。&lt;/p&gt;
    
    </summary>
    
      <category term="Network" scheme="https://wylu.me/categories/Network/"/>
    
    
      <category term="Http" scheme="https://wylu.me/tags/Http/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="https://wylu.me/posts/f1601c3e/"/>
    <id>https://wylu.me/posts/f1601c3e/</id>
    <published>2019-06-10T04:11:43.000Z</published>
    <updated>2020-01-12T09:42:03.904Z</updated>
    
    <content type="html"><![CDATA[<p>在软件工程中，<a href="https://en.wikipedia.org/wiki/Singleton_pattern" rel="external nofollow noopener noreferrer" target="_blank">单例模式</a> 是一种软件设计模式，它将类的实例化限制为一个“单个”实例。当恰好需要一个对象来协调整个系统中的操作时，这是非常有用的。这个术语来自于单例的数学概念。单例模式中的“单例”通常用来代表那些本质上具有唯一性的系统组件（或者叫做资源），比如文件系统、资源管理器等等。</p><a id="more"></a><p>原文请看 刘望舒 博客 <a href="https://blog.csdn.net/itachi85/article/details/50510124" rel="external nofollow noopener noreferrer" target="_blank">设计模式（二）单例模式的七种写法</a></p><h1 id="饿汉式">饿汉式</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式在类加载时就完成了初始化，所以类加载较慢，但获取对象的速度快，这种基于类加载机制的方式避免了多线程的同步问题。</p><h1 id="懒汉式线程不安全">懒汉式（线程不安全）</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>懒汉模式声明了一个静态对象，在用户第一次调用时进行初始化，虽然节约了资源，但第一次加载时需要实例化，反应稍慢，而且多线程下不能保证唯一单例。</p><h1 id="懒汉式线程安全">懒汉式（线程安全）</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程安全，但是每次调用 getInstance 方法时都需要进行同步，造成不必要的同步开销，而且大部分时候是不需要同步的，所以不建议用这种模式。</p><h1 id="双重检查加锁dcl">双重检查加锁（DCL）</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton singleton;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span> (singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法在 getInstance 方法中对 singleton 进行了两次判空，第一字是为了不必要的同步，第二次是在 singleton 等于 null 的情况下才创建实例。</p><p>DCL 优点是资源利用率高，第一次执行 getInstance 时单例对象才被实例化，效率高。缺点是第一次加载时反应稍慢，在高并发环境下也有一定的缺陷，虽然发生的概率很小。</p><p>DCL 虽然在一定程度解决了资源的消耗和多余的同步，线程安全等问题，但在某些情况也会出现失效的问题，也就是 DCL 失效，在《java并发编程实践》中建议用 <strong>静态内部类单例模式</strong> 来替代 DCL。</p><h1 id="静态内部类单例模式">静态内部类单例模式</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.singleton;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一次加载 Singleton 类时并不会初始化 singleton，只要第一次调用 getInstance 方法时，虚拟机才加载 SingletonHolder 并初始化 singleton，这样不仅能确保线程安全也能保证 Singleton 类的唯一性，所以推荐使用静态内部类单例模式。</p><h1 id="枚举单例">枚举单例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">anyMethod</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认枚举实例的创建是线程安全的，并且在任何情况下都是单例.</p><p>而上述讲的几种单例模式实现中，有一种情况下他们会重新创建对象，那就是反序列化，将一个单例实例对象写到磁盘再读回来，从而获得了一个实例。</p><p>反序列化操作提供了 readResolve 方法，这个方法可以让开发人员控制对象的反序列化。在上述的几个方法示例中如果要杜绝单例对象被反序列化是重新生成对象，就必须加入如下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException</span>&#123;</span><br><span class="line"><span class="keyword">return</span> singleton;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举单例的优点就是简单，但是大部分应用开发很少用枚举。</p><h1 id="references">References</h1><p><a href="https://en.wikipedia.org/wiki/Singleton_pattern" rel="external nofollow noopener noreferrer" target="_blank">https://en.wikipedia.org/wiki/Singleton_pattern</a></p><p><a href="https://blog.csdn.net/itachi85/article/details/50510124" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/itachi85/article/details/50510124</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在软件工程中，&lt;a href=&quot;https://en.wikipedia.org/wiki/Singleton_pattern&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;单例模式&lt;/a&gt; 是一种软件设计模式，它将类的实例化限制为一个“单个”实例。当恰好需要一个对象来协调整个系统中的操作时，这是非常有用的。这个术语来自于单例的数学概念。单例模式中的“单例”通常用来代表那些本质上具有唯一性的系统组件（或者叫做资源），比如文件系统、资源管理器等等。&lt;/p&gt;
    
    </summary>
    
      <category term="CS" scheme="https://wylu.me/categories/CS/"/>
    
      <category term="SE" scheme="https://wylu.me/categories/CS/SE/"/>
    
      <category term="DesignPattern" scheme="https://wylu.me/categories/CS/SE/DesignPattern/"/>
    
    
      <category term="DesignPattern" scheme="https://wylu.me/tags/DesignPattern/"/>
    
  </entry>
  
  <entry>
    <title>UML类关系</title>
    <link href="https://wylu.me/posts/2f907c09/"/>
    <id>https://wylu.me/posts/2f907c09/</id>
    <published>2019-06-10T03:44:14.000Z</published>
    <updated>2020-04-18T06:10:32.855Z</updated>
    
    <content type="html"><![CDATA[<p>设计模式之依赖、关联、聚合、组合关系的区别与联系。</p><a id="more"></a><h1 id="泛化关系">泛化关系</h1><p>对于面向对象编程语言，UML 中所说的泛化关系（Generalization）就是指类的继承关系。</p><p>如果一个类是另一个类的子类，那么 UML 通过使用一个实线连接两个类的 UML 图来表示二者之间的继承关系，实线的起始端是子类，终点端是父类，终点端使用一个空心的三角形表示实线的结束。</p><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/CS/SE/DesignPattern/UML类关系/generalization.png" alt="generalization"></p><h1 id="实现关系">实现关系</h1><p>如果一个类实现了一个接口，那么类和接口的关系是实现关系（Realization）。</p><p>UML 通过使用虚线连接类和它所实现的接口，虚线的起始端是类，终点端是它实现的接口，终点端使用一个空心的三角形表示虚线的结束。</p><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/CS/SE/DesignPattern/UML类关系/realization.png" alt="realization"></p><h1 id="依赖关系">依赖关系</h1><p>如果 A 类中 <strong>某个方法的参数</strong> 用 B 类来声明的变量或某个方法返回的数据类型是 B 类型的，那么 A 和 B 的关系是依赖关系（Dependency），称 A 依赖于 B。</p><blockquote><p>在 java 中，依赖表现为：局部变量，方法中的参数和对静态方法的调用。</p></blockquote><p>如果 A 依赖于 B，那么 UML 通过使用一个虚线连接 A 和 B，虚线的起始端是 A，终点端是 B，终点端使用一个指向 B 的方向箭头表示虚线的结束。</p><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/CS/SE/DesignPattern/UML类关系/dependency.png" alt="dependency"></p><h1 id="关联关系">关联关系</h1><p>如果 A 类的成员变量是用 B 类来声明的变量，那么 A 和 B 的关系是关联关系（Association），称 A 关联与 B。</p><blockquote><p>在 Java 语言中，关联关系一般使用成员变量来实现。</p></blockquote><p>如果 A 关联与 B，那么 UML 通过使用一个实线连接 A 和 B，实线的起始端是 A，终点端是 B，终点端使用一个指向 B 的方向箭头表示实线的结束。</p><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/CS/SE/DesignPattern/UML类关系/association.png" alt="association"></p><h2 id="聚合关系">聚合关系</h2><p>聚合（Aggregation）关系是关联关系的一种，是整体和个体之间的关系，如雁群和大雁的关系，即 <strong>has-a</strong> 关系。</p><p>在聚合关系中，两个类时处在不平等层次上的，一个代表整体，一个代表个体。</p><blockquote><p>在 Java 中，与关联关系一样，聚合关系也是通过成员变量实现的。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/CS/SE/DesignPattern/UML类关系/aggregation.png" alt="aggregation"></p><h2 id="组合关系">组合关系</h2><p>组合（Composition）关系是关联关系的一种，是整体与部分的关系，这里的整体与部分是不可分的，如大雁和翅膀的关系，即 <strong>contains-a</strong> 关系。</p><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/CS/SE/DesignPattern/UML类关系/composition.png" alt="composition"></p><h1 id="耦合度强弱">耦合度强弱</h1><p>耦合度由弱至强：</p><p><strong>依赖关系 &lt; 关联关系 &lt; 聚合关系 &lt; 组合关系</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;设计模式之依赖、关联、聚合、组合关系的区别与联系。&lt;/p&gt;
    
    </summary>
    
      <category term="CS" scheme="https://wylu.me/categories/CS/"/>
    
      <category term="SE" scheme="https://wylu.me/categories/CS/SE/"/>
    
      <category term="DesignPattern" scheme="https://wylu.me/categories/CS/SE/DesignPattern/"/>
    
    
      <category term="DesignPattern" scheme="https://wylu.me/tags/DesignPattern/"/>
    
  </entry>
  
  <entry>
    <title>模拟实现请求分页虚存页面替换算法</title>
    <link href="https://wylu.me/posts/a3679bbe/"/>
    <id>https://wylu.me/posts/a3679bbe/</id>
    <published>2019-06-08T12:09:54.000Z</published>
    <updated>2020-04-18T06:10:32.879Z</updated>
    
    <content type="html"><![CDATA[<p>请求分页虚存管理在地址映射过程中，若页表中发现所要访问的页不在主存，则产生缺页异常，操作系统接到此信号后，就调出缺页异常处理程序，根据页表中给出的磁盘地址，将该页面调入主存，是作业继续运行下去。如果主存中有空闲块，则分配一个页框，将新调入页面装入，并修改页表中相应页表项的驻留位及相应的主存块号；若此时主存中没有空闲块，则要淘汰某页面，若该页在此期间被修改过，要将其先写回磁盘，这个过程就是页面替换。</p><p>页面替换算法是虚拟存储管理实现的关键，好的算法能够减少和避免“颠簸”现象，本文在模拟实现 FIFO，LRU 和 OPT 几种经典页面替换算法的基础上，比较各种替换算法的效率及优缺点，从而了解虚拟存储实现的过程，理解内存页面调度的机制。</p><a id="more"></a><h1 id="数据结构设计">数据结构设计</h1><ol type="1"><li>在请求分页虚存页面替换算法中，为实现从请求页到主存块的替换，需要在模拟程序中维护两个数据结构，即请求页面队列和主存块队列。</li><li>请求页面队列为进程所用，记录当前进程请求的页面块信息。</li><li>主存队列由系统维护，该队列保存当前系统中各主存块的状态（包括最后访问时间、闲忙状态等）。</li><li>以这两个数据结构为基础，实现各种替换算法，在系统中为用户请求寻找物理块。</li><li>本项目设计含有以下功能：<ul><li>接收用户输入参数，包括程序长度（页面数）、页框个数及页面访问序列。</li><li>程序结果采用不同的标志区分命中、替换及直接加入空闲块。</li><li>实现 OPT、FIFO、LRU 等替换算法，并显示算法对应替换页面的过程。</li><li>计算各种页面替换算法的缺页中断率。</li></ul></li></ol><h1 id="程序设计">程序设计</h1><h2 id="页面替换算法基本思路">页面替换算法基本思路</h2><p>本程序并没有进入系统空间对实际进程页面进行控制，而是在用户空间用线性表的连续存储方式对进程页面替换进行模拟。</p><ol type="1"><li><p>最佳页面替换算法（OPT）</p><p>淘汰以后不再需要的或者最远的将来才会用到的页面。</p></li><li><p>先进先出页面替换算法（FIFO）</p><p>淘汰最先调入主存的页面，或者说在主存中驻留时间最长的那一页。</p></li><li><p>最近最少使用页面替换算法（LRU）</p><p>淘汰在最近一段时间里较久未被访问的页面。它是根据程序执行时所具有的局部性来考虑的，即那些刚被使用过的页面可能马上还要被使用，而那些在较长时间里未被使用的页面一般可能不会马上使用。</p></li></ol><h2 id="请求页面队列">请求页面队列</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Page</span> &#123;</span> <span class="comment">// 页面</span></span><br><span class="line">    <span class="keyword">int</span> pageID;     <span class="comment">//页号</span></span><br><span class="line">&#125; Page;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PageQueue</span> &#123;</span> <span class="comment">//页面队列</span></span><br><span class="line">    Page page;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">PageQueue</span> *<span class="title">next</span>;</span> <span class="comment">//下一页面</span></span><br><span class="line">&#125; PageQueue;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">process</span> &#123;</span> <span class="comment">// 进程结构</span></span><br><span class="line">    PageQueue pages; <span class="comment">//页面</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> pageLength; <span class="comment">// 页面数</span></span><br><span class="line">&#125; process;<span class="comment">//进程</span></span><br></pre></td></tr></table></figure><h2 id="主存块队列">主存块队列</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Block</span> &#123;</span> <span class="comment">//块记录结构</span></span><br><span class="line">    Page *page; <span class="comment">//页面</span></span><br><span class="line">    <span class="keyword">long</span> time; <span class="comment">//最后访问时间</span></span><br><span class="line">    <span class="keyword">int</span> state; <span class="comment">//页块是否空闲</span></span><br><span class="line">&#125; Block;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">BlockQueue</span> &#123;</span> <span class="comment">//块队列</span></span><br><span class="line">    Block block;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">BlockQueue</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; BlockQueue;</span><br></pre></td></tr></table></figure><h2 id="进程">进程</h2><p>初始化进程以及进程需要访问的页面的序列，这里仅仅展示了进程接收输入序列作为页面访问序列的代码，本程序还提供了由系统自动生成的页面访问序列，可以指定访问页面的最大序号。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">PageQueue *<span class="title">InitializePageQueueWithInput</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> pageLength)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化页面，把首地址返回。如果分配失败，返回NULL</span></span><br><span class="line">    PageQueue *head = <span class="literal">NULL</span>, *p = <span class="literal">NULL</span>, *q = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pageLength; i++) &#123;</span><br><span class="line">        p = (PageQueue *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PageQueue));</span><br><span class="line">        p-&gt;page.pageID = pages[i];</span><br><span class="line">        p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, p-&gt;page.pageID);</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span>) head = p;</span><br><span class="line">        <span class="keyword">else</span> q-&gt;next = p;</span><br><span class="line">        q = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitializeProcessWithInput</span><span class="params">(process *proc, <span class="keyword">unsigned</span> <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化进程，接收手动输入的页面访问序列</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"进程初始化：\n"</span>);</span><br><span class="line">    proc-&gt;pageLength = pageSize;</span><br><span class="line">    proc-&gt;pages.next = InitializePageQueueWithInput(pageSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随机生成页面访问序列</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">PageQueue *<span class="title">InitializePageQueue</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> pageLength, <span class="keyword">int</span> maxPageID)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化页面，把首地址返回。如果分配失败，返回NULL</span></span><br><span class="line">    srand(<span class="number">100</span>);</span><br><span class="line">    PageQueue *head = <span class="literal">NULL</span>, *p = <span class="literal">NULL</span>, *q = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pageLength; i++) &#123;</span><br><span class="line">        p = (PageQueue *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PageQueue));</span><br><span class="line">        p-&gt;page.pageID = rand() % (maxPageID + <span class="number">1</span>);</span><br><span class="line">        p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, p-&gt;page.pageID);</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span>) head = p;</span><br><span class="line">        <span class="keyword">else</span> q-&gt;next = p;</span><br><span class="line">        q = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主存">主存</h2><p>接收用户输入参数，作为初始化主存的块数，也即页框数，使用一个单向链表模拟实现主存。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BlockQueue *<span class="title">InitializeBlockQueue</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化主存块，把首地址返回，如果分配失败返回NULL</span></span><br><span class="line">    BlockQueue *block = <span class="literal">NULL</span>, *p = <span class="literal">NULL</span>, *q = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        p = (BlockQueue *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BlockQueue));</span><br><span class="line">        p-&gt;block.time = <span class="number">0</span>;</span><br><span class="line">        p-&gt;block.state = <span class="number">0</span>;</span><br><span class="line">        p-&gt;block.page = <span class="literal">NULL</span>;</span><br><span class="line">        p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span> (block == <span class="literal">NULL</span>) block = p;</span><br><span class="line">        <span class="keyword">else</span> q-&gt;next = p;</span><br><span class="line">        q = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主存队列的维护">主存队列的维护</h2><p>这里只展示主存队列一些重要操作的代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BlockQueue *<span class="title">SearchPage</span><span class="params">(BlockQueue *blockQueue, Page page)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//搜索特定页面,根据页面ID进行匹配</span></span><br><span class="line">    BlockQueue *p = blockQueue;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;block.page != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;block.page-&gt;pageID == page.pageID)</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BlockQueue *<span class="title">SearchIdleBlock</span><span class="params">(BlockQueue *blockQueue)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//搜索空闲块</span></span><br><span class="line">    BlockQueue *p = blockQueue;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;block.state == IDLE) <span class="keyword">return</span> p;</span><br><span class="line">        <span class="keyword">else</span> p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BlockQueue *<span class="title">GetOldestBlock</span><span class="params">(BlockQueue *blockQueue)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//取得主存中停留最久的页面，返回它的地址</span></span><br><span class="line">    BlockQueue *p = blockQueue, *oldestAddr;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) <span class="keyword">return</span> p;</span><br><span class="line">    <span class="keyword">long</span> oldest = p-&gt;block.time;</span><br><span class="line">    oldestAddr = p;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;block.time &lt; oldest) &#123;</span><br><span class="line">            oldest = p-&gt;block.time;</span><br><span class="line">            oldestAddr = p;</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> oldestAddr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BlockQueue *<span class="title">GetLongestWithoutAccess</span><span class="params">(BlockQueue *blockQueue, PageQueue *currentPage)</span></span>&#123;</span><br><span class="line">    <span class="comment">//获取主存中最长时间将不会被访问的页面，返回其地址</span></span><br><span class="line">    BlockQueue *p = blockQueue, *longestAddr;</span><br><span class="line">    PageQueue *q = currentPage-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) <span class="keyword">return</span> p;</span><br><span class="line">    longestAddr = p;</span><br><span class="line">    <span class="keyword">int</span> max_count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(q != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;block.page-&gt;pageID == q-&gt;page.pageID) <span class="keyword">break</span>;</span><br><span class="line">            q = q-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count &gt; max_count)&#123;</span><br><span class="line">            max_count = count;</span><br><span class="line">            longestAddr = p;</span><br><span class="line">        &#125;</span><br><span class="line">        q = currentPage-&gt;next;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> longestAddr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="opt">OPT</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OPT</span><span class="params">(BlockQueue *blockQueue,process *proc)</span></span>&#123;</span><br><span class="line">    <span class="comment">//最佳页面替换算法</span></span><br><span class="line">    PageQueue *currentPage = proc-&gt;pages.next;</span><br><span class="line">    <span class="keyword">while</span> (currentPage != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (SearchPage(blockQueue, currentPage-&gt;page) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            PrintBlockList(blockQueue, currentPage-&gt;page.pageID, COLOR_Exist);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            BlockQueue *idleBlock = SearchIdleBlock(blockQueue);</span><br><span class="line">            <span class="keyword">if</span> (idleBlock != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                idleBlock-&gt;block.state = BUSY;</span><br><span class="line">                idleBlock-&gt;block.time = Time++;</span><br><span class="line">                idleBlock-&gt;block.page = (Page *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Page));</span><br><span class="line">                idleBlock-&gt;block.page-&gt;pageID = currentPage-&gt;page.pageID;</span><br><span class="line">                PrintBlockList(blockQueue, </span><br><span class="line">                               currentPage-&gt;page.pageID, COLOR_NotExist_IDLE);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                idleBlock = GetLongestWithoutAccess(blockQueue,currentPage);</span><br><span class="line">                idleBlock-&gt;block.time = Time++;</span><br><span class="line">                idleBlock-&gt;block.page-&gt;pageID = currentPage-&gt;page.pageID;</span><br><span class="line">                PrintBlockList(blockQueue, </span><br><span class="line">                               currentPage-&gt;page.pageID, COLOR_NotExist_NoIDLE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        currentPage = currentPage-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="fifo">FIFO</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FIFO</span><span class="params">(BlockQueue *blockQueue, process *proc)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//先进先出算法</span></span><br><span class="line">    PageQueue *currentPage = proc-&gt;pages.next;</span><br><span class="line">    <span class="keyword">while</span> (currentPage != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (SearchPage(blockQueue, currentPage-&gt;page) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            PrintBlockList(blockQueue, currentPage-&gt;page.pageID, COLOR_Exist);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            BlockQueue *idleBlock = SearchIdleBlock(blockQueue);</span><br><span class="line">            <span class="keyword">if</span> (idleBlock != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                idleBlock-&gt;block.state = BUSY;</span><br><span class="line">                idleBlock-&gt;block.time = Time++;</span><br><span class="line">                idleBlock-&gt;block.page = (Page *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Page));</span><br><span class="line">                idleBlock-&gt;block.page-&gt;pageID = currentPage-&gt;page.pageID;</span><br><span class="line">                PrintBlockList(blockQueue, </span><br><span class="line">                               currentPage-&gt;page.pageID, COLOR_NotExist_IDLE);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                idleBlock = GetOldestBlock(blockQueue);</span><br><span class="line">                idleBlock-&gt;block.time = Time++;</span><br><span class="line">                idleBlock-&gt;block.page-&gt;pageID = currentPage-&gt;page.pageID;</span><br><span class="line">                PrintBlockList(blockQueue, </span><br><span class="line">                               currentPage-&gt;page.pageID, COLOR_NotExist_NoIDLE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        currentPage = currentPage-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="lru">LRU</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LRU</span><span class="params">(BlockQueue *blockQueue, process *proc)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//最近最少使用</span></span><br><span class="line">    PageQueue *currentPage = proc-&gt;pages.next;</span><br><span class="line">    <span class="keyword">while</span> (currentPage != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        BlockQueue *searchedBlock = SearchPage(blockQueue, currentPage-&gt;page);</span><br><span class="line">        <span class="keyword">if</span> (searchedBlock != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            searchedBlock-&gt;block.time = Time++;</span><br><span class="line">            PrintBlockList(blockQueue, currentPage-&gt;page.pageID, COLOR_Exist);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            BlockQueue *idleBlock = SearchIdleBlock(blockQueue);</span><br><span class="line">            <span class="keyword">if</span> (idleBlock != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                idleBlock-&gt;block.state = BUSY;</span><br><span class="line">                idleBlock-&gt;block.time = Time++;</span><br><span class="line">                idleBlock-&gt;block.page = (Page *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Page));</span><br><span class="line">                idleBlock-&gt;block.page-&gt;pageID = currentPage-&gt;page.pageID;</span><br><span class="line">                PrintBlockList(blockQueue, </span><br><span class="line">                               currentPage-&gt;page.pageID, COLOR_NotExist_IDLE);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                idleBlock = GetOldestBlock(blockQueue);</span><br><span class="line">                idleBlock-&gt;block.time = Time++;</span><br><span class="line">                idleBlock-&gt;block.page-&gt;pageID = currentPage-&gt;page.pageID;</span><br><span class="line">                PrintBlockList(blockQueue, </span><br><span class="line">                               currentPage-&gt;page.pageID, COLOR_NotExist_NoIDLE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        currentPage = currentPage-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="页面替换算法测试">页面替换算法测试</h1><p>测试页面访问序列（页框数为3）</p><p><code>7  0  1  2  0  3  0  4  2  3  0  3  2  1  2  0  1  7  0  1</code></p><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/OS/Kernel/模拟实现请求分页虚存页面替换算法/main.png" alt="main"></p><h2 id="opt-1">OPT</h2><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  7  |  缺页! 主存不存在该页面，载入空闲页框1</span><br><span class="line">页框2 |     |</span><br><span class="line">页框3 |     |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  7  |</span><br><span class="line">页框2 |  0  |  缺页! 主存不存在该页面，载入空闲页框2</span><br><span class="line">页框3 |     |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  7  |</span><br><span class="line">页框2 |  0  |</span><br><span class="line">页框3 |  1  |  缺页! 主存不存在该页面，载入空闲页框3</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  2  |  缺页! 主存不存在该页面，替换页框1</span><br><span class="line">页框2 |  0  |</span><br><span class="line">页框3 |  1  |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  2  |</span><br><span class="line">页框2 |  0  |  命中! 主存已存在该页面，位于页框2</span><br><span class="line">页框3 |  1  |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  2  |</span><br><span class="line">页框2 |  0  |</span><br><span class="line">页框3 |  3  |  缺页! 主存不存在该页面，替换页框3</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  2  |</span><br><span class="line">页框2 |  0  |  命中! 主存已存在该页面，位于页框2</span><br><span class="line">页框3 |  3  |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  2  |</span><br><span class="line">页框2 |  4  |  缺页! 主存不存在该页面，替换页框2</span><br><span class="line">页框3 |  3  |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  2  |  命中! 主存已存在该页面，位于页框1</span><br><span class="line">页框2 |  4  |</span><br><span class="line">页框3 |  3  |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  2  |</span><br><span class="line">页框2 |  4  |</span><br><span class="line">页框3 |  3  |  命中! 主存已存在该页面，位于页框3</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  2  |</span><br><span class="line">页框2 |  0  |  缺页! 主存不存在该页面，替换页框2</span><br><span class="line">页框3 |  3  |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  2  |</span><br><span class="line">页框2 |  0  |</span><br><span class="line">页框3 |  3  |  命中! 主存已存在该页面，位于页框3</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  2  |  命中! 主存已存在该页面，位于页框1</span><br><span class="line">页框2 |  0  |</span><br><span class="line">页框3 |  3  |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  2  |</span><br><span class="line">页框2 |  0  |</span><br><span class="line">页框3 |  1  |  缺页! 主存不存在该页面，替换页框3</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  2  |  命中! 主存已存在该页面，位于页框1</span><br><span class="line">页框2 |  0  |</span><br><span class="line">页框3 |  1  |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  2  |</span><br><span class="line">页框2 |  0  |  命中! 主存已存在该页面，位于页框2</span><br><span class="line">页框3 |  1  |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  2  |</span><br><span class="line">页框2 |  0  |</span><br><span class="line">页框3 |  1  |  命中! 主存已存在该页面，位于页框3</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  7  |  缺页! 主存不存在该页面，替换页框1</span><br><span class="line">页框2 |  0  |</span><br><span class="line">页框3 |  1  |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  7  |</span><br><span class="line">页框2 |  0  |  命中! 主存已存在该页面，位于页框2</span><br><span class="line">页框3 |  1  |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  7  |</span><br><span class="line">页框2 |  0  |</span><br><span class="line">页框3 |  1  |  命中! 主存已存在该页面，位于页框3</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">缺页中断率为：45.00%</span><br></pre></td></tr></table></figure><p>运行结果部分截图</p><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/OS/Kernel/模拟实现请求分页虚存页面替换算法/OPT-run-res.png" alt="OPT-run-res"></p><p>对比准确数据</p><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/OS/Kernel/模拟实现请求分页虚存页面替换算法/OPT-accurate-res.png" alt="OPT-accurate-res"></p><h2 id="fifo-1">FIFO</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  7  |  缺页! 主存不存在该页面，载入空闲页框1</span><br><span class="line">页框2 |     |</span><br><span class="line">页框3 |     |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  7  |</span><br><span class="line">页框2 |  0  |  缺页! 主存不存在该页面，载入空闲页框2</span><br><span class="line">页框3 |     |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  7  |</span><br><span class="line">页框2 |  0  |</span><br><span class="line">页框3 |  1  |  缺页! 主存不存在该页面，载入空闲页框3</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  2  |  缺页! 主存不存在该页面，替换页框1</span><br><span class="line">页框2 |  0  |</span><br><span class="line">页框3 |  1  |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  2  |</span><br><span class="line">页框2 |  0  |  命中! 主存已存在该页面，位于页框2</span><br><span class="line">页框3 |  1  |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  2  |</span><br><span class="line">页框2 |  3  |  缺页! 主存不存在该页面，替换页框2</span><br><span class="line">页框3 |  1  |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  2  |</span><br><span class="line">页框2 |  3  |</span><br><span class="line">页框3 |  0  |  缺页! 主存不存在该页面，替换页框3</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  4  |  缺页! 主存不存在该页面，替换页框1</span><br><span class="line">页框2 |  3  |</span><br><span class="line">页框3 |  0  |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  4  |</span><br><span class="line">页框2 |  2  |  缺页! 主存不存在该页面，替换页框2</span><br><span class="line">页框3 |  0  |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  4  |</span><br><span class="line">页框2 |  2  |</span><br><span class="line">页框3 |  3  |  缺页! 主存不存在该页面，替换页框3</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  0  |  缺页! 主存不存在该页面，替换页框1</span><br><span class="line">页框2 |  2  |</span><br><span class="line">页框3 |  3  |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  0  |</span><br><span class="line">页框2 |  2  |</span><br><span class="line">页框3 |  3  |  命中! 主存已存在该页面，位于页框3</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  0  |</span><br><span class="line">页框2 |  2  |  命中! 主存已存在该页面，位于页框2</span><br><span class="line">页框3 |  3  |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  0  |</span><br><span class="line">页框2 |  1  |  缺页! 主存不存在该页面，替换页框2</span><br><span class="line">页框3 |  3  |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  0  |</span><br><span class="line">页框2 |  1  |</span><br><span class="line">页框3 |  2  |  缺页! 主存不存在该页面，替换页框3</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  0  |  命中! 主存已存在该页面，位于页框1</span><br><span class="line">页框2 |  1  |</span><br><span class="line">页框3 |  2  |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  0  |</span><br><span class="line">页框2 |  1  |  命中! 主存已存在该页面，位于页框2</span><br><span class="line">页框3 |  2  |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  7  |  缺页! 主存不存在该页面，替换页框1</span><br><span class="line">页框2 |  1  |</span><br><span class="line">页框3 |  2  |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  7  |</span><br><span class="line">页框2 |  0  |  缺页! 主存不存在该页面，替换页框2</span><br><span class="line">页框3 |  2  |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  7  |</span><br><span class="line">页框2 |  0  |</span><br><span class="line">页框3 |  1  |  缺页! 主存不存在该页面，替换页框3</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">缺页中断率为：75.00%</span><br></pre></td></tr></table></figure><p>运行结果部分截图</p><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/OS/Kernel/模拟实现请求分页虚存页面替换算法/FIFO-run-res.png" alt="FIFO-run-res"></p><p>对比准确数据</p><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/OS/Kernel/模拟实现请求分页虚存页面替换算法/FIFO-accurate-res.png" alt="FIFO-accurate-res"></p><h2 id="lru-1">LRU</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  7  |  缺页! 主存不存在该页面，载入空闲页框1</span><br><span class="line">页框2 |     |</span><br><span class="line">页框3 |     |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  7  |</span><br><span class="line">页框2 |  0  |  缺页! 主存不存在该页面，载入空闲页框2</span><br><span class="line">页框3 |     |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  7  |</span><br><span class="line">页框2 |  0  |</span><br><span class="line">页框3 |  1  |  缺页! 主存不存在该页面，载入空闲页框3</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  2  |  缺页! 主存不存在该页面，替换页框1</span><br><span class="line">页框2 |  0  |</span><br><span class="line">页框3 |  1  |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  2  |</span><br><span class="line">页框2 |  0  |  命中! 主存已存在该页面，位于页框2</span><br><span class="line">页框3 |  1  |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  2  |</span><br><span class="line">页框2 |  0  |</span><br><span class="line">页框3 |  3  |  缺页! 主存不存在该页面，替换页框3</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  2  |</span><br><span class="line">页框2 |  0  |  命中! 主存已存在该页面，位于页框2</span><br><span class="line">页框3 |  3  |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  4  |  缺页! 主存不存在该页面，替换页框1</span><br><span class="line">页框2 |  0  |</span><br><span class="line">页框3 |  3  |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  4  |</span><br><span class="line">页框2 |  0  |</span><br><span class="line">页框3 |  2  |  缺页! 主存不存在该页面，替换页框3</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  4  |</span><br><span class="line">页框2 |  3  |  缺页! 主存不存在该页面，替换页框2</span><br><span class="line">页框3 |  2  |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  0  |  缺页! 主存不存在该页面，替换页框1</span><br><span class="line">页框2 |  3  |</span><br><span class="line">页框3 |  2  |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  0  |</span><br><span class="line">页框2 |  3  |  命中! 主存已存在该页面，位于页框2</span><br><span class="line">页框3 |  2  |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  0  |</span><br><span class="line">页框2 |  3  |</span><br><span class="line">页框3 |  2  |  命中! 主存已存在该页面，位于页框3</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  1  |  缺页! 主存不存在该页面，替换页框1</span><br><span class="line">页框2 |  3  |</span><br><span class="line">页框3 |  2  |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  1  |</span><br><span class="line">页框2 |  3  |</span><br><span class="line">页框3 |  2  |  命中! 主存已存在该页面，位于页框3</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  1  |</span><br><span class="line">页框2 |  0  |  缺页! 主存不存在该页面，替换页框2</span><br><span class="line">页框3 |  2  |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  1  |  命中! 主存已存在该页面，位于页框1</span><br><span class="line">页框2 |  0  |</span><br><span class="line">页框3 |  2  |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  1  |</span><br><span class="line">页框2 |  0  |</span><br><span class="line">页框3 |  7  |  缺页! 主存不存在该页面，替换页框3</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  1  |</span><br><span class="line">页框2 |  0  |  命中! 主存已存在该页面，位于页框2</span><br><span class="line">页框3 |  7  |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">页框1 |  1  |  命中! 主存已存在该页面，位于页框1</span><br><span class="line">页框2 |  0  |</span><br><span class="line">页框3 |  7  |</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">缺页中断率为：60.00%</span><br></pre></td></tr></table></figure><p>运行结果部分截图</p><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/OS/Kernel/模拟实现请求分页虚存页面替换算法/LRU-run-res.png" alt="LRU-run-res"></p><p>对比准确数据</p><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/OS/Kernel/模拟实现请求分页虚存页面替换算法/LRU-accurate-res.png" alt="LRU-accurate-res"></p><h1 id="总结">总结</h1><p>分页虚拟存储管理既有优点又有缺点，优点是作业的程序和数据可按页分散存放在主存中，有效解决了碎片问题； 既有利于改进主存利用率，又有利于多道程序运行。缺点是要有硬件支持，要进行缺页中断处理，机器成本增加，系统开销加大。缺页中断率小是虚拟存储管理目标之一，而影响缺页中断率的因素主要有：主存页框数、页面大小、页面分配机制，替换算法、程序的局部性。好的页面替换算法能够降低缺页中断率。</p><h1 id="完整源码">完整源码</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by wylu on 2018/1/6.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUSY 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IDLE 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COLOR_Exist 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COLOR_NotExist_IDLE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COLOR_NotExist_NoIDLE 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> hitCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> pages[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Page</span> &#123;</span> <span class="comment">// 页面</span></span><br><span class="line">    <span class="keyword">int</span> pageID;     <span class="comment">//页号</span></span><br><span class="line">&#125; Page;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PageQueue</span> &#123;</span> <span class="comment">//页面队列</span></span><br><span class="line">    Page page;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">PageQueue</span> *<span class="title">next</span>;</span> <span class="comment">//下一页面</span></span><br><span class="line">&#125; PageQueue;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Block</span> &#123;</span> <span class="comment">//块记录结构</span></span><br><span class="line">    Page *page; <span class="comment">//页面</span></span><br><span class="line">    <span class="keyword">long</span> time; <span class="comment">//最后访问时间</span></span><br><span class="line">    <span class="keyword">int</span> state; <span class="comment">//页块是否空闲</span></span><br><span class="line">&#125; Block;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">BlockQueue</span> &#123;</span> <span class="comment">//块队列</span></span><br><span class="line">    Block block;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">BlockQueue</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; BlockQueue;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">process</span> &#123;</span> <span class="comment">// 进程结构</span></span><br><span class="line">    PageQueue pages; <span class="comment">//页面</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> pageLength; <span class="comment">// 页面数</span></span><br><span class="line">&#125; process;<span class="comment">//进程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Time = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">GetSystemUtime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取系统当前时间的微秒数</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">nowit</span>;</span></span><br><span class="line">    gettimeofday(&amp;nowit, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1000000</span> * nowit.tv_sec + nowit.tv_usec;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BlockQueue *<span class="title">InitializeBlockQueue</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化主存块，把首地址返回，如果分配失败返回NULL</span></span><br><span class="line">    BlockQueue *block = <span class="literal">NULL</span>, *p = <span class="literal">NULL</span>, *q = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        p = (BlockQueue *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BlockQueue));</span><br><span class="line">        p-&gt;block.time = <span class="number">0</span>;</span><br><span class="line">        p-&gt;block.state = <span class="number">0</span>;</span><br><span class="line">        p-&gt;block.page = <span class="literal">NULL</span>;</span><br><span class="line">        p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span> (block == <span class="literal">NULL</span>) block = p;</span><br><span class="line">        <span class="keyword">else</span> q-&gt;next = p;</span><br><span class="line">        q = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetBlockQueueSize</span><span class="params">(BlockQueue *blockQueue)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取块长度</span></span><br><span class="line">    BlockQueue *presentBlock = blockQueue;</span><br><span class="line">    <span class="keyword">int</span> blockQueueSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (presentBlock != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        blockQueueSize++;</span><br><span class="line">        presentBlock = presentBlock-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> blockQueueSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ResetBlockQueue</span><span class="params">(BlockQueue *blockQueue)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//清空块内容</span></span><br><span class="line">    BlockQueue *presentBlock = blockQueue;</span><br><span class="line">    <span class="keyword">while</span> (presentBlock != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        presentBlock-&gt;block.page = <span class="literal">NULL</span>;</span><br><span class="line">        presentBlock-&gt;block.state = IDLE;</span><br><span class="line">        presentBlock-&gt;block.time = <span class="number">0</span>;</span><br><span class="line">        presentBlock = presentBlock-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PageQueue *<span class="title">InitializePageQueue</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> pageLength, <span class="keyword">int</span> maxPageID)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化页面，把首地址返回。如果分配失败，返回NULL</span></span><br><span class="line">    srand(<span class="number">100</span>);</span><br><span class="line">    PageQueue *head = <span class="literal">NULL</span>, *p = <span class="literal">NULL</span>, *q = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pageLength; i++) &#123;</span><br><span class="line">        p = (PageQueue *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PageQueue));</span><br><span class="line">        p-&gt;page.pageID = rand() % (maxPageID + <span class="number">1</span>);</span><br><span class="line">        p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, p-&gt;page.pageID);</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span>) head = p;</span><br><span class="line">        <span class="keyword">else</span> q-&gt;next = p;</span><br><span class="line">        q = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PageQueue *<span class="title">InitializePageQueueWithInput</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> pageLength)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化页面，把首地址返回。如果分配失败，返回NULL</span></span><br><span class="line">    PageQueue *head = <span class="literal">NULL</span>, *p = <span class="literal">NULL</span>, *q = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pageLength; i++) &#123;</span><br><span class="line">        p = (PageQueue *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PageQueue));</span><br><span class="line">        p-&gt;page.pageID = pages[i];</span><br><span class="line">        p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, p-&gt;page.pageID);</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span>) head = p;</span><br><span class="line">        <span class="keyword">else</span> q-&gt;next = p;</span><br><span class="line">        q = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitializeProcess</span><span class="params">(process *proc, <span class="keyword">unsigned</span> <span class="keyword">int</span> pageSize, <span class="keyword">unsigned</span> <span class="keyword">int</span> maxPageID)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化进程，随机生成进程页面访问序列</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"进程初始化：\n"</span>);</span><br><span class="line">    proc-&gt;pageLength = pageSize;</span><br><span class="line">    proc-&gt;pages.next = InitializePageQueue(pageSize, maxPageID);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitializeProcessWithInput</span><span class="params">(process *proc, <span class="keyword">unsigned</span> <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化进程，接收手动输入的页面访问序列</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"进程初始化：\n"</span>);</span><br><span class="line">    proc-&gt;pageLength = pageSize;</span><br><span class="line">    proc-&gt;pages.next = InitializePageQueueWithInput(pageSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BlockQueue *<span class="title">SearchPage</span><span class="params">(BlockQueue *blockQueue, Page page)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//搜索特定页面</span></span><br><span class="line">    BlockQueue *p = blockQueue;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;block.page != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;block.page-&gt;pageID == page.pageID)</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BlockQueue *<span class="title">SearchIdleBlock</span><span class="params">(BlockQueue *blockQueue)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//搜索空闲块</span></span><br><span class="line">    BlockQueue *p = blockQueue;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;block.state == IDLE) <span class="keyword">return</span> p;</span><br><span class="line">        <span class="keyword">else</span> p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetBlockLable</span><span class="params">(BlockQueue *blockQueue, BlockQueue *goalBlock)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//返回块号，编号从1开始</span></span><br><span class="line">    BlockQueue *p = blockQueue;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != goalBlock) &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BlockQueue *<span class="title">GetOldestBlock</span><span class="params">(BlockQueue *blockQueue)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//取得主存中停留最久的页面，返回它的地址</span></span><br><span class="line">    BlockQueue *p = blockQueue, *oldestAddr;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) <span class="keyword">return</span> p;</span><br><span class="line">    <span class="keyword">long</span> oldest = p-&gt;block.time;</span><br><span class="line">    oldestAddr = p;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;block.time &lt; oldest) &#123;</span><br><span class="line">            oldest = p-&gt;block.time;</span><br><span class="line">            oldestAddr = p;</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> oldestAddr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BlockQueue *<span class="title">GetLongestWithoutAccess</span><span class="params">(BlockQueue *blockQueue, PageQueue *currentPage)</span></span>&#123;</span><br><span class="line">    <span class="comment">//获取主存中最长时间将不会被访问的页面，返回其地址</span></span><br><span class="line">    BlockQueue *p = blockQueue, *longestAddr;</span><br><span class="line">    PageQueue *q = currentPage-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) <span class="keyword">return</span> p;</span><br><span class="line">    longestAddr = p;</span><br><span class="line">    <span class="keyword">int</span> max_count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(q != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;block.page-&gt;pageID == q-&gt;page.pageID) <span class="keyword">break</span>;</span><br><span class="line">            q = q-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count &gt; max_count)&#123;</span><br><span class="line">            max_count = count;</span><br><span class="line">            longestAddr = p;</span><br><span class="line">        &#125;</span><br><span class="line">        q = currentPage-&gt;next;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> longestAddr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintBlockList</span><span class="params">(BlockQueue *blockQueue, <span class="keyword">int</span> pageID, <span class="keyword">int</span> color)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//打印块信息</span></span><br><span class="line">    BlockQueue *presentBlock = blockQueue;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; GetBlockQueueSize(blockQueue); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (presentBlock == <span class="literal">NULL</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"页框%d "</span>, i + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (presentBlock-&gt;block.state == IDLE) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"|     |\n"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (presentBlock-&gt;block.page-&gt;pageID != pageID) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"|  %d  |\n"</span>, presentBlock-&gt;block.page-&gt;pageID);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">switch</span> (color) &#123;</span><br><span class="line">                    <span class="keyword">case</span> COLOR_Exist:</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"|  %d  |  命中! 主存已存在该页面，位于页框%d\n"</span>, </span><br><span class="line">                               pageID, GetBlockLable(blockQueue, presentBlock));</span><br><span class="line">                        hitCount++;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> COLOR_NotExist_IDLE:</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"|  %d  |  缺页! 主存不存在该页面，载入空闲页框%d\n"</span>, </span><br><span class="line">                               pageID, GetBlockLable(blockQueue, presentBlock));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> COLOR_NotExist_NoIDLE:</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"|  %d  |  缺页! 主存不存在该页面，替换页框%d\n"</span>, </span><br><span class="line">                               pageID, GetBlockLable(blockQueue, presentBlock));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        presentBlock = presentBlock-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"---------------------------------------------------------\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FIFO</span><span class="params">(BlockQueue *blockQueue, process *proc)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//先进先出算法</span></span><br><span class="line">    PageQueue *currentPage = proc-&gt;pages.next;</span><br><span class="line">    <span class="keyword">while</span> (currentPage != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (SearchPage(blockQueue, currentPage-&gt;page) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            PrintBlockList(blockQueue, currentPage-&gt;page.pageID, COLOR_Exist);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            BlockQueue *idleBlock = SearchIdleBlock(blockQueue);</span><br><span class="line">            <span class="keyword">if</span> (idleBlock != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                idleBlock-&gt;block.state = BUSY;</span><br><span class="line">                idleBlock-&gt;block.time = Time++;</span><br><span class="line">                idleBlock-&gt;block.page = (Page *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Page));</span><br><span class="line">                idleBlock-&gt;block.page-&gt;pageID = currentPage-&gt;page.pageID;</span><br><span class="line">                PrintBlockList(blockQueue, </span><br><span class="line">                               currentPage-&gt;page.pageID, COLOR_NotExist_IDLE);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                idleBlock = GetOldestBlock(blockQueue);</span><br><span class="line">                idleBlock-&gt;block.time = Time++;</span><br><span class="line">                idleBlock-&gt;block.page-&gt;pageID = currentPage-&gt;page.pageID;</span><br><span class="line">                PrintBlockList(blockQueue, </span><br><span class="line">                               currentPage-&gt;page.pageID, COLOR_NotExist_NoIDLE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        currentPage = currentPage-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LRU</span><span class="params">(BlockQueue *blockQueue, process *proc)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//最近最少使用</span></span><br><span class="line">    PageQueue *currentPage = proc-&gt;pages.next;</span><br><span class="line">    <span class="keyword">while</span> (currentPage != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        BlockQueue *searchedBlock = SearchPage(blockQueue, currentPage-&gt;page);</span><br><span class="line">        <span class="keyword">if</span> (searchedBlock != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            searchedBlock-&gt;block.time = Time++;</span><br><span class="line">            PrintBlockList(blockQueue, currentPage-&gt;page.pageID, COLOR_Exist);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            BlockQueue *idleBlock = SearchIdleBlock(blockQueue);</span><br><span class="line">            <span class="keyword">if</span> (idleBlock != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                idleBlock-&gt;block.state = BUSY;</span><br><span class="line">                idleBlock-&gt;block.time = Time++;</span><br><span class="line">                idleBlock-&gt;block.page = (Page *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Page));</span><br><span class="line">                idleBlock-&gt;block.page-&gt;pageID = currentPage-&gt;page.pageID;</span><br><span class="line">                PrintBlockList(blockQueue, </span><br><span class="line">                               currentPage-&gt;page.pageID, COLOR_NotExist_IDLE);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                idleBlock = GetOldestBlock(blockQueue);</span><br><span class="line">                idleBlock-&gt;block.time = Time++;</span><br><span class="line">                idleBlock-&gt;block.page-&gt;pageID = currentPage-&gt;page.pageID;</span><br><span class="line">                PrintBlockList(blockQueue, </span><br><span class="line">                               currentPage-&gt;page.pageID, COLOR_NotExist_NoIDLE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        currentPage = currentPage-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OPT</span><span class="params">(BlockQueue *blockQueue, process *proc)</span></span>&#123;</span><br><span class="line">    <span class="comment">//最佳页面替换算法</span></span><br><span class="line">    PageQueue *currentPage = proc-&gt;pages.next;</span><br><span class="line">    <span class="keyword">while</span> (currentPage != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (SearchPage(blockQueue, currentPage-&gt;page) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            PrintBlockList(blockQueue, currentPage-&gt;page.pageID, COLOR_Exist);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            BlockQueue *idleBlock = SearchIdleBlock(blockQueue);</span><br><span class="line">            <span class="keyword">if</span> (idleBlock != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                idleBlock-&gt;block.state = BUSY;</span><br><span class="line">                idleBlock-&gt;block.time = Time++;</span><br><span class="line">                idleBlock-&gt;block.page = (Page *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Page));</span><br><span class="line">                idleBlock-&gt;block.page-&gt;pageID = currentPage-&gt;page.pageID;</span><br><span class="line">                PrintBlockList(blockQueue, </span><br><span class="line">                               currentPage-&gt;page.pageID, COLOR_NotExist_IDLE);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                idleBlock = GetLongestWithoutAccess(blockQueue,currentPage);</span><br><span class="line">                idleBlock-&gt;block.time = Time++;</span><br><span class="line">                idleBlock-&gt;block.page-&gt;pageID = currentPage-&gt;page.pageID;</span><br><span class="line">                PrintBlockList(blockQueue, </span><br><span class="line">                               currentPage-&gt;page.pageID, COLOR_NotExist_NoIDLE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        currentPage = currentPage-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectAlgorithm</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n========================================================\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\t1.OPT\t2.FIFO\t3.LRU\t0.exit\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"========================================================\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> isGoOn = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (isGoOn)&#123;</span><br><span class="line">        <span class="comment">//主存块数，即页框数</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> blockNumber;</span><br><span class="line">        <span class="comment">//进程页面数</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> pageNumber;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入主存块数(即页框数)："</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%u"</span>, &amp;blockNumber);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入进程页面数："</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%u"</span>, &amp;pageNumber);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"========================================================\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\t主存页框数: %u, 进程页面数: %u\n"</span>, blockNumber, pageNumber);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"========================================================\n"</span>);</span><br><span class="line"></span><br><span class="line">        BlockQueue *blocks;</span><br><span class="line">        process proc;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"是否手动输入访问序列? y/n\n"</span>);</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="keyword">if</span> (getchar() == <span class="string">'y'</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"请输入访问序列："</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pageNumber; ++i) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;pages[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            InitializeProcessWithInput(&amp;proc,pageNumber);</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            InitializeProcess(&amp;proc, pageNumber, <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        blocks = InitializeBlockQueue(blockNumber);</span><br><span class="line"></span><br><span class="line">        SelectAlgorithm();</span><br><span class="line">        <span class="keyword">int</span> oper;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;oper))&#123;</span><br><span class="line">            <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n---------------------------------------------------------\n"</span>);</span><br><span class="line">            hitCount = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">switch</span> (oper)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    OPT(blocks, &amp;proc);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    FIFO(blocks, &amp;proc);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    LRU(blocks, &amp;proc);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    SelectAlgorithm();</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"非法输入!请重新输入："</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"缺页中断率为：%.2lf%%\n"</span>,(<span class="number">1</span>-(hitCount/pageNumber))*<span class="number">100</span>);</span><br><span class="line">            ResetBlockQueue(blocks);</span><br><span class="line">            SelectAlgorithm();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"是否重新输入访问序列? y/n\n"</span>);</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="keyword">if</span>(getchar() != <span class="string">'y'</span>) isGoOn = <span class="literal">false</span>;</span><br><span class="line">        system(<span class="string">"cls"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;请求分页虚存管理在地址映射过程中，若页表中发现所要访问的页不在主存，则产生缺页异常，操作系统接到此信号后，就调出缺页异常处理程序，根据页表中给出的磁盘地址，将该页面调入主存，是作业继续运行下去。如果主存中有空闲块，则分配一个页框，将新调入页面装入，并修改页表中相应页表项的驻留位及相应的主存块号；若此时主存中没有空闲块，则要淘汰某页面，若该页在此期间被修改过，要将其先写回磁盘，这个过程就是页面替换。&lt;/p&gt;
&lt;p&gt;页面替换算法是虚拟存储管理实现的关键，好的算法能够减少和避免“颠簸”现象，本文在模拟实现 FIFO，LRU 和 OPT 几种经典页面替换算法的基础上，比较各种替换算法的效率及优缺点，从而了解虚拟存储实现的过程，理解内存页面调度的机制。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="https://wylu.me/categories/OS/"/>
    
      <category term="Kernel" scheme="https://wylu.me/categories/OS/Kernel/"/>
    
    
      <category term="OS" scheme="https://wylu.me/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Linux文件权限</title>
    <link href="https://wylu.me/posts/1915f42e/"/>
    <id>https://wylu.me/posts/1915f42e/</id>
    <published>2019-06-08T11:42:37.000Z</published>
    <updated>2020-04-18T06:10:32.871Z</updated>
    
    <content type="html"><![CDATA[<p>Linux 文件权限笔记，摘自《Linux命令行与shell脚本编程大全》，方便以后查阅。</p><a id="more"></a><h1 id="使用文件权限符">使用文件权限符</h1><p><code>ls</code> 命令可以查看 Linux 系统上的文件、目录和设备的权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls –l</span></span><br><span class="line">total 68</span><br><span class="line">-rw-rw-r-- 1 rich rich 50 2010-09-13 07:49 file1.gz</span><br><span class="line">-rw-rw-r-- 1 rich rich 23 2010-09-13 07:50 file2</span><br><span class="line">-rw-rw-r-- 1 rich rich 48 2010-09-13 07:56 file3</span><br><span class="line">-rw-rw-r-- 1 rich rich 34 2010-09-13 08:59 file4</span><br><span class="line">-rwxrwxr-x 1 rich rich 4882 2010-09-18 13:58 myprog</span><br><span class="line">-rw-rw-r-- 1 rich rich 237 2010-09-18 13:58 myprog.c</span><br><span class="line">drwxrwxr-x 2 rich rich 4096 2010-09-03 15:12 test1</span><br><span class="line">drwxrwxr-x 2 rich rich 4096 2010-09-03 15:12 test2</span><br><span class="line"><span class="meta">$</span><span class="bash"></span></span><br></pre></td></tr></table></figure><p>输出结果的第一个字段就是描述文件和目录权限的编码。这个字段的第一个字符代表了对象的类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- 代表文件</span><br><span class="line">d 代表目录</span><br><span class="line">l 代表链接</span><br><span class="line">c 代表字符型设备</span><br><span class="line">b 代表块设备</span><br><span class="line">n 代表网络设备</span><br></pre></td></tr></table></figure><p>之后有 3 组三字符的编码，每组定义了 3 种访问权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r 代表对象是可读的</span><br><span class="line">w 代表对象是可写的</span><br><span class="line">x 代表对象是可执行的</span><br></pre></td></tr></table></figure><p>若没有某种权限，在该权限位会出现单破折线 <code>-</code>。这 3 组权限分别对应对象的 3 个安全级别：</p><ul><li>对象的属主</li><li>对象的属组</li><li>系统的其他用户</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/OS/Linux/Linux文件权限/linux-file-permission.png" alt="linux-file-permission"></p><p>例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rwxrwxr-x 1 rich rich 4882 2010-09-18 13:58 myprog</span><br></pre></td></tr></table></figure><p>文件 myprog 有下面3组权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rwx: 文件的属主（设为登录名rich）</span><br><span class="line">rwx: 文件的属组（设为组名rich）</span><br><span class="line">r-x: 系统上的其他人</span><br></pre></td></tr></table></figure><p>这些权限说明登录名为 rich 的用户可以读取、写入以及执行这个文件（可以看作拥有全部权限）。类似地，rich 组的成员也可以读取、写入和执行这个文件。然而不属于 rich 组的其他用户只能读取和执行这个文件：<code>w</code> 被单破折线 <code>-</code> 取代了，说明这个安全级别没有写入权限。</p><h1 id="默认文件权限">默认文件权限</h1><p><code>umask</code> 命令用来设置所创建文件和目录的默认权限。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> touch newfile</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls -al newfile</span></span><br><span class="line">-rw-r--r-- 1 rich rich 0 Sep 20 19:16 newfile</span><br><span class="line"><span class="meta">$</span><span class="bash"></span></span><br></pre></td></tr></table></figure><p><code>touch</code> 命令用分配给我的用户账户的默认权限创建了这个文件。umask 命令可以显示和设置这个默认权限。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">umask</span></span></span><br><span class="line">0022</span><br><span class="line"><span class="meta">$</span><span class="bash"></span></span><br></pre></td></tr></table></figure><p>第一位代表了一项特别的安全特性，叫作粘着位（sticky bit），后面的 3 位表示文件或目录对应的 umask 八进制值。要理解 umask 是怎么工作的，得先理解八进制模式的安全性设置。</p><p>八进制模式的安全性设置先获取这 3 个 <code>rwx</code> 权限的值，然后将其转换成 3 位二进制值，用一个八进制值来表示。在这个二进制表示中，每个位置代表一个二进制位。因此，如果读权限是唯一置位的权限，权限值就是 <code>r--</code>，转换成二进制值就是 100，代表的八进制值是 4。下表列出了可 能会遇到的组合。</p><p><img src="https://cdn.jsdelivr.net/gh/wylu/cdn/post/OS/Linux/Linux文件权限/permission-combination.png" alt="permission-combination"></p><p>八进制模式先取得权限的八进制值，然后再把这三组安全级别（属主、属组和其他用户）的八进制值顺序列出。因此，八进制模式的值 664 代表属主和属组成员都有读取和写入的权限，而其他用户都只有读取权限。</p><p>八进制的 umask 值是 0022，而上面所创建的文件的八进制权限却是 644。umask 值只是个掩码，它会屏蔽掉不想授予该安全级别的权限。要把 umask 值从对象的全权限值中减掉。对文件来说，全权限的值是 666（所有用户都有读和写的权限）；而对目录来说，则是 777（所有用户都有读、写、执行权限）。所以在上例中，文件一开始的权限是 666，减去 umask 值 022 之后，剩下的文件权限就成了 644。</p><p>在大多数 Linux 发行版中，umask 值通常会设置在 <code>/etc/profile</code> 启动文件中，可以用 umask 命令为默认 umask 设置指定一个新值。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">umask</span> 026</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> touch newfile2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls -l newfile2</span></span><br><span class="line">-rw-r----- 1 rich rich 0 Sep 20 19:46 newfile2</span><br><span class="line"><span class="meta">$</span><span class="bash"></span></span><br></pre></td></tr></table></figure><p>在把 umask 值设成 026 后，默认的文件权限变成了 640，因此新文件现在对组成员来说是只读的，而系统里的其他成员则没有任何权限。umask 值同样会作用在创建目录上。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir newdir</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls -l</span></span><br><span class="line">drwxr-x--x 2 rich rich 4096 Sep 20 20:11 newdir/</span><br><span class="line"><span class="meta">$</span><span class="bash"></span></span><br></pre></td></tr></table></figure><p>由于目录的默认权限是 777，umask 作用后生成的目录权限不同于生成的文件权限。umask 值 026 会从 777 中减去，留下来 751 作为目录权限设置。</p><h1 id="改变权限">改变权限</h1><p><code>chmod</code> 命令用来改变文件和目录的安全性设置。该命令的格式如下：</p><p><code>chmod options mode file</code></p><p>mode 参数可以使用 <strong>八进制模式</strong> 或 <strong>符号模式</strong> 进行安全性设置。八进制模式设置非常直观，直接用期望赋予文件的标准 3 位八进制权限码即可。</p><h2 id="options">options</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-c 或 --changes： 效果类似 &quot;-v&quot; 参数，但仅回报更改的部分</span><br><span class="line">-f 或 --quiet 或 --silent： 不显示错误信息</span><br><span class="line">-R 或 --recursive： 递归处理，将指令目录下的所有文件及子目录一并处理</span><br><span class="line">-v 或 --verbose： 显示指令执行过程</span><br></pre></td></tr></table></figure><h2 id="八进制模式">八进制模式</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> chmod 760 newfile</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls -l newfile</span></span><br><span class="line">-rwxrw---- 1 rich rich 0 Sep 20 19:16 newfile</span><br><span class="line"><span class="meta">$</span><span class="bash"></span></span><br></pre></td></tr></table></figure><p>八进制文件权限会自动应用到指定的文件上。</p><h2 id="符号模式">符号模式</h2><p>与通常用到的 3 组三字符权限字符不同，chmod 命令采用了另一种方法。下面是在符号模式下指定权限的格式。</p><p><code>[ugoa…][[+-=][rwxXstugo…]</code></p><ul><li><p>第一组字符定义了权限作用的对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">u 代表用户</span><br><span class="line">g 代表组</span><br><span class="line">o 代表其他</span><br><span class="line">a 代表上述所有</span><br></pre></td></tr></table></figure></li><li><p>第二组的符号表示在现有权限基础上增加权限 <code>+</code>，还是在现有权限基础上移除权限 <code>-</code>，或是将权限设置成后面的值 <code>=</code>。</p></li><li><p>第三组符合代表作用到设置上的权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">X：如果对象是目录或者它已有执行权限，赋予执行权限。</span><br><span class="line">s：运行时重新设置 UID 或 GID。</span><br><span class="line">t：保留文件或目录。</span><br><span class="line">u：将权限设置为跟属主一样。</span><br><span class="line">g：将权限设置为跟属组一样。</span><br><span class="line">o：将权限设置为跟其他用户一样。</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> chmod o+r newfile</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls -lF newfile</span></span><br><span class="line">-rwxrw-r-- 1 rich rich 0 Sep 20 19:16 newfile*</span><br><span class="line"><span class="meta">$</span><span class="bash"></span></span><br></pre></td></tr></table></figure><p>不管其他用户在这一安全级别之前都有什么权限，<code>o+r</code> 都给这一级别添加读取权限。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> chmod u-x newfile</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls -lF newfile</span></span><br><span class="line">-rw-rw-r-- 1 rich rich 0 Sep 20 19:16 newfile</span><br><span class="line"><span class="meta">$</span><span class="bash"></span></span><br></pre></td></tr></table></figure><p><code>u-x</code> 移除了属主已有的执行权限。注意 ls 命令的 <code>-F</code> 选项，它能够在具有执行权限的文件名后加一个星号。</p></li></ul><p>options 为 chmod 命令提供了另外一些功能。<code>-R</code> 选项可以让权限的改变递归地作用到文件和子目录。你可以使用通配符指定多个文件，然后利用一条命令将权限更改应用到这些文件上。</p><h1 id="改变所属关系">改变所属关系</h1><h2 id="chown">chown</h2><p><code>chown</code> 命令用来改变文件的属主，格式如下：</p><p><code>chown options owner[.group] file</code></p><p>可用登录名或 UID 来指定文件的新属主。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># chown dan newfile</span><br><span class="line"># ls -l newfile</span><br><span class="line">-rw-rw-r-- 1 dan rich 0 Sep 20 19:16 newfile</span><br><span class="line">#</span><br></pre></td></tr></table></figure><p>chown 命令也支持同时改变文件的属主和属组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># chown dan.shared newfile</span><br><span class="line"># ls -l newfile</span><br><span class="line">-rw-rw-r-- 1 dan shared 0 Sep 20 19:16 newfile</span><br><span class="line">#</span><br></pre></td></tr></table></figure><p>可以只改变一个目录的默认属组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># chown .rich newfile</span><br><span class="line"># ls -l newfile</span><br><span class="line">-rw-rw-r-- 1 dan rich 0 Sep 20 19:16 newfile</span><br><span class="line">#</span><br></pre></td></tr></table></figure><p>如果 Linux 系统采用和用户登录名匹配的组名，可以只用一个条目就改变二者。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># chown test. newfile</span><br><span class="line"># ls -l newfile</span><br><span class="line">-rw-rw-r-- 1 test test 0 Sep 20 19:16 newfile</span><br><span class="line">#</span><br></pre></td></tr></table></figure><p>chown 命令采用一些不同的选项参数。<code>-R</code> 选项配合通配符可以递归地改变子目录和文件的所属关系。<code>-h</code> 选项可以改变该文件的所有符号链接文件的所属关系。</p><p><strong>只有 root 用户能够改变文件的属主。任何属主都可以改变文件的属组，但前提是属主必须是原属组和目标属组的成员。</strong></p><h2 id="chgrp">chgrp</h2><p><code>chgrp</code> 命令用来改变文件的默认属组。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> chgrp shared newfile</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls -l newfile</span></span><br><span class="line">-rw-rw-r-- 1 rich shared 0 Sep 20 19:16 newfile</span><br><span class="line"><span class="meta">$</span><span class="bash"></span></span><br></pre></td></tr></table></figure><p>用户账户必须是这个文件的属主，除了能够更换属组之外，还得是新组的成员。现在 shared 组的任意一个成员都可以写这个文件了。这是 Linux 系统共享文件的一个途径。</p><h1 id="references">References</h1><p>《Linux命令行与shell脚本编程大全》Richard Blum Christine Bresnahan</p><p><a href="http://man.linuxde.net/chmod" rel="external nofollow noopener noreferrer" target="_blank">http://man.linuxde.net/chmod</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux 文件权限笔记，摘自《Linux命令行与shell脚本编程大全》，方便以后查阅。&lt;/p&gt;
    
    </summary>
    
      <category term="OS" scheme="https://wylu.me/categories/OS/"/>
    
      <category term="Linux" scheme="https://wylu.me/categories/OS/Linux/"/>
    
    
      <category term="Linux" scheme="https://wylu.me/tags/Linux/"/>
    
  </entry>
  
</feed>
